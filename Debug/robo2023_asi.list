
robo2023_asi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b150  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  0800b2e0  0800b2e0  0001b2e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b93c  0800b93c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b93c  0800b93c  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b93c  0800b93c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b93c  0800b93c  0001b93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b940  0800b940  0001b940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800b944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000350  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000524  20000524  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000086  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f632  00000000  00000000  0002028a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000022a5  00000000  00000000  0002f8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000da0  00000000  00000000  00031b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000aa1  00000000  00000000  00032908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c763  00000000  00000000  000333a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000114ee  00000000  00000000  0004fb0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a6e6b  00000000  00000000  00060ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000509c  00000000  00000000  00107e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0010cf04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b2c8 	.word	0x0800b2c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800b2c8 	.word	0x0800b2c8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <copy>:
uint8_t rxBuffer[RX_BUFFER_SIZE];
uint32_t rxIndex = 0;
char string[RX_BUFFER_SIZE];

void copy()
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
	for(int i=0;i<RX_BUFFER_SIZE;i++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	e00b      	b.n	8000d38 <copy+0x24>
	{
		string[i]=rxBuffer[i];
 8000d20:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <copy+0x38>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	7819      	ldrb	r1, [r3, #0]
 8000d28:	4a09      	ldr	r2, [pc, #36]	; (8000d50 <copy+0x3c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	460a      	mov	r2, r1
 8000d30:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<RX_BUFFER_SIZE;i++)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3301      	adds	r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d3c:	ddf0      	ble.n	8000d20 <copy+0xc>
	}
}
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	2000034c 	.word	0x2000034c
 8000d50:	20000390 	.word	0x20000390

08000d54 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if (huart == &huart1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a15      	ldr	r2, [pc, #84]	; (8000db4 <HAL_UART_RxCpltCallback+0x60>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d123      	bne.n	8000dac <HAL_UART_RxCpltCallback+0x58>
  {
	  if (rxBuffer[rxIndex - 1] == '\r')
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_UART_RxCpltCallback+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <HAL_UART_RxCpltCallback+0x68>)
 8000d6c:	5cd3      	ldrb	r3, [r2, r3]
 8000d6e:	2b0d      	cmp	r3, #13
 8000d70:	d10e      	bne.n	8000d90 <HAL_UART_RxCpltCallback+0x3c>
	  {
		  //改行が受信された�????��?��??��?��合�????��?��??��?��受信された文字を処???��?��??��?��?
		  rxBuffer[rxIndex] = '\0';
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_UART_RxCpltCallback+0x64>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a11      	ldr	r2, [pc, #68]	; (8000dbc <HAL_UART_RxCpltCallback+0x68>)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	54d1      	strb	r1, [r2, r3]
		  //HAL_UART_Transmit(&huart2, rxBuffer, rxIndex, HAL_MAX_DELAY);
		  copy(); //バッファから???��?��??��?��?字�????��?��??��?��をコピ�????��?��??��?��
 8000d7c:	f7ff ffca 	bl	8000d14 <copy>
		  rxIndex = 0;
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <HAL_UART_RxCpltCallback+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
		  memset(rxBuffer, '\0', RX_BUFFER_SIZE); //バッファをクリア
 8000d86:	2240      	movs	r2, #64	; 0x40
 8000d88:	2100      	movs	r1, #0
 8000d8a:	480c      	ldr	r0, [pc, #48]	; (8000dbc <HAL_UART_RxCpltCallback+0x68>)
 8000d8c:	f007 fced 	bl	800876a <memset>
	  }
	  //割り込みで受信
	  HAL_UART_Receive_IT(&huart1, &rxBuffer[rxIndex], 1);
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <HAL_UART_RxCpltCallback+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <HAL_UART_RxCpltCallback+0x68>)
 8000d96:	4413      	add	r3, r2
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <HAL_UART_RxCpltCallback+0x60>)
 8000d9e:	f003 fe5b 	bl	8004a58 <HAL_UART_Receive_IT>
	  rxIndex++;
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_UART_RxCpltCallback+0x64>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	4a03      	ldr	r2, [pc, #12]	; (8000db8 <HAL_UART_RxCpltCallback+0x64>)
 8000daa:	6013      	str	r3, [r2, #0]
  }
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	2000023c 	.word	0x2000023c
 8000db8:	2000038c 	.word	0x2000038c
 8000dbc:	2000034c 	.word	0x2000034c

08000dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000dc4:	b0c4      	sub	sp, #272	; 0x110
 8000dc6:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */
	int i,j=0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	float r=0,arg=0;
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000dd6:	f04f 0300 	mov.w	r3, #0
 8000dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	char test[32];
	char w1[7],w2[7],w3[2],w4[2],w5[3];

	int reset;
	char check[RX_BUFFER_SIZE];
	memset(check,'\0',RX_BUFFER_SIZE);
 8000dde:	463b      	mov	r3, r7
 8000de0:	2240      	movs	r2, #64	; 0x40
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f007 fcc0 	bl	800876a <memset>

	float x=0.0,y=0.0;
 8000dea:	f04f 0300 	mov.w	r3, #0
 8000dee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000df2:	f04f 0300 	mov.w	r3, #0
 8000df6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	float spd=0.0,rad=0.0;
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	int T=0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e10:	f001 f814 	bl	8001e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e14:	f000 fc5a 	bl	80016cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e18:	f000 fd6e 	bl	80018f8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e1c:	f000 fca8 	bl	8001770 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000e20:	f000 fd0a 	bl	8001838 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e24:	f000 fd38 	bl	8001898 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1) != HAL_OK){Error_Handler();}
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4863      	ldr	r0, [pc, #396]	; (8000fb8 <main+0x1f8>)
 8000e2c:	f002 ff8a 	bl	8003d44 <HAL_TIM_PWM_Start>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <main+0x7a>
 8000e36:	f000 fdbd 	bl	80019b4 <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2) != HAL_OK){Error_Handler();}
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	485e      	ldr	r0, [pc, #376]	; (8000fb8 <main+0x1f8>)
 8000e3e:	f002 ff81 	bl	8003d44 <HAL_TIM_PWM_Start>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <main+0x8c>
 8000e48:	f000 fdb4 	bl	80019b4 <Error_Handler>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2140      	movs	r1, #64	; 0x40
 8000e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e54:	f001 fb6c 	bl	8002530 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2180      	movs	r1, #128	; 0x80
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e60:	f001 fb66 	bl	8002530 <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 8000e64:	4b54      	ldr	r3, [pc, #336]	; (8000fb8 <main+0x1f8>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
 8000e6c:	4b52      	ldr	r3, [pc, #328]	; (8000fb8 <main+0x1f8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2200      	movs	r2, #0
 8000e72:	639a      	str	r2, [r3, #56]	; 0x38

  HAL_UART_Receive_IT(&huart1, rxBuffer, 1);
 8000e74:	2201      	movs	r2, #1
 8000e76:	4951      	ldr	r1, [pc, #324]	; (8000fbc <main+0x1fc>)
 8000e78:	4851      	ldr	r0, [pc, #324]	; (8000fc0 <main+0x200>)
 8000e7a:	f003 fded 	bl	8004a58 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //???��?��??��?��?字�????��?��??��?��???��?��??��?��????��?��??��?��初期???��?��??��?��?
	  memset(moji,'\0',RX_BUFFER_SIZE);
 8000e7e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e82:	2240      	movs	r2, #64	; 0x40
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f007 fc6f 	bl	800876a <memset>
	  memset(test,'\0',32);
 8000e8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e90:	2220      	movs	r2, #32
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f007 fc68 	bl	800876a <memset>
	  memset(w1,'\0',7);
 8000e9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e9e:	2207      	movs	r2, #7
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f007 fc61 	bl	800876a <memset>
	  memset(w2,'\0',7);
 8000ea8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000eac:	2207      	movs	r2, #7
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f007 fc5a 	bl	800876a <memset>
	  memset(w3,'\0',2);
 8000eb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eba:	2202      	movs	r2, #2
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f007 fc53 	bl	800876a <memset>
	  memset(w4,'\0',2);
 8000ec4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ec8:	2202      	movs	r2, #2
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f007 fc4c 	bl	800876a <memset>
	  memset(w5,'\0',3);
 8000ed2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f007 fc45 	bl	800876a <memset>
	  //通信を開???��?��??��?��?
	  HAL_UART_Receive_IT(&huart1, rxBuffer, 1);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4936      	ldr	r1, [pc, #216]	; (8000fbc <main+0x1fc>)
 8000ee4:	4836      	ldr	r0, [pc, #216]	; (8000fc0 <main+0x200>)
 8000ee6:	f003 fdb7 	bl	8004a58 <HAL_UART_Receive_IT>
	  //受信した???��?��??��?��?字�????��?��??��?��を整???��?��??��?��?
	  for(i=0;i<RX_BUFFER_SIZE;i++)//
 8000eea:	2300      	movs	r3, #0
 8000eec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000ef0:	e029      	b.n	8000f46 <main+0x186>
	  {
		  moji[j]=string[i];
 8000ef2:	4a34      	ldr	r2, [pc, #208]	; (8000fc4 <main+0x204>)
 8000ef4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000ef8:	4413      	add	r3, r2
 8000efa:	7819      	ldrb	r1, [r3, #0]
 8000efc:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8000f00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000f04:	4413      	add	r3, r2
 8000f06:	460a      	mov	r2, r1
 8000f08:	701a      	strb	r2, [r3, #0]
		  if(moji[j] == '\r')
 8000f0a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8000f0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000f12:	4413      	add	r3, r2
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b0d      	cmp	r3, #13
 8000f18:	d103      	bne.n	8000f22 <main+0x162>
		  {
			  j=0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			  break;
 8000f20:	e015      	b.n	8000f4e <main+0x18e>
		  }
		  else if(moji[j] != '\0')
 8000f22:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8000f26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000f2a:	4413      	add	r3, r2
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d004      	beq.n	8000f3c <main+0x17c>
		  {
			  j++;
 8000f32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000f36:	3301      	adds	r3, #1
 8000f38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	  for(i=0;i<RX_BUFFER_SIZE;i++)//
 8000f3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f40:	3301      	adds	r3, #1
 8000f42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000f46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f4a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f4c:	ddd1      	ble.n	8000ef2 <main+0x132>
		  }
	  }
	  //整???��?��??��?��?した???��?��??��?��?字�????��?��??��?��から???��?��??��?��????��?��??��?��を抽出
	  for(i=0;i<6;i++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000f54:	e020      	b.n	8000f98 <main+0x1d8>
	  {
		  w1[i]=moji[2+i];
 8000f56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	33f0      	adds	r3, #240	; 0xf0
 8000f5e:	443b      	add	r3, r7
 8000f60:	f813 1c74 	ldrb.w	r1, [r3, #-116]
 8000f64:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000f68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f6c:	4413      	add	r3, r2
 8000f6e:	460a      	mov	r2, r1
 8000f70:	701a      	strb	r2, [r3, #0]
		  w2[i]=moji[13+i];
 8000f72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f76:	330d      	adds	r3, #13
 8000f78:	33f0      	adds	r3, #240	; 0xf0
 8000f7a:	443b      	add	r3, r7
 8000f7c:	f813 1c74 	ldrb.w	r1, [r3, #-116]
 8000f80:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000f84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f88:	4413      	add	r3, r2
 8000f8a:	460a      	mov	r2, r1
 8000f8c:	701a      	strb	r2, [r3, #0]
	  for(i=0;i<6;i++)
 8000f8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f92:	3301      	adds	r3, #1
 8000f94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000f98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f9c:	2b05      	cmp	r3, #5
 8000f9e:	ddda      	ble.n	8000f56 <main+0x196>
	  }
	  w3[0]=moji[25];
 8000fa0:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8000fa4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	  w4[0]=moji[33];
 8000fa8:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8000fac:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	  for(i=0;i<2;i++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000fb6:	e01a      	b.n	8000fee <main+0x22e>
 8000fb8:	200001f0 	.word	0x200001f0
 8000fbc:	2000034c 	.word	0x2000034c
 8000fc0:	2000023c 	.word	0x2000023c
 8000fc4:	20000390 	.word	0x20000390
	  {
		  w5[i]=moji[42+i];
 8000fc8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000fcc:	332a      	adds	r3, #42	; 0x2a
 8000fce:	33f0      	adds	r3, #240	; 0xf0
 8000fd0:	443b      	add	r3, r7
 8000fd2:	f813 1c74 	ldrb.w	r1, [r3, #-116]
 8000fd6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000fda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000fde:	4413      	add	r3, r2
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	701a      	strb	r2, [r3, #0]
	  for(i=0;i<2;i++)
 8000fe4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000fe8:	3301      	adds	r3, #1
 8000fea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000fee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	dde8      	ble.n	8000fc8 <main+0x208>
	  }
	  r = atoff(w1);
 8000ff6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f005 ff10 	bl	8006e20 <atoff>
 8001000:	ed87 0a39 	vstr	s0, [r7, #228]	; 0xe4
	  arg = atoff(w2);
 8001004:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001008:	4618      	mov	r0, r3
 800100a:	f005 ff09 	bl	8006e20 <atoff>
 800100e:	ed87 0a35 	vstr	s0, [r7, #212]	; 0xd4
	  dash = atoi(w3);
 8001012:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001016:	4618      	mov	r0, r3
 8001018:	f005 ff05 	bl	8006e26 <atoi>
 800101c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
	  above = atoi(w4);
 8001020:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001024:	4618      	mov	r0, r3
 8001026:	f005 fefe 	bl	8006e26 <atoi>
 800102a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
	  gather = atoi(w5);
 800102e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001032:	4618      	mov	r0, r3
 8001034:	f005 fef7 	bl	8006e26 <atoi>
 8001038:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
	  //HAL_UART_Transmit(&huart2, (uint8_t*)moji, RX_BUFFER_SIZE,HAL_MAX_DELAY);
	  //HAL_UART_Transmit(&huart2, (uint8_t*)w5, 3, HAL_MAX_DELAY);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	rad = arg*(M_PI/180.0);
 800103c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001040:	f7ff fa92 	bl	8000568 <__aeabi_f2d>
 8001044:	a3ea      	add	r3, pc, #936	; (adr r3, 80013f0 <main+0x630>)
 8001046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104a:	f7ff fae5 	bl	8000618 <__aeabi_dmul>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f7ff fdd7 	bl	8000c08 <__aeabi_d2f>
 800105a:	4603      	mov	r3, r0
 800105c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	x=r*cos(rad);
 8001060:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8001064:	f7ff fa80 	bl	8000568 <__aeabi_f2d>
 8001068:	4604      	mov	r4, r0
 800106a:	460d      	mov	r5, r1
 800106c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001070:	f7ff fa7a 	bl	8000568 <__aeabi_f2d>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	ec43 2b10 	vmov	d0, r2, r3
 800107c:	f004 fe3c 	bl	8005cf8 <cos>
 8001080:	ec53 2b10 	vmov	r2, r3, d0
 8001084:	4620      	mov	r0, r4
 8001086:	4629      	mov	r1, r5
 8001088:	f7ff fac6 	bl	8000618 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fdb8 	bl	8000c08 <__aeabi_d2f>
 8001098:	4603      	mov	r3, r0
 800109a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	y=r*sin(rad);
 800109e:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80010a2:	f7ff fa61 	bl	8000568 <__aeabi_f2d>
 80010a6:	4604      	mov	r4, r0
 80010a8:	460d      	mov	r5, r1
 80010aa:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80010ae:	f7ff fa5b 	bl	8000568 <__aeabi_f2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	ec43 2b10 	vmov	d0, r2, r3
 80010ba:	f004 fe71 	bl	8005da0 <sin>
 80010be:	ec53 2b10 	vmov	r2, r3, d0
 80010c2:	4620      	mov	r0, r4
 80010c4:	4629      	mov	r1, r5
 80010c6:	f7ff faa7 	bl	8000618 <__aeabi_dmul>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fd99 	bl	8000c08 <__aeabi_d2f>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if(isfinite(r)==0||r>1600)
 80010dc:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 80010e0:	eef0 7ae7 	vabs.f32	s15, s15
 80010e4:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 80013c8 <main+0x608>
 80010e8:	eef4 7a47 	vcmp.f32	s15, s14
 80010ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f0:	bf8c      	ite	hi
 80010f2:	2301      	movhi	r3, #1
 80010f4:	2300      	movls	r3, #0
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	f083 0301 	eor.w	r3, r3, #1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d008      	beq.n	8001114 <main+0x354>
 8001102:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8001106:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 80013cc <main+0x60c>
 800110a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800110e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001112:	dd02      	ble.n	800111a <main+0x35a>
	{
		r=1600;
 8001114:	4bae      	ldr	r3, [pc, #696]	; (80013d0 <main+0x610>)
 8001116:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	}
	//b=dash;

	snprintf(test,32,"%7.1f,%7.1f,%6.1f,%d,%d\n\r",r,spd,arg,dash,T);
 800111a:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800111e:	f7ff fa23 	bl	8000568 <__aeabi_f2d>
 8001122:	4604      	mov	r4, r0
 8001124:	460d      	mov	r5, r1
 8001126:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800112a:	f7ff fa1d 	bl	8000568 <__aeabi_f2d>
 800112e:	4680      	mov	r8, r0
 8001130:	4689      	mov	r9, r1
 8001132:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001136:	f7ff fa17 	bl	8000568 <__aeabi_f2d>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001142:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001146:	9107      	str	r1, [sp, #28]
 8001148:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800114c:	9106      	str	r1, [sp, #24]
 800114e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001152:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001156:	e9cd 4500 	strd	r4, r5, [sp]
 800115a:	4a9e      	ldr	r2, [pc, #632]	; (80013d4 <main+0x614>)
 800115c:	2120      	movs	r1, #32
 800115e:	f007 fa8d 	bl	800867c <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)test, 32,HAL_MAX_DELAY);
 8001162:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	2220      	movs	r2, #32
 800116c:	489a      	ldr	r0, [pc, #616]	; (80013d8 <main+0x618>)
 800116e:	f003 fbe9 	bl	8004944 <HAL_UART_Transmit>

	//ボタン押されて????��?��??��?��???��?��??��?��?な????��?��??��?��???��?��??��?��?ときに????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��?シュに1を代入して押されたときに2を代入
	dash++;
 8001172:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001176:	3301      	adds	r3, #1
 8001178:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	if(dash==2)
 800117c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001180:	2b02      	cmp	r3, #2
 8001182:	d114      	bne.n	80011ae <main+0x3ee>
	{
		spd=r/1.5;
 8001184:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8001188:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800118c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001190:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
		if(spd>=1000)
 8001194:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8001198:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80013dc <main+0x61c>
 800119c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a4:	db0b      	blt.n	80011be <main+0x3fe>
		{
			spd=999;
 80011a6:	4b8e      	ldr	r3, [pc, #568]	; (80013e0 <main+0x620>)
 80011a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80011ac:	e007      	b.n	80011be <main+0x3fe>
		}
	}
	else
	{
		spd=r/2;
 80011ae:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 80011b2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80011b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ba:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
	}

	if((113.0 >= arg) && (arg >= 68.0) && (r>100.0)){
 80011be:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80011c2:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80013e4 <main+0x624>
 80011c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ce:	d833      	bhi.n	8001238 <main+0x478>
 80011d0:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80011d4:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80013e8 <main+0x628>
 80011d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e0:	db2a      	blt.n	8001238 <main+0x478>
 80011e2:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 80011e6:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001400 <main+0x640>
 80011ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	dd21      	ble.n	8001238 <main+0x478>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2140      	movs	r1, #64	; 0x40
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fc:	f001 f998 	bl	8002530 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	2180      	movs	r1, #128	; 0x80
 8001204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001208:	f001 f992 	bl	8002530 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,spd);
 800120c:	4b77      	ldr	r3, [pc, #476]	; (80013ec <main+0x62c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8001214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001218:	ee17 2a90 	vmov	r2, s15
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,spd);
 800121e:	4b73      	ldr	r3, [pc, #460]	; (80013ec <main+0x62c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8001226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800122a:	ee17 2a90 	vmov	r2, s15
 800122e:	639a      	str	r2, [r3, #56]	; 0x38
		T=1;
 8001230:	2301      	movs	r3, #1
 8001232:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001236:	e200      	b.n	800163a <main+0x87a>
	}//pattern1/front
	else if((68.0 >= arg) && (arg >= 23.0) && (r>100.0)){
 8001238:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800123c:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80013e8 <main+0x628>
 8001240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001248:	d837      	bhi.n	80012ba <main+0x4fa>
 800124a:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800124e:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8001252:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125a:	db2e      	blt.n	80012ba <main+0x4fa>
 800125c:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8001260:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001400 <main+0x640>
 8001264:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126c:	dd25      	ble.n	80012ba <main+0x4fa>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2140      	movs	r1, #64	; 0x40
 8001272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001276:	f001 f95b 	bl	8002530 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);
 800127a:	2201      	movs	r2, #1
 800127c:	2180      	movs	r1, #128	; 0x80
 800127e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001282:	f001 f955 	bl	8002530 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,spd);
 8001286:	4b59      	ldr	r3, [pc, #356]	; (80013ec <main+0x62c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 800128e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001292:	ee17 2a90 	vmov	r2, s15
 8001296:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,spd/2);
 8001298:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800129c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a4:	4b51      	ldr	r3, [pc, #324]	; (80013ec <main+0x62c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ac:	ee17 2a90 	vmov	r2, s15
 80012b0:	639a      	str	r2, [r3, #56]	; 0x38
		T=2;
 80012b2:	2302      	movs	r3, #2
 80012b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80012b8:	e1bf      	b.n	800163a <main+0x87a>
	}//pattern2/front right
	else if((23.0 >= arg) && (arg >= -22.0) && (r>100.0)){
 80012ba:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80012be:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 80012c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ca:	d83b      	bhi.n	8001344 <main+0x584>
 80012cc:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80012d0:	eebb 7a06 	vmov.f32	s14, #182	; 0xc1b00000 -22.0
 80012d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012dc:	db32      	blt.n	8001344 <main+0x584>
 80012de:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 80012e2:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001400 <main+0x640>
 80012e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ee:	dd29      	ble.n	8001344 <main+0x584>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2140      	movs	r1, #64	; 0x40
 80012f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f8:	f001 f91a 	bl	8002530 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001304:	f001 f914 	bl	8002530 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,spd/3);
 8001308:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800130c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001310:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001314:	4b35      	ldr	r3, [pc, #212]	; (80013ec <main+0x62c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800131c:	ee17 2a90 	vmov	r2, s15
 8001320:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,spd/3);
 8001322:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8001326:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800132a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132e:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <main+0x62c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001336:	ee17 2a90 	vmov	r2, s15
 800133a:	639a      	str	r2, [r3, #56]	; 0x38
		T=3;
 800133c:	2303      	movs	r3, #3
 800133e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001342:	e17a      	b.n	800163a <main+0x87a>
	}//pattern3/right rotation
	else if((-22.0 >= arg) && (arg >= -67.0) && (r>100.0)){
 8001344:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001348:	eebb 7a06 	vmov.f32	s14, #182	; 0xc1b00000 -22.0
 800134c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001354:	d856      	bhi.n	8001404 <main+0x644>
 8001356:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800135a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80013f8 <main+0x638>
 800135e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001366:	db4d      	blt.n	8001404 <main+0x644>
 8001368:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800136c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001400 <main+0x640>
 8001370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001378:	dd44      	ble.n	8001404 <main+0x644>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 800137a:	2201      	movs	r2, #1
 800137c:	2140      	movs	r1, #64	; 0x40
 800137e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001382:	f001 f8d5 	bl	8002530 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138e:	f001 f8cf 	bl	8002530 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,spd);
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <main+0x62c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 800139a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800139e:	ee17 2a90 	vmov	r2, s15
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,spd/2);
 80013a4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80013a8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80013ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <main+0x62c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013b8:	ee17 2a90 	vmov	r2, s15
 80013bc:	639a      	str	r2, [r3, #56]	; 0x38
		T=4;
 80013be:	2304      	movs	r3, #4
 80013c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80013c4:	e139      	b.n	800163a <main+0x87a>
 80013c6:	bf00      	nop
 80013c8:	7f7fffff 	.word	0x7f7fffff
 80013cc:	44c80000 	.word	0x44c80000
 80013d0:	44c80000 	.word	0x44c80000
 80013d4:	0800b2e0 	.word	0x0800b2e0
 80013d8:	200002c4 	.word	0x200002c4
 80013dc:	447a0000 	.word	0x447a0000
 80013e0:	4479c000 	.word	0x4479c000
 80013e4:	42e20000 	.word	0x42e20000
 80013e8:	42880000 	.word	0x42880000
 80013ec:	200001f0 	.word	0x200001f0
 80013f0:	a2529d39 	.word	0xa2529d39
 80013f4:	3f91df46 	.word	0x3f91df46
 80013f8:	c2860000 	.word	0xc2860000
 80013fc:	c2e00000 	.word	0xc2e00000
 8001400:	42c80000 	.word	0x42c80000
	}//pattern4/back right
	else if((-67.0 >= arg) && (arg >= -112.0) && (r>100.0)){
 8001404:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001408:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 80013f8 <main+0x638>
 800140c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001414:	d833      	bhi.n	800147e <main+0x6be>
 8001416:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800141a:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 80013fc <main+0x63c>
 800141e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001426:	db2a      	blt.n	800147e <main+0x6be>
 8001428:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800142c:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 8001400 <main+0x640>
 8001430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001438:	dd21      	ble.n	800147e <main+0x6be>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	2140      	movs	r1, #64	; 0x40
 800143e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001442:	f001 f875 	bl	8002530 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	2180      	movs	r1, #128	; 0x80
 800144a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144e:	f001 f86f 	bl	8002530 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,spd);
 8001452:	4b97      	ldr	r3, [pc, #604]	; (80016b0 <main+0x8f0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 800145a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800145e:	ee17 2a90 	vmov	r2, s15
 8001462:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,spd);
 8001464:	4b92      	ldr	r3, [pc, #584]	; (80016b0 <main+0x8f0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 800146c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001470:	ee17 2a90 	vmov	r2, s15
 8001474:	639a      	str	r2, [r3, #56]	; 0x38
		T=5;
 8001476:	2305      	movs	r3, #5
 8001478:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800147c:	e0dd      	b.n	800163a <main+0x87a>
	}//pattern5/back
	else if((-112.0 >= arg) && (arg >= -157.0) && (r>100.0)){
 800147e:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001482:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80016b4 <main+0x8f4>
 8001486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	d837      	bhi.n	8001500 <main+0x740>
 8001490:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001494:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80016b8 <main+0x8f8>
 8001498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	db2e      	blt.n	8001500 <main+0x740>
 80014a2:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 80014a6:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80016bc <main+0x8fc>
 80014aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b2:	dd25      	ble.n	8001500 <main+0x740>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	2140      	movs	r1, #64	; 0x40
 80014b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014bc:	f001 f838 	bl	8002530 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c8:	f001 f832 	bl	8002530 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,spd/2);
 80014cc:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80014d0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d8:	4b75      	ldr	r3, [pc, #468]	; (80016b0 <main+0x8f0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014e0:	ee17 2a90 	vmov	r2, s15
 80014e4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,spd);
 80014e6:	4b72      	ldr	r3, [pc, #456]	; (80016b0 <main+0x8f0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80014ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014f2:	ee17 2a90 	vmov	r2, s15
 80014f6:	639a      	str	r2, [r3, #56]	; 0x38
		T=6;
 80014f8:	2306      	movs	r3, #6
 80014fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80014fe:	e09c      	b.n	800163a <main+0x87a>
	}//pattern6/back left
	else if(((158.0 <= arg) || (arg <= -157.0)) && (r>100.0)){
 8001500:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001504:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80016c0 <main+0x900>
 8001508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800150c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001510:	da08      	bge.n	8001524 <main+0x764>
 8001512:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001516:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80016b8 <main+0x8f8>
 800151a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800151e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001522:	d832      	bhi.n	800158a <main+0x7ca>
 8001524:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8001528:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80016bc <main+0x8fc>
 800152c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001534:	dd29      	ble.n	800158a <main+0x7ca>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	2140      	movs	r1, #64	; 0x40
 800153a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153e:	f000 fff7 	bl	8002530 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);
 8001542:	2201      	movs	r2, #1
 8001544:	2180      	movs	r1, #128	; 0x80
 8001546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154a:	f000 fff1 	bl	8002530 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,spd/3);
 800154e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8001552:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001556:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800155a:	4b55      	ldr	r3, [pc, #340]	; (80016b0 <main+0x8f0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001562:	ee17 2a90 	vmov	r2, s15
 8001566:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,spd/3);
 8001568:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800156c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001570:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001574:	4b4e      	ldr	r3, [pc, #312]	; (80016b0 <main+0x8f0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800157c:	ee17 2a90 	vmov	r2, s15
 8001580:	639a      	str	r2, [r3, #56]	; 0x38
		T=7;
 8001582:	2307      	movs	r3, #7
 8001584:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001588:	e057      	b.n	800163a <main+0x87a>
	}//pattern7/left rotation
	else if((158.0 >= arg) && (arg >= 113.0) && (r>100.0)){
 800158a:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800158e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80016c0 <main+0x900>
 8001592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159a:	d837      	bhi.n	800160c <main+0x84c>
 800159c:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80015a0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80016c4 <main+0x904>
 80015a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ac:	db2e      	blt.n	800160c <main+0x84c>
 80015ae:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 80015b2:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80016bc <main+0x8fc>
 80015b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	dd25      	ble.n	800160c <main+0x84c>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2140      	movs	r1, #64	; 0x40
 80015c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c8:	f000 ffb2 	bl	8002530 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);
 80015cc:	2201      	movs	r2, #1
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d4:	f000 ffac 	bl	8002530 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,spd/2);
 80015d8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80015dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80015e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015e4:	4b32      	ldr	r3, [pc, #200]	; (80016b0 <main+0x8f0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ec:	ee17 2a90 	vmov	r2, s15
 80015f0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,spd);
 80015f2:	4b2f      	ldr	r3, [pc, #188]	; (80016b0 <main+0x8f0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80015fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015fe:	ee17 2a90 	vmov	r2, s15
 8001602:	639a      	str	r2, [r3, #56]	; 0x38
		T=8;
 8001604:	2308      	movs	r3, #8
 8001606:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800160a:	e016      	b.n	800163a <main+0x87a>
	}//pattern8/front left
	else{
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 800160c:	2201      	movs	r2, #1
 800160e:	2140      	movs	r1, #64	; 0x40
 8001610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001614:	f000 ff8c 	bl	8002530 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	2180      	movs	r1, #128	; 0x80
 800161c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001620:	f000 ff86 	bl	8002530 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 8001624:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <main+0x8f0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2200      	movs	r2, #0
 800162a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <main+0x8f0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2200      	movs	r2, #0
 8001632:	639a      	str	r2, [r3, #56]	; 0x38
		T=0;
 8001634:	2300      	movs	r3, #0
 8001636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	}

	  //???��?��??��?��?字�????��?��??��?��リセ???��?��??��?��?ト�????��?��??��?��処???��?��??��?��?
	  if(strcmp(moji,check)==0)
 800163a:	463a      	mov	r2, r7
 800163c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe fdc4 	bl	80001d0 <strcmp>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d105      	bne.n	800165a <main+0x89a>
	  {
		  reset++;
 800164e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001652:	3301      	adds	r3, #1
 8001654:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001658:	e008      	b.n	800166c <main+0x8ac>
	  }
	  else
	  {
		  reset=0;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		  memset(check,'\0',RX_BUFFER_SIZE);
 8001660:	463b      	mov	r3, r7
 8001662:	2240      	movs	r2, #64	; 0x40
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f007 f87f 	bl	800876a <memset>
	  }
	  if(reset>=25)
 800166c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001670:	2b18      	cmp	r3, #24
 8001672:	dd0c      	ble.n	800168e <main+0x8ce>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800167a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167e:	f000 ff57 	bl	8002530 <HAL_GPIO_WritePin>
		  memset(string,'\0',RX_BUFFER_SIZE);
 8001682:	2240      	movs	r2, #64	; 0x40
 8001684:	2100      	movs	r1, #0
 8001686:	4810      	ldr	r0, [pc, #64]	; (80016c8 <main+0x908>)
 8001688:	f007 f86f 	bl	800876a <memset>
 800168c:	e006      	b.n	800169c <main+0x8dc>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800168e:	2201      	movs	r2, #1
 8001690:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001698:	f000 ff4a 	bl	8002530 <HAL_GPIO_WritePin>
	  }
	  strcpy(check,moji);
 800169c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80016a0:	463b      	mov	r3, r7
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f007 f8f2 	bl	800888e <strcpy>
	  memset(moji,'\0',RX_BUFFER_SIZE);
 80016aa:	f7ff bbe8 	b.w	8000e7e <main+0xbe>
 80016ae:	bf00      	nop
 80016b0:	200001f0 	.word	0x200001f0
 80016b4:	c2e00000 	.word	0xc2e00000
 80016b8:	c31d0000 	.word	0xc31d0000
 80016bc:	42c80000 	.word	0x42c80000
 80016c0:	431e0000 	.word	0x431e0000
 80016c4:	42e20000 	.word	0x42e20000
 80016c8:	20000390 	.word	0x20000390

080016cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b096      	sub	sp, #88	; 0x58
 80016d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016d6:	2228      	movs	r2, #40	; 0x28
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f007 f845 	bl	800876a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e0:	f107 031c 	add.w	r3, r7, #28
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	611a      	str	r2, [r3, #16]
 80016fe:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001700:	2302      	movs	r3, #2
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001704:	2301      	movs	r3, #1
 8001706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001708:	2310      	movs	r3, #16
 800170a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800170c:	2300      	movs	r3, #0
 800170e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001710:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001714:	4618      	mov	r0, r3
 8001716:	f000 ff23 	bl	8002560 <HAL_RCC_OscConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001720:	f000 f948 	bl	80019b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001724:	230f      	movs	r3, #15
 8001726:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001728:	2300      	movs	r3, #0
 800172a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f001 ff4c 	bl	80035dc <HAL_RCC_ClockConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800174a:	f000 f933 	bl	80019b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800174e:	2301      	movs	r3, #1
 8001750:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4618      	mov	r0, r3
 800175a:	f002 f975 	bl	8003a48 <HAL_RCCEx_PeriphCLKConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001764:	f000 f926 	bl	80019b4 <Error_Handler>
  }
}
 8001768:	bf00      	nop
 800176a:	3758      	adds	r7, #88	; 0x58
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001776:	f107 031c 	add.w	r3, r7, #28
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001782:	463b      	mov	r3, r7
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
 8001790:	615a      	str	r2, [r3, #20]
 8001792:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <MX_TIM2_Init+0xc4>)
 8001796:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800179a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 800179c:	4b25      	ldr	r3, [pc, #148]	; (8001834 <MX_TIM2_Init+0xc4>)
 800179e:	2207      	movs	r2, #7
 80017a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a2:	4b24      	ldr	r3, [pc, #144]	; (8001834 <MX_TIM2_Init+0xc4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80017a8:	4b22      	ldr	r3, [pc, #136]	; (8001834 <MX_TIM2_Init+0xc4>)
 80017aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <MX_TIM2_Init+0xc4>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b6:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <MX_TIM2_Init+0xc4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017bc:	481d      	ldr	r0, [pc, #116]	; (8001834 <MX_TIM2_Init+0xc4>)
 80017be:	f002 fa69 	bl	8003c94 <HAL_TIM_PWM_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80017c8:	f000 f8f4 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4619      	mov	r1, r3
 80017da:	4816      	ldr	r0, [pc, #88]	; (8001834 <MX_TIM2_Init+0xc4>)
 80017dc:	f002 fff6 	bl	80047cc <HAL_TIMEx_MasterConfigSynchronization>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80017e6:	f000 f8e5 	bl	80019b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ea:	2360      	movs	r3, #96	; 0x60
 80017ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017fa:	463b      	mov	r3, r7
 80017fc:	2200      	movs	r2, #0
 80017fe:	4619      	mov	r1, r3
 8001800:	480c      	ldr	r0, [pc, #48]	; (8001834 <MX_TIM2_Init+0xc4>)
 8001802:	f002 fb8b 	bl	8003f1c <HAL_TIM_PWM_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800180c:	f000 f8d2 	bl	80019b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001810:	463b      	mov	r3, r7
 8001812:	2204      	movs	r2, #4
 8001814:	4619      	mov	r1, r3
 8001816:	4807      	ldr	r0, [pc, #28]	; (8001834 <MX_TIM2_Init+0xc4>)
 8001818:	f002 fb80 	bl	8003f1c <HAL_TIM_PWM_ConfigChannel>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001822:	f000 f8c7 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001826:	4803      	ldr	r0, [pc, #12]	; (8001834 <MX_TIM2_Init+0xc4>)
 8001828:	f000 f90c 	bl	8001a44 <HAL_TIM_MspPostInit>

}
 800182c:	bf00      	nop
 800182e:	3728      	adds	r7, #40	; 0x28
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200001f0 	.word	0x200001f0

08001838 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <MX_USART1_UART_Init+0x58>)
 800183e:	4a15      	ldr	r2, [pc, #84]	; (8001894 <MX_USART1_UART_Init+0x5c>)
 8001840:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <MX_USART1_UART_Init+0x58>)
 8001844:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001848:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_USART1_UART_Init+0x58>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <MX_USART1_UART_Init+0x58>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_USART1_UART_Init+0x58>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_USART1_UART_Init+0x58>)
 800185e:	220c      	movs	r2, #12
 8001860:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <MX_USART1_UART_Init+0x58>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_USART1_UART_Init+0x58>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <MX_USART1_UART_Init+0x58>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_USART1_UART_Init+0x58>)
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_USART1_UART_Init+0x58>)
 800187c:	f003 f814 	bl	80048a8 <HAL_UART_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001886:	f000 f895 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000023c 	.word	0x2000023c
 8001894:	40013800 	.word	0x40013800

08001898 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <MX_USART2_UART_Init+0x58>)
 800189e:	4a15      	ldr	r2, [pc, #84]	; (80018f4 <MX_USART2_UART_Init+0x5c>)
 80018a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <MX_USART2_UART_Init+0x58>)
 80018a4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80018a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <MX_USART2_UART_Init+0x58>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MX_USART2_UART_Init+0x58>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <MX_USART2_UART_Init+0x58>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <MX_USART2_UART_Init+0x58>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <MX_USART2_UART_Init+0x58>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <MX_USART2_UART_Init+0x58>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <MX_USART2_UART_Init+0x58>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MX_USART2_UART_Init+0x58>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_USART2_UART_Init+0x58>)
 80018dc:	f002 ffe4 	bl	80048a8 <HAL_UART_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018e6:	f000 f865 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200002c4 	.word	0x200002c4
 80018f4:	40004400 	.word	0x40004400

080018f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800190e:	4b27      	ldr	r3, [pc, #156]	; (80019ac <MX_GPIO_Init+0xb4>)
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	4a26      	ldr	r2, [pc, #152]	; (80019ac <MX_GPIO_Init+0xb4>)
 8001914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001918:	6153      	str	r3, [r2, #20]
 800191a:	4b24      	ldr	r3, [pc, #144]	; (80019ac <MX_GPIO_Init+0xb4>)
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	4b21      	ldr	r3, [pc, #132]	; (80019ac <MX_GPIO_Init+0xb4>)
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	4a20      	ldr	r2, [pc, #128]	; (80019ac <MX_GPIO_Init+0xb4>)
 800192c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001930:	6153      	str	r3, [r2, #20]
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <MX_GPIO_Init+0xb4>)
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <MX_GPIO_Init+0xb4>)
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	4a1a      	ldr	r2, [pc, #104]	; (80019ac <MX_GPIO_Init+0xb4>)
 8001944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001948:	6153      	str	r3, [r2, #20]
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <MX_GPIO_Init+0xb4>)
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11, GPIO_PIN_RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	f44f 610c 	mov.w	r1, #2240	; 0x8c0
 800195c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001960:	f000 fde6 	bl	8002530 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001964:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001968:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196a:	2301      	movs	r3, #1
 800196c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	4619      	mov	r1, r3
 800197c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001980:	f000 fc64 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001984:	23c0      	movs	r3, #192	; 0xc0
 8001986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001988:	2312      	movs	r3, #18
 800198a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001994:	2304      	movs	r3, #4
 8001996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	4619      	mov	r1, r3
 800199e:	4804      	ldr	r0, [pc, #16]	; (80019b0 <MX_GPIO_Init+0xb8>)
 80019a0:	f000 fc54 	bl	800224c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019a4:	bf00      	nop
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000
 80019b0:	48000400 	.word	0x48000400

080019b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b8:	b672      	cpsid	i
}
 80019ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019bc:	e7fe      	b.n	80019bc <Error_Handler+0x8>
	...

080019c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_MspInit+0x44>)
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <HAL_MspInit+0x44>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6193      	str	r3, [r2, #24]
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_MspInit+0x44>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_MspInit+0x44>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <HAL_MspInit+0x44>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e8:	61d3      	str	r3, [r2, #28]
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_MspInit+0x44>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80019f6:	2006      	movs	r0, #6
 80019f8:	f000 fb6c 	bl	80020d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40021000 	.word	0x40021000

08001a08 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a18:	d10b      	bne.n	8001a32 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_TIM_PWM_MspInit+0x38>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <HAL_TIM_PWM_MspInit+0x38>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	61d3      	str	r3, [r2, #28]
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_TIM_PWM_MspInit+0x38>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000

08001a44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a64:	d11c      	bne.n	8001aa0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <HAL_TIM_MspPostInit+0x64>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	4a0f      	ldr	r2, [pc, #60]	; (8001aa8 <HAL_TIM_MspPostInit+0x64>)
 8001a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a70:	6153      	str	r3, [r2, #20]
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <HAL_TIM_MspPostInit+0x64>)
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	4619      	mov	r1, r3
 8001a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9c:	f000 fbd6 	bl	800224c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001aa0:	bf00      	nop
 8001aa2:	3720      	adds	r7, #32
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40021000 	.word	0x40021000

08001aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	; 0x30
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 031c 	add.w	r3, r7, #28
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a38      	ldr	r2, [pc, #224]	; (8001bac <HAL_UART_MspInit+0x100>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d132      	bne.n	8001b34 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ace:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <HAL_UART_MspInit+0x104>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	4a37      	ldr	r2, [pc, #220]	; (8001bb0 <HAL_UART_MspInit+0x104>)
 8001ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad8:	6193      	str	r3, [r2, #24]
 8001ada:	4b35      	ldr	r3, [pc, #212]	; (8001bb0 <HAL_UART_MspInit+0x104>)
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <HAL_UART_MspInit+0x104>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	4a31      	ldr	r2, [pc, #196]	; (8001bb0 <HAL_UART_MspInit+0x104>)
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af0:	6153      	str	r3, [r2, #20]
 8001af2:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <HAL_UART_MspInit+0x104>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001afe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b10:	2307      	movs	r3, #7
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1e:	f000 fb95 	bl	800224c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	2025      	movs	r0, #37	; 0x25
 8001b28:	f000 fadf 	bl	80020ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b2c:	2025      	movs	r0, #37	; 0x25
 8001b2e:	f000 faf8 	bl	8002122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b32:	e036      	b.n	8001ba2 <HAL_UART_MspInit+0xf6>
  else if(huart->Instance==USART2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a1e      	ldr	r2, [pc, #120]	; (8001bb4 <HAL_UART_MspInit+0x108>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d131      	bne.n	8001ba2 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <HAL_UART_MspInit+0x104>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	4a1b      	ldr	r2, [pc, #108]	; (8001bb0 <HAL_UART_MspInit+0x104>)
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	61d3      	str	r3, [r2, #28]
 8001b4a:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <HAL_UART_MspInit+0x104>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <HAL_UART_MspInit+0x104>)
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	4a15      	ldr	r2, [pc, #84]	; (8001bb0 <HAL_UART_MspInit+0x104>)
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b60:	6153      	str	r3, [r2, #20]
 8001b62:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <HAL_UART_MspInit+0x104>)
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001b6e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b80:	2307      	movs	r3, #7
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8e:	f000 fb5d 	bl	800224c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	2026      	movs	r0, #38	; 0x26
 8001b98:	f000 faa7 	bl	80020ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b9c:	2026      	movs	r0, #38	; 0x26
 8001b9e:	f000 fac0 	bl	8002122 <HAL_NVIC_EnableIRQ>
}
 8001ba2:	bf00      	nop
 8001ba4:	3730      	adds	r7, #48	; 0x30
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40013800 	.word	0x40013800
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40004400 	.word	0x40004400

08001bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <NMI_Handler+0x4>

08001bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8001bc2:	f000 fabc 	bl	800213e <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <HardFault_Handler+0x8>

08001bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <MemManage_Handler+0x4>

08001bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <BusFault_Handler+0x4>

08001bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <UsageFault_Handler+0x4>

08001bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c08:	f000 f95e 	bl	8001ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <USART1_IRQHandler+0x10>)
 8001c16:	f002 ff63 	bl	8004ae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000023c 	.word	0x2000023c

08001c24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <USART2_IRQHandler+0x10>)
 8001c2a:	f002 ff59 	bl	8004ae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200002c4 	.word	0x200002c4

08001c38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
	return 1;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_kill>:

int _kill(int pid, int sig)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c52:	f006 fdef 	bl	8008834 <__errno>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2216      	movs	r2, #22
 8001c5a:	601a      	str	r2, [r3, #0]
	return -1;
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_exit>:

void _exit (int status)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ffe7 	bl	8001c48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c7a:	e7fe      	b.n	8001c7a <_exit+0x12>

08001c7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	e00a      	b.n	8001ca4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c8e:	f3af 8000 	nop.w
 8001c92:	4601      	mov	r1, r0
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	60ba      	str	r2, [r7, #8]
 8001c9a:	b2ca      	uxtb	r2, r1
 8001c9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	dbf0      	blt.n	8001c8e <_read+0x12>
	}

return len;
 8001cac:	687b      	ldr	r3, [r7, #4]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	e009      	b.n	8001cdc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	60ba      	str	r2, [r7, #8]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	dbf1      	blt.n	8001cc8 <_write+0x12>
	}
	return len;
 8001ce4:	687b      	ldr	r3, [r7, #4]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <_close>:

int _close(int file)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
	return -1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d16:	605a      	str	r2, [r3, #4]
	return 0;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <_isatty>:

int _isatty(int file)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
	return 0;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d60:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <_sbrk+0x5c>)
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <_sbrk+0x60>)
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <_sbrk+0x64>)
 8001d76:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <_sbrk+0x68>)
 8001d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d207      	bcs.n	8001d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d88:	f006 fd54 	bl	8008834 <__errno>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	220c      	movs	r2, #12
 8001d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295
 8001d96:	e009      	b.n	8001dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	4a05      	ldr	r2, [pc, #20]	; (8001dbc <_sbrk+0x64>)
 8001da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20003000 	.word	0x20003000
 8001db8:	00000400 	.word	0x00000400
 8001dbc:	200003d0 	.word	0x200003d0
 8001dc0:	20000528 	.word	0x20000528

08001dc4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <SystemInit+0x20>)
 8001dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dce:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <SystemInit+0x20>)
 8001dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e20 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dec:	f7ff ffea 	bl	8001dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001df0:	480c      	ldr	r0, [pc, #48]	; (8001e24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001df2:	490d      	ldr	r1, [pc, #52]	; (8001e28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001df4:	4a0d      	ldr	r2, [pc, #52]	; (8001e2c <LoopForever+0xe>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df8:	e002      	b.n	8001e00 <LoopCopyDataInit>

08001dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfe:	3304      	adds	r3, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e04:	d3f9      	bcc.n	8001dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e08:	4c0a      	ldr	r4, [pc, #40]	; (8001e34 <LoopForever+0x16>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e0c:	e001      	b.n	8001e12 <LoopFillZerobss>

08001e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e10:	3204      	adds	r2, #4

08001e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e14:	d3fb      	bcc.n	8001e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e16:	f006 fd13 	bl	8008840 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e1a:	f7fe ffd1 	bl	8000dc0 <main>

08001e1e <LoopForever>:

LoopForever:
    b LoopForever
 8001e1e:	e7fe      	b.n	8001e1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e20:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e2c:	0800b944 	.word	0x0800b944
  ldr r2, =_sbss
 8001e30:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e34:	20000524 	.word	0x20000524

08001e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC1_2_IRQHandler>
	...

08001e3c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e40:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <HAL_Init+0x28>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a07      	ldr	r2, [pc, #28]	; (8001e64 <HAL_Init+0x28>)
 8001e46:	f043 0310 	orr.w	r3, r3, #16
 8001e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	f000 f941 	bl	80020d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e52:	2000      	movs	r0, #0
 8001e54:	f000 f808 	bl	8001e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e58:	f7ff fdb2 	bl	80019c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40022000 	.word	0x40022000

08001e68 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_InitTick+0x54>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_InitTick+0x58>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 f95d 	bl	8002146 <HAL_SYSTICK_Config>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00e      	b.n	8001eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b0f      	cmp	r3, #15
 8001e9a:	d80a      	bhi.n	8001eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	f000 f921 	bl	80020ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ea8:	4a06      	ldr	r2, [pc, #24]	; (8001ec4 <HAL_InitTick+0x5c>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e000      	b.n	8001eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	20000008 	.word	0x20000008
 8001ec4:	20000004 	.word	0x20000004

08001ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_IncTick+0x20>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_IncTick+0x24>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4a04      	ldr	r2, [pc, #16]	; (8001eec <HAL_IncTick+0x24>)
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000008 	.word	0x20000008
 8001eec:	200003d4 	.word	0x200003d4

08001ef0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <HAL_GetTick+0x14>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	200003d4 	.word	0x200003d4

08001f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f24:	4013      	ands	r3, r2
 8001f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3a:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	60d3      	str	r3, [r2, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f54:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <__NVIC_GetPriorityGrouping+0x18>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	f003 0307 	and.w	r3, r3, #7
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	db0b      	blt.n	8001f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	f003 021f 	and.w	r2, r3, #31
 8001f84:	4907      	ldr	r1, [pc, #28]	; (8001fa4 <__NVIC_EnableIRQ+0x38>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000e100 	.word	0xe000e100

08001fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db0a      	blt.n	8001fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	490c      	ldr	r1, [pc, #48]	; (8001ff4 <__NVIC_SetPriority+0x4c>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	0112      	lsls	r2, r2, #4
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd0:	e00a      	b.n	8001fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4908      	ldr	r1, [pc, #32]	; (8001ff8 <__NVIC_SetPriority+0x50>)
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	3b04      	subs	r3, #4
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	761a      	strb	r2, [r3, #24]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000e100 	.word	0xe000e100
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	; 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f1c3 0307 	rsb	r3, r3, #7
 8002016:	2b04      	cmp	r3, #4
 8002018:	bf28      	it	cs
 800201a:	2304      	movcs	r3, #4
 800201c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3304      	adds	r3, #4
 8002022:	2b06      	cmp	r3, #6
 8002024:	d902      	bls.n	800202c <NVIC_EncodePriority+0x30>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3b03      	subs	r3, #3
 800202a:	e000      	b.n	800202e <NVIC_EncodePriority+0x32>
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	f04f 32ff 	mov.w	r2, #4294967295
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002044:	f04f 31ff 	mov.w	r1, #4294967295
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	43d9      	mvns	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	4313      	orrs	r3, r2
         );
}
 8002056:	4618      	mov	r0, r3
 8002058:	3724      	adds	r7, #36	; 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002068:	f3bf 8f4f 	dsb	sy
}
 800206c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <__NVIC_SystemReset+0x24>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002076:	4904      	ldr	r1, [pc, #16]	; (8002088 <__NVIC_SystemReset+0x24>)
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <__NVIC_SystemReset+0x28>)
 800207a:	4313      	orrs	r3, r2
 800207c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800207e:	f3bf 8f4f 	dsb	sy
}
 8002082:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <__NVIC_SystemReset+0x20>
 8002088:	e000ed00 	.word	0xe000ed00
 800208c:	05fa0004 	.word	0x05fa0004

08002090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a0:	d301      	bcc.n	80020a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00f      	b.n	80020c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <SysTick_Config+0x40>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ae:	210f      	movs	r1, #15
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f7ff ff78 	bl	8001fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <SysTick_Config+0x40>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020be:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <SysTick_Config+0x40>)
 80020c0:	2207      	movs	r2, #7
 80020c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	e000e010 	.word	0xe000e010

080020d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ff13 	bl	8001f08 <__NVIC_SetPriorityGrouping>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020fc:	f7ff ff28 	bl	8001f50 <__NVIC_GetPriorityGrouping>
 8002100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	6978      	ldr	r0, [r7, #20]
 8002108:	f7ff ff78 	bl	8001ffc <NVIC_EncodePriority>
 800210c:	4602      	mov	r2, r0
 800210e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff47 	bl	8001fa8 <__NVIC_SetPriority>
}
 800211a:	bf00      	nop
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff1b 	bl	8001f6c <__NVIC_EnableIRQ>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002142:	f7ff ff8f 	bl	8002064 <__NVIC_SystemReset>

08002146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff ff9e 	bl	8002090 <SysTick_Config>
 8002154:	4603      	mov	r3, r0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800216c:	2b02      	cmp	r3, #2
 800216e:	d008      	beq.n	8002182 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2204      	movs	r2, #4
 8002174:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e020      	b.n	80021c4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 020e 	bic.w	r2, r2, #14
 8002190:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0201 	bic.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021aa:	2101      	movs	r1, #1
 80021ac:	fa01 f202 	lsl.w	r2, r1, r2
 80021b0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d005      	beq.n	80021f2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2204      	movs	r2, #4
 80021ea:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	e027      	b.n	8002242 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 020e 	bic.w	r2, r2, #14
 8002200:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0201 	bic.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221a:	2101      	movs	r1, #1
 800221c:	fa01 f202 	lsl.w	r2, r1, r2
 8002220:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	4798      	blx	r3
    } 
  }
  return status;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800225a:	e14e      	b.n	80024fa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	2101      	movs	r1, #1
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	4013      	ands	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 8140 	beq.w	80024f4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d005      	beq.n	800228c <HAL_GPIO_Init+0x40>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d130      	bne.n	80022ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022c2:	2201      	movs	r2, #1
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	091b      	lsrs	r3, r3, #4
 80022d8:	f003 0201 	and.w	r2, r3, #1
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d017      	beq.n	800232a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	2203      	movs	r2, #3
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d123      	bne.n	800237e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	08da      	lsrs	r2, r3, #3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3208      	adds	r2, #8
 800233e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002342:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	220f      	movs	r2, #15
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	08da      	lsrs	r2, r3, #3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3208      	adds	r2, #8
 8002378:	6939      	ldr	r1, [r7, #16]
 800237a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	2203      	movs	r2, #3
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 0203 	and.w	r2, r3, #3
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 809a 	beq.w	80024f4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c0:	4b55      	ldr	r3, [pc, #340]	; (8002518 <HAL_GPIO_Init+0x2cc>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	4a54      	ldr	r2, [pc, #336]	; (8002518 <HAL_GPIO_Init+0x2cc>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6193      	str	r3, [r2, #24]
 80023cc:	4b52      	ldr	r3, [pc, #328]	; (8002518 <HAL_GPIO_Init+0x2cc>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023d8:	4a50      	ldr	r2, [pc, #320]	; (800251c <HAL_GPIO_Init+0x2d0>)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	220f      	movs	r2, #15
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002402:	d013      	beq.n	800242c <HAL_GPIO_Init+0x1e0>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a46      	ldr	r2, [pc, #280]	; (8002520 <HAL_GPIO_Init+0x2d4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d00d      	beq.n	8002428 <HAL_GPIO_Init+0x1dc>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a45      	ldr	r2, [pc, #276]	; (8002524 <HAL_GPIO_Init+0x2d8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d007      	beq.n	8002424 <HAL_GPIO_Init+0x1d8>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a44      	ldr	r2, [pc, #272]	; (8002528 <HAL_GPIO_Init+0x2dc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d101      	bne.n	8002420 <HAL_GPIO_Init+0x1d4>
 800241c:	2303      	movs	r3, #3
 800241e:	e006      	b.n	800242e <HAL_GPIO_Init+0x1e2>
 8002420:	2305      	movs	r3, #5
 8002422:	e004      	b.n	800242e <HAL_GPIO_Init+0x1e2>
 8002424:	2302      	movs	r3, #2
 8002426:	e002      	b.n	800242e <HAL_GPIO_Init+0x1e2>
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <HAL_GPIO_Init+0x1e2>
 800242c:	2300      	movs	r3, #0
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	f002 0203 	and.w	r2, r2, #3
 8002434:	0092      	lsls	r2, r2, #2
 8002436:	4093      	lsls	r3, r2
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800243e:	4937      	ldr	r1, [pc, #220]	; (800251c <HAL_GPIO_Init+0x2d0>)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800244c:	4b37      	ldr	r3, [pc, #220]	; (800252c <HAL_GPIO_Init+0x2e0>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002470:	4a2e      	ldr	r2, [pc, #184]	; (800252c <HAL_GPIO_Init+0x2e0>)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002476:	4b2d      	ldr	r3, [pc, #180]	; (800252c <HAL_GPIO_Init+0x2e0>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	43db      	mvns	r3, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4313      	orrs	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800249a:	4a24      	ldr	r2, [pc, #144]	; (800252c <HAL_GPIO_Init+0x2e0>)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024a0:	4b22      	ldr	r3, [pc, #136]	; (800252c <HAL_GPIO_Init+0x2e0>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024c4:	4a19      	ldr	r2, [pc, #100]	; (800252c <HAL_GPIO_Init+0x2e0>)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ca:	4b18      	ldr	r3, [pc, #96]	; (800252c <HAL_GPIO_Init+0x2e0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4013      	ands	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024ee:	4a0f      	ldr	r2, [pc, #60]	; (800252c <HAL_GPIO_Init+0x2e0>)
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	3301      	adds	r3, #1
 80024f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	f47f aea9 	bne.w	800225c <HAL_GPIO_Init+0x10>
  }
}
 800250a:	bf00      	nop
 800250c:	bf00      	nop
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	40021000 	.word	0x40021000
 800251c:	40010000 	.word	0x40010000
 8002520:	48000400 	.word	0x48000400
 8002524:	48000800 	.word	0x48000800
 8002528:	48000c00 	.word	0x48000c00
 800252c:	40010400 	.word	0x40010400

08002530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
 800253c:	4613      	mov	r3, r2
 800253e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002540:	787b      	ldrb	r3, [r7, #1]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800254c:	e002      	b.n	8002554 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800254e:	887a      	ldrh	r2, [r7, #2]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002566:	af00      	add	r7, sp, #0
 8002568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002570:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002576:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d102      	bne.n	8002586 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	f001 b823 	b.w	80035cc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 817d 	beq.w	8002896 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800259c:	4bbc      	ldr	r3, [pc, #752]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 030c 	and.w	r3, r3, #12
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d00c      	beq.n	80025c2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025a8:	4bb9      	ldr	r3, [pc, #740]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 030c 	and.w	r3, r3, #12
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d15c      	bne.n	800266e <HAL_RCC_OscConfig+0x10e>
 80025b4:	4bb6      	ldr	r3, [pc, #728]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c0:	d155      	bne.n	800266e <HAL_RCC_OscConfig+0x10e>
 80025c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	095b      	lsrs	r3, r3, #5
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d102      	bne.n	80025f4 <HAL_RCC_OscConfig+0x94>
 80025ee:	4ba8      	ldr	r3, [pc, #672]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	e015      	b.n	8002620 <HAL_RCC_OscConfig+0xc0>
 80025f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025f8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002600:	fa93 f3a3 	rbit	r3, r3
 8002604:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002608:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800260c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002610:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800261c:	4b9c      	ldr	r3, [pc, #624]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002624:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002628:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800262c:	fa92 f2a2 	rbit	r2, r2
 8002630:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002634:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002638:	fab2 f282 	clz	r2, r2
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	f042 0220 	orr.w	r2, r2, #32
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	f002 021f 	and.w	r2, r2, #31
 8002648:	2101      	movs	r1, #1
 800264a:	fa01 f202 	lsl.w	r2, r1, r2
 800264e:	4013      	ands	r3, r2
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 811f 	beq.w	8002894 <HAL_RCC_OscConfig+0x334>
 8002656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f040 8116 	bne.w	8002894 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	f000 bfaf 	b.w	80035cc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002672:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x12e>
 8002680:	4b83      	ldr	r3, [pc, #524]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a82      	ldr	r2, [pc, #520]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 8002686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	e036      	b.n	80026fc <HAL_RCC_OscConfig+0x19c>
 800268e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002692:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x158>
 800269e:	4b7c      	ldr	r3, [pc, #496]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a7b      	ldr	r2, [pc, #492]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 80026a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	4b79      	ldr	r3, [pc, #484]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a78      	ldr	r2, [pc, #480]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 80026b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e021      	b.n	80026fc <HAL_RCC_OscConfig+0x19c>
 80026b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x184>
 80026ca:	4b71      	ldr	r3, [pc, #452]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a70      	ldr	r2, [pc, #448]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 80026d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b6e      	ldr	r3, [pc, #440]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a6d      	ldr	r2, [pc, #436]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e00b      	b.n	80026fc <HAL_RCC_OscConfig+0x19c>
 80026e4:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a69      	ldr	r2, [pc, #420]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 80026ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	4b67      	ldr	r3, [pc, #412]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a66      	ldr	r2, [pc, #408]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 80026f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026fa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026fc:	4b64      	ldr	r3, [pc, #400]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	f023 020f 	bic.w	r2, r3, #15
 8002704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002708:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	495f      	ldr	r1, [pc, #380]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 8002712:	4313      	orrs	r3, r2
 8002714:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d059      	beq.n	80027da <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002726:	f7ff fbe3 	bl	8001ef0 <HAL_GetTick>
 800272a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	e00a      	b.n	8002746 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002730:	f7ff fbde 	bl	8001ef0 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b64      	cmp	r3, #100	; 0x64
 800273e:	d902      	bls.n	8002746 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	f000 bf43 	b.w	80035cc <HAL_RCC_OscConfig+0x106c>
 8002746:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800274a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800275a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	095b      	lsrs	r3, r3, #5
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b01      	cmp	r3, #1
 8002770:	d102      	bne.n	8002778 <HAL_RCC_OscConfig+0x218>
 8002772:	4b47      	ldr	r3, [pc, #284]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	e015      	b.n	80027a4 <HAL_RCC_OscConfig+0x244>
 8002778:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800277c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800278c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002790:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002794:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002798:	fa93 f3a3 	rbit	r3, r3
 800279c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80027a0:	4b3b      	ldr	r3, [pc, #236]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027a8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80027ac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80027b0:	fa92 f2a2 	rbit	r2, r2
 80027b4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80027b8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80027bc:	fab2 f282 	clz	r2, r2
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	f042 0220 	orr.w	r2, r2, #32
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	f002 021f 	and.w	r2, r2, #31
 80027cc:	2101      	movs	r1, #1
 80027ce:	fa01 f202 	lsl.w	r2, r1, r2
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0ab      	beq.n	8002730 <HAL_RCC_OscConfig+0x1d0>
 80027d8:	e05d      	b.n	8002896 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027da:	f7ff fb89 	bl	8001ef0 <HAL_GetTick>
 80027de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e4:	f7ff fb84 	bl	8001ef0 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b64      	cmp	r3, #100	; 0x64
 80027f2:	d902      	bls.n	80027fa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	f000 bee9 	b.w	80035cc <HAL_RCC_OscConfig+0x106c>
 80027fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027fe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800280e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b01      	cmp	r3, #1
 8002824:	d102      	bne.n	800282c <HAL_RCC_OscConfig+0x2cc>
 8002826:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	e015      	b.n	8002858 <HAL_RCC_OscConfig+0x2f8>
 800282c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002830:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002840:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002844:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002848:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002854:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <HAL_RCC_OscConfig+0x330>)
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800285c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002860:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002864:	fa92 f2a2 	rbit	r2, r2
 8002868:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800286c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002870:	fab2 f282 	clz	r2, r2
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f042 0220 	orr.w	r2, r2, #32
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	f002 021f 	and.w	r2, r2, #31
 8002880:	2101      	movs	r1, #1
 8002882:	fa01 f202 	lsl.w	r2, r1, r2
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1ab      	bne.n	80027e4 <HAL_RCC_OscConfig+0x284>
 800288c:	e003      	b.n	8002896 <HAL_RCC_OscConfig+0x336>
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 817d 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028ac:	4ba6      	ldr	r3, [pc, #664]	; (8002b48 <HAL_RCC_OscConfig+0x5e8>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00b      	beq.n	80028d0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028b8:	4ba3      	ldr	r3, [pc, #652]	; (8002b48 <HAL_RCC_OscConfig+0x5e8>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d172      	bne.n	80029aa <HAL_RCC_OscConfig+0x44a>
 80028c4:	4ba0      	ldr	r3, [pc, #640]	; (8002b48 <HAL_RCC_OscConfig+0x5e8>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d16c      	bne.n	80029aa <HAL_RCC_OscConfig+0x44a>
 80028d0:	2302      	movs	r3, #2
 80028d2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80028e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	095b      	lsrs	r3, r3, #5
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d102      	bne.n	8002900 <HAL_RCC_OscConfig+0x3a0>
 80028fa:	4b93      	ldr	r3, [pc, #588]	; (8002b48 <HAL_RCC_OscConfig+0x5e8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	e013      	b.n	8002928 <HAL_RCC_OscConfig+0x3c8>
 8002900:	2302      	movs	r3, #2
 8002902:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002906:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800290a:	fa93 f3a3 	rbit	r3, r3
 800290e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002912:	2302      	movs	r3, #2
 8002914:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002918:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800291c:	fa93 f3a3 	rbit	r3, r3
 8002920:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002924:	4b88      	ldr	r3, [pc, #544]	; (8002b48 <HAL_RCC_OscConfig+0x5e8>)
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	2202      	movs	r2, #2
 800292a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800292e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002932:	fa92 f2a2 	rbit	r2, r2
 8002936:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800293a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800293e:	fab2 f282 	clz	r2, r2
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	f042 0220 	orr.w	r2, r2, #32
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	f002 021f 	and.w	r2, r2, #31
 800294e:	2101      	movs	r1, #1
 8002950:	fa01 f202 	lsl.w	r2, r1, r2
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_RCC_OscConfig+0x410>
 800295a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d002      	beq.n	8002970 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	f000 be2e 	b.w	80035cc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002970:	4b75      	ldr	r3, [pc, #468]	; (8002b48 <HAL_RCC_OscConfig+0x5e8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	21f8      	movs	r1, #248	; 0xf8
 8002986:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800298e:	fa91 f1a1 	rbit	r1, r1
 8002992:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002996:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800299a:	fab1 f181 	clz	r1, r1
 800299e:	b2c9      	uxtb	r1, r1
 80029a0:	408b      	lsls	r3, r1
 80029a2:	4969      	ldr	r1, [pc, #420]	; (8002b48 <HAL_RCC_OscConfig+0x5e8>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a8:	e0fd      	b.n	8002ba6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 8088 	beq.w	8002acc <HAL_RCC_OscConfig+0x56c>
 80029bc:	2301      	movs	r3, #1
 80029be:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80029c6:	fa93 f3a3 	rbit	r3, r3
 80029ca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80029ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	461a      	mov	r2, r3
 80029e4:	2301      	movs	r3, #1
 80029e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7ff fa82 	bl	8001ef0 <HAL_GetTick>
 80029ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f2:	f7ff fa7d 	bl	8001ef0 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d902      	bls.n	8002a08 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	f000 bde2 	b.w	80035cc <HAL_RCC_OscConfig+0x106c>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002a1a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d102      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4d8>
 8002a32:	4b45      	ldr	r3, [pc, #276]	; (8002b48 <HAL_RCC_OscConfig+0x5e8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	e013      	b.n	8002a60 <HAL_RCC_OscConfig+0x500>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a50:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002a5c:	4b3a      	ldr	r3, [pc, #232]	; (8002b48 <HAL_RCC_OscConfig+0x5e8>)
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	2202      	movs	r2, #2
 8002a62:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002a66:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a6a:	fa92 f2a2 	rbit	r2, r2
 8002a6e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002a72:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a76:	fab2 f282 	clz	r2, r2
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	f042 0220 	orr.w	r2, r2, #32
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	f002 021f 	and.w	r2, r2, #31
 8002a86:	2101      	movs	r1, #1
 8002a88:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0af      	beq.n	80029f2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a92:	4b2d      	ldr	r3, [pc, #180]	; (8002b48 <HAL_RCC_OscConfig+0x5e8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	21f8      	movs	r1, #248	; 0xf8
 8002aa8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ab0:	fa91 f1a1 	rbit	r1, r1
 8002ab4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ab8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002abc:	fab1 f181 	clz	r1, r1
 8002ac0:	b2c9      	uxtb	r1, r1
 8002ac2:	408b      	lsls	r3, r1
 8002ac4:	4920      	ldr	r1, [pc, #128]	; (8002b48 <HAL_RCC_OscConfig+0x5e8>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]
 8002aca:	e06c      	b.n	8002ba6 <HAL_RCC_OscConfig+0x646>
 8002acc:	2301      	movs	r3, #1
 8002ace:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002ade:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002aec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	461a      	mov	r2, r3
 8002af4:	2300      	movs	r3, #0
 8002af6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7ff f9fa 	bl	8001ef0 <HAL_GetTick>
 8002afc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b00:	e00a      	b.n	8002b18 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b02:	f7ff f9f5 	bl	8001ef0 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d902      	bls.n	8002b18 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	f000 bd5a 	b.w	80035cc <HAL_RCC_OscConfig+0x106c>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	095b      	lsrs	r3, r3, #5
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d104      	bne.n	8002b4c <HAL_RCC_OscConfig+0x5ec>
 8002b42:	4b01      	ldr	r3, [pc, #4]	; (8002b48 <HAL_RCC_OscConfig+0x5e8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	e015      	b.n	8002b74 <HAL_RCC_OscConfig+0x614>
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b5e:	2302      	movs	r3, #2
 8002b60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b68:	fa93 f3a3 	rbit	r3, r3
 8002b6c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b70:	4bc8      	ldr	r3, [pc, #800]	; (8002e94 <HAL_RCC_OscConfig+0x934>)
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	2202      	movs	r2, #2
 8002b76:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002b7a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b7e:	fa92 f2a2 	rbit	r2, r2
 8002b82:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002b86:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b8a:	fab2 f282 	clz	r2, r2
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	f042 0220 	orr.w	r2, r2, #32
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	f002 021f 	and.w	r2, r2, #31
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1ad      	bne.n	8002b02 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002baa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 8110 	beq.w	8002ddc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d079      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x760>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	4bab      	ldr	r3, [pc, #684]	; (8002e98 <HAL_RCC_OscConfig+0x938>)
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf6:	f7ff f97b 	bl	8001ef0 <HAL_GetTick>
 8002bfa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c00:	f7ff f976 	bl	8001ef0 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d902      	bls.n	8002c16 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	f000 bcdb 	b.w	80035cc <HAL_RCC_OscConfig+0x106c>
 8002c16:	2302      	movs	r3, #2
 8002c18:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c20:	fa93 f3a3 	rbit	r3, r3
 8002c24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c30:	2202      	movs	r2, #2
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c38:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	fa93 f2a3 	rbit	r2, r3
 8002c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c54:	2202      	movs	r2, #2
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	fa93 f2a3 	rbit	r2, r3
 8002c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c6e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c70:	4b88      	ldr	r3, [pc, #544]	; (8002e94 <HAL_RCC_OscConfig+0x934>)
 8002c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	6019      	str	r1, [r3, #0]
 8002c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	fa93 f1a3 	rbit	r1, r3
 8002c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c92:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c96:	6019      	str	r1, [r3, #0]
  return result;
 8002c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0a0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x6a0>
 8002cbe:	e08d      	b.n	8002ddc <HAL_RCC_OscConfig+0x87c>
 8002cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	fa93 f2a3 	rbit	r2, r3
 8002cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cde:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ce2:	601a      	str	r2, [r3, #0]
  return result;
 8002ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002cec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4b68      	ldr	r3, [pc, #416]	; (8002e98 <HAL_RCC_OscConfig+0x938>)
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2300      	movs	r3, #0
 8002d00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d02:	f7ff f8f5 	bl	8001ef0 <HAL_GetTick>
 8002d06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d0c:	f7ff f8f0 	bl	8001ef0 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d902      	bls.n	8002d22 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	f000 bc55 	b.w	80035cc <HAL_RCC_OscConfig+0x106c>
 8002d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d26:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d32:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	fa93 f2a3 	rbit	r2, r3
 8002d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d40:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d4e:	2202      	movs	r2, #2
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d56:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	fa93 f2a3 	rbit	r2, r3
 8002d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d72:	2202      	movs	r2, #2
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	fa93 f2a3 	rbit	r2, r3
 8002d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d88:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d8c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8e:	4b41      	ldr	r3, [pc, #260]	; (8002e94 <HAL_RCC_OscConfig+0x934>)
 8002d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d96:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002d9a:	2102      	movs	r1, #2
 8002d9c:	6019      	str	r1, [r3, #0]
 8002d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	fa93 f1a3 	rbit	r1, r3
 8002dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002db4:	6019      	str	r1, [r3, #0]
  return result;
 8002db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	fab3 f383 	clz	r3, r3
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d197      	bne.n	8002d0c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 81a1 	beq.w	8003134 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df8:	4b26      	ldr	r3, [pc, #152]	; (8002e94 <HAL_RCC_OscConfig+0x934>)
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d116      	bne.n	8002e32 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e04:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <HAL_RCC_OscConfig+0x934>)
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	4a22      	ldr	r2, [pc, #136]	; (8002e94 <HAL_RCC_OscConfig+0x934>)
 8002e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	61d3      	str	r3, [r2, #28]
 8002e10:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <HAL_RCC_OscConfig+0x934>)
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e26:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e2a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e32:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <HAL_RCC_OscConfig+0x93c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d11a      	bne.n	8002e74 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e3e:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <HAL_RCC_OscConfig+0x93c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a16      	ldr	r2, [pc, #88]	; (8002e9c <HAL_RCC_OscConfig+0x93c>)
 8002e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4a:	f7ff f851 	bl	8001ef0 <HAL_GetTick>
 8002e4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e52:	e009      	b.n	8002e68 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e54:	f7ff f84c 	bl	8001ef0 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b64      	cmp	r3, #100	; 0x64
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e3b1      	b.n	80035cc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <HAL_RCC_OscConfig+0x93c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0ef      	beq.n	8002e54 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d10d      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x940>
 8002e84:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <HAL_RCC_OscConfig+0x934>)
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	4a02      	ldr	r2, [pc, #8]	; (8002e94 <HAL_RCC_OscConfig+0x934>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	6213      	str	r3, [r2, #32]
 8002e90:	e03c      	b.n	8002f0c <HAL_RCC_OscConfig+0x9ac>
 8002e92:	bf00      	nop
 8002e94:	40021000 	.word	0x40021000
 8002e98:	10908120 	.word	0x10908120
 8002e9c:	40007000 	.word	0x40007000
 8002ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10c      	bne.n	8002eca <HAL_RCC_OscConfig+0x96a>
 8002eb0:	4bc1      	ldr	r3, [pc, #772]	; (80031b8 <HAL_RCC_OscConfig+0xc58>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4ac0      	ldr	r2, [pc, #768]	; (80031b8 <HAL_RCC_OscConfig+0xc58>)
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	6213      	str	r3, [r2, #32]
 8002ebc:	4bbe      	ldr	r3, [pc, #760]	; (80031b8 <HAL_RCC_OscConfig+0xc58>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	4abd      	ldr	r2, [pc, #756]	; (80031b8 <HAL_RCC_OscConfig+0xc58>)
 8002ec2:	f023 0304 	bic.w	r3, r3, #4
 8002ec6:	6213      	str	r3, [r2, #32]
 8002ec8:	e020      	b.n	8002f0c <HAL_RCC_OscConfig+0x9ac>
 8002eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ece:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2b05      	cmp	r3, #5
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x994>
 8002eda:	4bb7      	ldr	r3, [pc, #732]	; (80031b8 <HAL_RCC_OscConfig+0xc58>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	4ab6      	ldr	r2, [pc, #728]	; (80031b8 <HAL_RCC_OscConfig+0xc58>)
 8002ee0:	f043 0304 	orr.w	r3, r3, #4
 8002ee4:	6213      	str	r3, [r2, #32]
 8002ee6:	4bb4      	ldr	r3, [pc, #720]	; (80031b8 <HAL_RCC_OscConfig+0xc58>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	4ab3      	ldr	r2, [pc, #716]	; (80031b8 <HAL_RCC_OscConfig+0xc58>)
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	6213      	str	r3, [r2, #32]
 8002ef2:	e00b      	b.n	8002f0c <HAL_RCC_OscConfig+0x9ac>
 8002ef4:	4bb0      	ldr	r3, [pc, #704]	; (80031b8 <HAL_RCC_OscConfig+0xc58>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	4aaf      	ldr	r2, [pc, #700]	; (80031b8 <HAL_RCC_OscConfig+0xc58>)
 8002efa:	f023 0301 	bic.w	r3, r3, #1
 8002efe:	6213      	str	r3, [r2, #32]
 8002f00:	4bad      	ldr	r3, [pc, #692]	; (80031b8 <HAL_RCC_OscConfig+0xc58>)
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4aac      	ldr	r2, [pc, #688]	; (80031b8 <HAL_RCC_OscConfig+0xc58>)
 8002f06:	f023 0304 	bic.w	r3, r3, #4
 8002f0a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 8081 	beq.w	8003020 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1e:	f7fe ffe7 	bl	8001ef0 <HAL_GetTick>
 8002f22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f26:	e00b      	b.n	8002f40 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f28:	f7fe ffe2 	bl	8001ef0 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e345      	b.n	80035cc <HAL_RCC_OscConfig+0x106c>
 8002f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f44:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f48:	2202      	movs	r2, #2
 8002f4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f50:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	fa93 f2a3 	rbit	r2, r3
 8002f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f68:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f74:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	fa93 f2a3 	rbit	r2, r3
 8002f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f82:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f86:	601a      	str	r2, [r3, #0]
  return result;
 8002f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f90:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f92:	fab3 f383 	clz	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f043 0302 	orr.w	r3, r3, #2
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d102      	bne.n	8002fac <HAL_RCC_OscConfig+0xa4c>
 8002fa6:	4b84      	ldr	r3, [pc, #528]	; (80031b8 <HAL_RCC_OscConfig+0xc58>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	e013      	b.n	8002fd4 <HAL_RCC_OscConfig+0xa74>
 8002fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	fa93 f2a3 	rbit	r2, r3
 8002fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	4b79      	ldr	r3, [pc, #484]	; (80031b8 <HAL_RCC_OscConfig+0xc58>)
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fd8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002fdc:	2102      	movs	r1, #2
 8002fde:	6011      	str	r1, [r2, #0]
 8002fe0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fe4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	fa92 f1a2 	rbit	r1, r2
 8002fee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ff2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002ff6:	6011      	str	r1, [r2, #0]
  return result;
 8002ff8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ffc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	fab2 f282 	clz	r2, r2
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	f002 021f 	and.w	r2, r2, #31
 8003012:	2101      	movs	r1, #1
 8003014:	fa01 f202 	lsl.w	r2, r1, r2
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d084      	beq.n	8002f28 <HAL_RCC_OscConfig+0x9c8>
 800301e:	e07f      	b.n	8003120 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003020:	f7fe ff66 	bl	8001ef0 <HAL_GetTick>
 8003024:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003028:	e00b      	b.n	8003042 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fe ff61 	bl	8001ef0 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f241 3288 	movw	r2, #5000	; 0x1388
 800303a:	4293      	cmp	r3, r2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e2c4      	b.n	80035cc <HAL_RCC_OscConfig+0x106c>
 8003042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003046:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800304a:	2202      	movs	r2, #2
 800304c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	fa93 f2a3 	rbit	r2, r3
 800305c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003060:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800306e:	2202      	movs	r2, #2
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003076:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	fa93 f2a3 	rbit	r2, r3
 8003080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003084:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003088:	601a      	str	r2, [r3, #0]
  return result;
 800308a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003092:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003094:	fab3 f383 	clz	r3, r3
 8003098:	b2db      	uxtb	r3, r3
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	b2db      	uxtb	r3, r3
 800309e:	f043 0302 	orr.w	r3, r3, #2
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d102      	bne.n	80030ae <HAL_RCC_OscConfig+0xb4e>
 80030a8:	4b43      	ldr	r3, [pc, #268]	; (80031b8 <HAL_RCC_OscConfig+0xc58>)
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	e013      	b.n	80030d6 <HAL_RCC_OscConfig+0xb76>
 80030ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030b6:	2202      	movs	r2, #2
 80030b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	fa93 f2a3 	rbit	r2, r3
 80030c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030cc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	4b39      	ldr	r3, [pc, #228]	; (80031b8 <HAL_RCC_OscConfig+0xc58>)
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030da:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80030de:	2102      	movs	r1, #2
 80030e0:	6011      	str	r1, [r2, #0]
 80030e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030e6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	fa92 f1a2 	rbit	r1, r2
 80030f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030f4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80030f8:	6011      	str	r1, [r2, #0]
  return result;
 80030fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030fe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	fab2 f282 	clz	r2, r2
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	f002 021f 	and.w	r2, r2, #31
 8003114:	2101      	movs	r1, #1
 8003116:	fa01 f202 	lsl.w	r2, r1, r2
 800311a:	4013      	ands	r3, r2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d184      	bne.n	800302a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003120:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003124:	2b01      	cmp	r3, #1
 8003126:	d105      	bne.n	8003134 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003128:	4b23      	ldr	r3, [pc, #140]	; (80031b8 <HAL_RCC_OscConfig+0xc58>)
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	4a22      	ldr	r2, [pc, #136]	; (80031b8 <HAL_RCC_OscConfig+0xc58>)
 800312e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003132:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003138:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8242 	beq.w	80035ca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003146:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <HAL_RCC_OscConfig+0xc58>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b08      	cmp	r3, #8
 8003150:	f000 8213 	beq.w	800357a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003158:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	2b02      	cmp	r3, #2
 8003162:	f040 8162 	bne.w	800342a <HAL_RCC_OscConfig+0xeca>
 8003166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800316e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003172:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003178:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	fa93 f2a3 	rbit	r2, r3
 8003182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003186:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800318a:	601a      	str	r2, [r3, #0]
  return result;
 800318c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003190:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003194:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003196:	fab3 f383 	clz	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	461a      	mov	r2, r3
 80031a8:	2300      	movs	r3, #0
 80031aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fe fea0 	bl	8001ef0 <HAL_GetTick>
 80031b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031b4:	e00c      	b.n	80031d0 <HAL_RCC_OscConfig+0xc70>
 80031b6:	bf00      	nop
 80031b8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031bc:	f7fe fe98 	bl	8001ef0 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e1fd      	b.n	80035cc <HAL_RCC_OscConfig+0x106c>
 80031d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	fa93 f2a3 	rbit	r2, r3
 80031ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80031f4:	601a      	str	r2, [r3, #0]
  return result;
 80031f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80031fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	b2db      	uxtb	r3, r3
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b01      	cmp	r3, #1
 8003212:	d102      	bne.n	800321a <HAL_RCC_OscConfig+0xcba>
 8003214:	4bb0      	ldr	r3, [pc, #704]	; (80034d8 <HAL_RCC_OscConfig+0xf78>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	e027      	b.n	800326a <HAL_RCC_OscConfig+0xd0a>
 800321a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003222:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003226:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	fa93 f2a3 	rbit	r2, r3
 8003236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003244:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003248:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003252:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	fa93 f2a3 	rbit	r2, r3
 800325c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003260:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	4b9c      	ldr	r3, [pc, #624]	; (80034d8 <HAL_RCC_OscConfig+0xf78>)
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800326e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003272:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003276:	6011      	str	r1, [r2, #0]
 8003278:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800327c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	fa92 f1a2 	rbit	r1, r2
 8003286:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800328a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800328e:	6011      	str	r1, [r2, #0]
  return result;
 8003290:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003294:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	fab2 f282 	clz	r2, r2
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	f042 0220 	orr.w	r2, r2, #32
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	f002 021f 	and.w	r2, r2, #31
 80032aa:	2101      	movs	r1, #1
 80032ac:	fa01 f202 	lsl.w	r2, r1, r2
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d182      	bne.n	80031bc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032b6:	4b88      	ldr	r3, [pc, #544]	; (80034d8 <HAL_RCC_OscConfig+0xf78>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	430b      	orrs	r3, r1
 80032d8:	497f      	ldr	r1, [pc, #508]	; (80034d8 <HAL_RCC_OscConfig+0xf78>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	604b      	str	r3, [r1, #4]
 80032de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80032e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	fa93 f2a3 	rbit	r2, r3
 80032fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003302:	601a      	str	r2, [r3, #0]
  return result;
 8003304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003308:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800330c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800330e:	fab3 f383 	clz	r3, r3
 8003312:	b2db      	uxtb	r3, r3
 8003314:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003318:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	461a      	mov	r2, r3
 8003320:	2301      	movs	r3, #1
 8003322:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003324:	f7fe fde4 	bl	8001ef0 <HAL_GetTick>
 8003328:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800332c:	e009      	b.n	8003342 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800332e:	f7fe fddf 	bl	8001ef0 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e144      	b.n	80035cc <HAL_RCC_OscConfig+0x106c>
 8003342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003346:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800334a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800334e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003354:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	fa93 f2a3 	rbit	r2, r3
 800335e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003362:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003366:	601a      	str	r2, [r3, #0]
  return result;
 8003368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003370:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b01      	cmp	r3, #1
 8003384:	d102      	bne.n	800338c <HAL_RCC_OscConfig+0xe2c>
 8003386:	4b54      	ldr	r3, [pc, #336]	; (80034d8 <HAL_RCC_OscConfig+0xf78>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	e027      	b.n	80033dc <HAL_RCC_OscConfig+0xe7c>
 800338c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003390:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003394:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	fa93 f2a3 	rbit	r2, r3
 80033a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80033ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	fa93 f2a3 	rbit	r2, r3
 80033ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	4b3f      	ldr	r3, [pc, #252]	; (80034d8 <HAL_RCC_OscConfig+0xf78>)
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033e0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80033e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033e8:	6011      	str	r1, [r2, #0]
 80033ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033ee:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	fa92 f1a2 	rbit	r1, r2
 80033f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033fc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003400:	6011      	str	r1, [r2, #0]
  return result;
 8003402:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003406:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800340a:	6812      	ldr	r2, [r2, #0]
 800340c:	fab2 f282 	clz	r2, r2
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	f042 0220 	orr.w	r2, r2, #32
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	f002 021f 	and.w	r2, r2, #31
 800341c:	2101      	movs	r1, #1
 800341e:	fa01 f202 	lsl.w	r2, r1, r2
 8003422:	4013      	ands	r3, r2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d082      	beq.n	800332e <HAL_RCC_OscConfig+0xdce>
 8003428:	e0cf      	b.n	80035ca <HAL_RCC_OscConfig+0x106a>
 800342a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003432:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003436:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	fa93 f2a3 	rbit	r2, r3
 8003446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800344e:	601a      	str	r2, [r3, #0]
  return result;
 8003450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003454:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003458:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003464:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	461a      	mov	r2, r3
 800346c:	2300      	movs	r3, #0
 800346e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7fe fd3e 	bl	8001ef0 <HAL_GetTick>
 8003474:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003478:	e009      	b.n	800348e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347a:	f7fe fd39 	bl	8001ef0 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e09e      	b.n	80035cc <HAL_RCC_OscConfig+0x106c>
 800348e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003492:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003496:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800349a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	fa93 f2a3 	rbit	r2, r3
 80034aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034b2:	601a      	str	r2, [r3, #0]
  return result;
 80034b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034be:	fab3 f383 	clz	r3, r3
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	095b      	lsrs	r3, r3, #5
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d104      	bne.n	80034dc <HAL_RCC_OscConfig+0xf7c>
 80034d2:	4b01      	ldr	r3, [pc, #4]	; (80034d8 <HAL_RCC_OscConfig+0xf78>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	e029      	b.n	800352c <HAL_RCC_OscConfig+0xfcc>
 80034d8:	40021000 	.word	0x40021000
 80034dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80034e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	fa93 f2a3 	rbit	r2, r3
 80034f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003506:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800350a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003514:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	fa93 f2a3 	rbit	r2, r3
 800351e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003522:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <HAL_RCC_OscConfig+0x1078>)
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003530:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003534:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003538:	6011      	str	r1, [r2, #0]
 800353a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800353e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	fa92 f1a2 	rbit	r1, r2
 8003548:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800354c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003550:	6011      	str	r1, [r2, #0]
  return result;
 8003552:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003556:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	fab2 f282 	clz	r2, r2
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	f042 0220 	orr.w	r2, r2, #32
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	f002 021f 	and.w	r2, r2, #31
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f202 	lsl.w	r2, r1, r2
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d180      	bne.n	800347a <HAL_RCC_OscConfig+0xf1a>
 8003578:	e027      	b.n	80035ca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800357a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e01e      	b.n	80035cc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_RCC_OscConfig+0x1078>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003596:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800359a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800359e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d10b      	bne.n	80035c6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80035ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80035b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d001      	beq.n	80035ca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e000      	b.n	80035cc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000

080035dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b09e      	sub	sp, #120	; 0x78
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e162      	b.n	80038ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035f4:	4b90      	ldr	r3, [pc, #576]	; (8003838 <HAL_RCC_ClockConfig+0x25c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d910      	bls.n	8003624 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003602:	4b8d      	ldr	r3, [pc, #564]	; (8003838 <HAL_RCC_ClockConfig+0x25c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 0207 	bic.w	r2, r3, #7
 800360a:	498b      	ldr	r1, [pc, #556]	; (8003838 <HAL_RCC_ClockConfig+0x25c>)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	4313      	orrs	r3, r2
 8003610:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003612:	4b89      	ldr	r3, [pc, #548]	; (8003838 <HAL_RCC_ClockConfig+0x25c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e14a      	b.n	80038ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003630:	4b82      	ldr	r3, [pc, #520]	; (800383c <HAL_RCC_ClockConfig+0x260>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	497f      	ldr	r1, [pc, #508]	; (800383c <HAL_RCC_ClockConfig+0x260>)
 800363e:	4313      	orrs	r3, r2
 8003640:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 80dc 	beq.w	8003808 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d13c      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xf6>
 8003658:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800365c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003660:	fa93 f3a3 	rbit	r3, r3
 8003664:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003668:	fab3 f383 	clz	r3, r3
 800366c:	b2db      	uxtb	r3, r3
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	b2db      	uxtb	r3, r3
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b01      	cmp	r3, #1
 800367a:	d102      	bne.n	8003682 <HAL_RCC_ClockConfig+0xa6>
 800367c:	4b6f      	ldr	r3, [pc, #444]	; (800383c <HAL_RCC_ClockConfig+0x260>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	e00f      	b.n	80036a2 <HAL_RCC_ClockConfig+0xc6>
 8003682:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003686:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	667b      	str	r3, [r7, #100]	; 0x64
 8003690:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003694:	663b      	str	r3, [r7, #96]	; 0x60
 8003696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003698:	fa93 f3a3 	rbit	r3, r3
 800369c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800369e:	4b67      	ldr	r3, [pc, #412]	; (800383c <HAL_RCC_ClockConfig+0x260>)
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036a6:	65ba      	str	r2, [r7, #88]	; 0x58
 80036a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036aa:	fa92 f2a2 	rbit	r2, r2
 80036ae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80036b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036b2:	fab2 f282 	clz	r2, r2
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	f042 0220 	orr.w	r2, r2, #32
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	f002 021f 	and.w	r2, r2, #31
 80036c2:	2101      	movs	r1, #1
 80036c4:	fa01 f202 	lsl.w	r2, r1, r2
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d17b      	bne.n	80037c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e0f3      	b.n	80038ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d13c      	bne.n	8003754 <HAL_RCC_ClockConfig+0x178>
 80036da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036e2:	fa93 f3a3 	rbit	r3, r3
 80036e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d102      	bne.n	8003704 <HAL_RCC_ClockConfig+0x128>
 80036fe:	4b4f      	ldr	r3, [pc, #316]	; (800383c <HAL_RCC_ClockConfig+0x260>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	e00f      	b.n	8003724 <HAL_RCC_ClockConfig+0x148>
 8003704:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003708:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800370c:	fa93 f3a3 	rbit	r3, r3
 8003710:	647b      	str	r3, [r7, #68]	; 0x44
 8003712:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003716:	643b      	str	r3, [r7, #64]	; 0x40
 8003718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003720:	4b46      	ldr	r3, [pc, #280]	; (800383c <HAL_RCC_ClockConfig+0x260>)
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003728:	63ba      	str	r2, [r7, #56]	; 0x38
 800372a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800372c:	fa92 f2a2 	rbit	r2, r2
 8003730:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003734:	fab2 f282 	clz	r2, r2
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	f042 0220 	orr.w	r2, r2, #32
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	f002 021f 	and.w	r2, r2, #31
 8003744:	2101      	movs	r1, #1
 8003746:	fa01 f202 	lsl.w	r2, r1, r2
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d13a      	bne.n	80037c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e0b2      	b.n	80038ba <HAL_RCC_ClockConfig+0x2de>
 8003754:	2302      	movs	r3, #2
 8003756:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375a:	fa93 f3a3 	rbit	r3, r3
 800375e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003762:	fab3 f383 	clz	r3, r3
 8003766:	b2db      	uxtb	r3, r3
 8003768:	095b      	lsrs	r3, r3, #5
 800376a:	b2db      	uxtb	r3, r3
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b01      	cmp	r3, #1
 8003774:	d102      	bne.n	800377c <HAL_RCC_ClockConfig+0x1a0>
 8003776:	4b31      	ldr	r3, [pc, #196]	; (800383c <HAL_RCC_ClockConfig+0x260>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	e00d      	b.n	8003798 <HAL_RCC_ClockConfig+0x1bc>
 800377c:	2302      	movs	r3, #2
 800377e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003782:	fa93 f3a3 	rbit	r3, r3
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
 8003788:	2302      	movs	r3, #2
 800378a:	623b      	str	r3, [r7, #32]
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	fa93 f3a3 	rbit	r3, r3
 8003792:	61fb      	str	r3, [r7, #28]
 8003794:	4b29      	ldr	r3, [pc, #164]	; (800383c <HAL_RCC_ClockConfig+0x260>)
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	2202      	movs	r2, #2
 800379a:	61ba      	str	r2, [r7, #24]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	fa92 f2a2 	rbit	r2, r2
 80037a2:	617a      	str	r2, [r7, #20]
  return result;
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	fab2 f282 	clz	r2, r2
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	f042 0220 	orr.w	r2, r2, #32
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	f002 021f 	and.w	r2, r2, #31
 80037b6:	2101      	movs	r1, #1
 80037b8:	fa01 f202 	lsl.w	r2, r1, r2
 80037bc:	4013      	ands	r3, r2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e079      	b.n	80038ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c6:	4b1d      	ldr	r3, [pc, #116]	; (800383c <HAL_RCC_ClockConfig+0x260>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f023 0203 	bic.w	r2, r3, #3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	491a      	ldr	r1, [pc, #104]	; (800383c <HAL_RCC_ClockConfig+0x260>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037d8:	f7fe fb8a 	bl	8001ef0 <HAL_GetTick>
 80037dc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e0:	f7fe fb86 	bl	8001ef0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e061      	b.n	80038ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f6:	4b11      	ldr	r3, [pc, #68]	; (800383c <HAL_RCC_ClockConfig+0x260>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 020c 	and.w	r2, r3, #12
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	429a      	cmp	r2, r3
 8003806:	d1eb      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003808:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <HAL_RCC_ClockConfig+0x25c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d214      	bcs.n	8003840 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003816:	4b08      	ldr	r3, [pc, #32]	; (8003838 <HAL_RCC_ClockConfig+0x25c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 0207 	bic.w	r2, r3, #7
 800381e:	4906      	ldr	r1, [pc, #24]	; (8003838 <HAL_RCC_ClockConfig+0x25c>)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	4313      	orrs	r3, r2
 8003824:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003826:	4b04      	ldr	r3, [pc, #16]	; (8003838 <HAL_RCC_ClockConfig+0x25c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d005      	beq.n	8003840 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e040      	b.n	80038ba <HAL_RCC_ClockConfig+0x2de>
 8003838:	40022000 	.word	0x40022000
 800383c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800384c:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <HAL_RCC_ClockConfig+0x2e8>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	491a      	ldr	r1, [pc, #104]	; (80038c4 <HAL_RCC_ClockConfig+0x2e8>)
 800385a:	4313      	orrs	r3, r2
 800385c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d009      	beq.n	800387e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800386a:	4b16      	ldr	r3, [pc, #88]	; (80038c4 <HAL_RCC_ClockConfig+0x2e8>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4912      	ldr	r1, [pc, #72]	; (80038c4 <HAL_RCC_ClockConfig+0x2e8>)
 800387a:	4313      	orrs	r3, r2
 800387c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800387e:	f000 f829 	bl	80038d4 <HAL_RCC_GetSysClockFreq>
 8003882:	4601      	mov	r1, r0
 8003884:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <HAL_RCC_ClockConfig+0x2e8>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800388c:	22f0      	movs	r2, #240	; 0xf0
 800388e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	fa92 f2a2 	rbit	r2, r2
 8003896:	60fa      	str	r2, [r7, #12]
  return result;
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	fab2 f282 	clz	r2, r2
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	40d3      	lsrs	r3, r2
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <HAL_RCC_ClockConfig+0x2ec>)
 80038a4:	5cd3      	ldrb	r3, [r2, r3]
 80038a6:	fa21 f303 	lsr.w	r3, r1, r3
 80038aa:	4a08      	ldr	r2, [pc, #32]	; (80038cc <HAL_RCC_ClockConfig+0x2f0>)
 80038ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80038ae:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <HAL_RCC_ClockConfig+0x2f4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe fad8 	bl	8001e68 <HAL_InitTick>
  
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3778      	adds	r7, #120	; 0x78
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40021000 	.word	0x40021000
 80038c8:	0800b2fc 	.word	0x0800b2fc
 80038cc:	20000000 	.word	0x20000000
 80038d0:	20000004 	.word	0x20000004

080038d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b08b      	sub	sp, #44	; 0x2c
 80038d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
 80038de:	2300      	movs	r3, #0
 80038e0:	61bb      	str	r3, [r7, #24]
 80038e2:	2300      	movs	r3, #0
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80038ee:	4b29      	ldr	r3, [pc, #164]	; (8003994 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d002      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0x30>
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d003      	beq.n	800390a <HAL_RCC_GetSysClockFreq+0x36>
 8003902:	e03c      	b.n	800397e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003904:	4b24      	ldr	r3, [pc, #144]	; (8003998 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003906:	623b      	str	r3, [r7, #32]
      break;
 8003908:	e03c      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003910:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003914:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	fa92 f2a2 	rbit	r2, r2
 800391c:	607a      	str	r2, [r7, #4]
  return result;
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	fab2 f282 	clz	r2, r2
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	40d3      	lsrs	r3, r2
 8003928:	4a1c      	ldr	r2, [pc, #112]	; (800399c <HAL_RCC_GetSysClockFreq+0xc8>)
 800392a:	5cd3      	ldrb	r3, [r2, r3]
 800392c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800392e:	4b19      	ldr	r3, [pc, #100]	; (8003994 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	220f      	movs	r2, #15
 8003938:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	fa92 f2a2 	rbit	r2, r2
 8003940:	60fa      	str	r2, [r7, #12]
  return result;
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	fab2 f282 	clz	r2, r2
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	40d3      	lsrs	r3, r2
 800394c:	4a14      	ldr	r2, [pc, #80]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800394e:	5cd3      	ldrb	r3, [r2, r3]
 8003950:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800395c:	4a0e      	ldr	r2, [pc, #56]	; (8003998 <HAL_RCC_GetSysClockFreq+0xc4>)
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	fbb2 f2f3 	udiv	r2, r2, r3
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	fb02 f303 	mul.w	r3, r2, r3
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
 800396c:	e004      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	4a0c      	ldr	r2, [pc, #48]	; (80039a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003972:	fb02 f303 	mul.w	r3, r2, r3
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	623b      	str	r3, [r7, #32]
      break;
 800397c:	e002      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800397e:	4b06      	ldr	r3, [pc, #24]	; (8003998 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003980:	623b      	str	r3, [r7, #32]
      break;
 8003982:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003984:	6a3b      	ldr	r3, [r7, #32]
}
 8003986:	4618      	mov	r0, r3
 8003988:	372c      	adds	r7, #44	; 0x2c
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40021000 	.word	0x40021000
 8003998:	007a1200 	.word	0x007a1200
 800399c:	0800b314 	.word	0x0800b314
 80039a0:	0800b324 	.word	0x0800b324
 80039a4:	003d0900 	.word	0x003d0900

080039a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039ac:	4b03      	ldr	r3, [pc, #12]	; (80039bc <HAL_RCC_GetHCLKFreq+0x14>)
 80039ae:	681b      	ldr	r3, [r3, #0]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	20000000 	.word	0x20000000

080039c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80039c6:	f7ff ffef 	bl	80039a8 <HAL_RCC_GetHCLKFreq>
 80039ca:	4601      	mov	r1, r0
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039d4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80039d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	fa92 f2a2 	rbit	r2, r2
 80039e0:	603a      	str	r2, [r7, #0]
  return result;
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	fab2 f282 	clz	r2, r2
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	40d3      	lsrs	r3, r2
 80039ec:	4a04      	ldr	r2, [pc, #16]	; (8003a00 <HAL_RCC_GetPCLK1Freq+0x40>)
 80039ee:	5cd3      	ldrb	r3, [r2, r3]
 80039f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40021000 	.word	0x40021000
 8003a00:	0800b30c 	.word	0x0800b30c

08003a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a0a:	f7ff ffcd 	bl	80039a8 <HAL_RCC_GetHCLKFreq>
 8003a0e:	4601      	mov	r1, r0
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003a18:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003a1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	fa92 f2a2 	rbit	r2, r2
 8003a24:	603a      	str	r2, [r7, #0]
  return result;
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	fab2 f282 	clz	r2, r2
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	40d3      	lsrs	r3, r2
 8003a30:	4a04      	ldr	r2, [pc, #16]	; (8003a44 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a32:	5cd3      	ldrb	r3, [r2, r3]
 8003a34:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40021000 	.word	0x40021000
 8003a44:	0800b30c 	.word	0x0800b30c

08003a48 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b092      	sub	sp, #72	; 0x48
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 80cd 	beq.w	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a6c:	4b86      	ldr	r3, [pc, #536]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10e      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a78:	4b83      	ldr	r3, [pc, #524]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	4a82      	ldr	r2, [pc, #520]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a82:	61d3      	str	r3, [r2, #28]
 8003a84:	4b80      	ldr	r3, [pc, #512]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a96:	4b7d      	ldr	r3, [pc, #500]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d118      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aa2:	4b7a      	ldr	r3, [pc, #488]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a79      	ldr	r2, [pc, #484]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aae:	f7fe fa1f 	bl	8001ef0 <HAL_GetTick>
 8003ab2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab6:	f7fe fa1b 	bl	8001ef0 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b64      	cmp	r3, #100	; 0x64
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e0db      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac8:	4b70      	ldr	r3, [pc, #448]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0f0      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ad4:	4b6c      	ldr	r3, [pc, #432]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003adc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d07d      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d076      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003af2:	4b65      	ldr	r3, [pc, #404]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003afc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b00:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	fa93 f3a3 	rbit	r3, r3
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b0c:	fab3 f383 	clz	r3, r3
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	461a      	mov	r2, r3
 8003b14:	4b5e      	ldr	r3, [pc, #376]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b16:	4413      	add	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b28:	fa93 f3a3 	rbit	r3, r3
 8003b2c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b30:	fab3 f383 	clz	r3, r3
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	461a      	mov	r2, r3
 8003b38:	4b55      	ldr	r3, [pc, #340]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	461a      	mov	r2, r3
 8003b40:	2300      	movs	r3, #0
 8003b42:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b44:	4a50      	ldr	r2, [pc, #320]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b48:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d045      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fe f9cc 	bl	8001ef0 <HAL_GetTick>
 8003b58:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5c:	f7fe f9c8 	bl	8001ef0 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e086      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003b72:	2302      	movs	r3, #2
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b78:	fa93 f3a3 	rbit	r3, r3
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7e:	2302      	movs	r3, #2
 8003b80:	623b      	str	r3, [r7, #32]
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	fa93 f3a3 	rbit	r3, r3
 8003b88:	61fb      	str	r3, [r7, #28]
  return result;
 8003b8a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8c:	fab3 f383 	clz	r3, r3
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	f043 0302 	orr.w	r3, r3, #2
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d102      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003ba0:	4b39      	ldr	r3, [pc, #228]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	e007      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	fa93 f3a3 	rbit	r3, r3
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	4b35      	ldr	r3, [pc, #212]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	613a      	str	r2, [r7, #16]
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	fa92 f2a2 	rbit	r2, r2
 8003bc0:	60fa      	str	r2, [r7, #12]
  return result;
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	fab2 f282 	clz	r2, r2
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	f002 021f 	and.w	r2, r2, #31
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0bd      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003be0:	4b29      	ldr	r3, [pc, #164]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	4926      	ldr	r1, [pc, #152]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bf2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d105      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bfa:	4b23      	ldr	r3, [pc, #140]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	4a22      	ldr	r2, [pc, #136]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c04:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d008      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c12:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	f023 0203 	bic.w	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	491a      	ldr	r1, [pc, #104]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c30:	4b15      	ldr	r3, [pc, #84]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	f023 0210 	bic.w	r2, r3, #16
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4912      	ldr	r1, [pc, #72]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c4e:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	490b      	ldr	r1, [pc, #44]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c6c:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	4903      	ldr	r1, [pc, #12]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3748      	adds	r7, #72	; 0x48
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40007000 	.word	0x40007000
 8003c90:	10908100 	.word	0x10908100

08003c94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e049      	b.n	8003d3a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fd fea4 	bl	8001a08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	f000 fa36 	bl	8004144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <HAL_TIM_PWM_Start+0x24>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	bf14      	ite	ne
 8003d60:	2301      	movne	r3, #1
 8003d62:	2300      	moveq	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	e03c      	b.n	8003de2 <HAL_TIM_PWM_Start+0x9e>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d109      	bne.n	8003d82 <HAL_TIM_PWM_Start+0x3e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	bf14      	ite	ne
 8003d7a:	2301      	movne	r3, #1
 8003d7c:	2300      	moveq	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	e02f      	b.n	8003de2 <HAL_TIM_PWM_Start+0x9e>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d109      	bne.n	8003d9c <HAL_TIM_PWM_Start+0x58>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	bf14      	ite	ne
 8003d94:	2301      	movne	r3, #1
 8003d96:	2300      	moveq	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	e022      	b.n	8003de2 <HAL_TIM_PWM_Start+0x9e>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2b0c      	cmp	r3, #12
 8003da0:	d109      	bne.n	8003db6 <HAL_TIM_PWM_Start+0x72>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	bf14      	ite	ne
 8003dae:	2301      	movne	r3, #1
 8003db0:	2300      	moveq	r3, #0
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	e015      	b.n	8003de2 <HAL_TIM_PWM_Start+0x9e>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b10      	cmp	r3, #16
 8003dba:	d109      	bne.n	8003dd0 <HAL_TIM_PWM_Start+0x8c>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	bf14      	ite	ne
 8003dc8:	2301      	movne	r3, #1
 8003dca:	2300      	moveq	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	e008      	b.n	8003de2 <HAL_TIM_PWM_Start+0x9e>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	bf14      	ite	ne
 8003ddc:	2301      	movne	r3, #1
 8003dde:	2300      	moveq	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e088      	b.n	8003efc <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d104      	bne.n	8003dfa <HAL_TIM_PWM_Start+0xb6>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003df8:	e023      	b.n	8003e42 <HAL_TIM_PWM_Start+0xfe>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d104      	bne.n	8003e0a <HAL_TIM_PWM_Start+0xc6>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e08:	e01b      	b.n	8003e42 <HAL_TIM_PWM_Start+0xfe>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d104      	bne.n	8003e1a <HAL_TIM_PWM_Start+0xd6>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e18:	e013      	b.n	8003e42 <HAL_TIM_PWM_Start+0xfe>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b0c      	cmp	r3, #12
 8003e1e:	d104      	bne.n	8003e2a <HAL_TIM_PWM_Start+0xe6>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e28:	e00b      	b.n	8003e42 <HAL_TIM_PWM_Start+0xfe>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b10      	cmp	r3, #16
 8003e2e:	d104      	bne.n	8003e3a <HAL_TIM_PWM_Start+0xf6>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e38:	e003      	b.n	8003e42 <HAL_TIM_PWM_Start+0xfe>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2201      	movs	r2, #1
 8003e48:	6839      	ldr	r1, [r7, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fc98 	bl	8004780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a2b      	ldr	r2, [pc, #172]	; (8003f04 <HAL_TIM_PWM_Start+0x1c0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00e      	beq.n	8003e78 <HAL_TIM_PWM_Start+0x134>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a2a      	ldr	r2, [pc, #168]	; (8003f08 <HAL_TIM_PWM_Start+0x1c4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d009      	beq.n	8003e78 <HAL_TIM_PWM_Start+0x134>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a28      	ldr	r2, [pc, #160]	; (8003f0c <HAL_TIM_PWM_Start+0x1c8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d004      	beq.n	8003e78 <HAL_TIM_PWM_Start+0x134>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a27      	ldr	r2, [pc, #156]	; (8003f10 <HAL_TIM_PWM_Start+0x1cc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d101      	bne.n	8003e7c <HAL_TIM_PWM_Start+0x138>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <HAL_TIM_PWM_Start+0x13a>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d007      	beq.n	8003e92 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a1b      	ldr	r2, [pc, #108]	; (8003f04 <HAL_TIM_PWM_Start+0x1c0>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00e      	beq.n	8003eba <HAL_TIM_PWM_Start+0x176>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea4:	d009      	beq.n	8003eba <HAL_TIM_PWM_Start+0x176>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1a      	ldr	r2, [pc, #104]	; (8003f14 <HAL_TIM_PWM_Start+0x1d0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d004      	beq.n	8003eba <HAL_TIM_PWM_Start+0x176>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a14      	ldr	r2, [pc, #80]	; (8003f08 <HAL_TIM_PWM_Start+0x1c4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d115      	bne.n	8003ee6 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <HAL_TIM_PWM_Start+0x1d4>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b06      	cmp	r3, #6
 8003eca:	d015      	beq.n	8003ef8 <HAL_TIM_PWM_Start+0x1b4>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed2:	d011      	beq.n	8003ef8 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee4:	e008      	b.n	8003ef8 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0201 	orr.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e000      	b.n	8003efa <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40012c00 	.word	0x40012c00
 8003f08:	40014000 	.word	0x40014000
 8003f0c:	40014400 	.word	0x40014400
 8003f10:	40014800 	.word	0x40014800
 8003f14:	40000400 	.word	0x40000400
 8003f18:	00010007 	.word	0x00010007

08003f1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e0ff      	b.n	800413a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b14      	cmp	r3, #20
 8003f46:	f200 80f0 	bhi.w	800412a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f4a:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f50:	08003fa5 	.word	0x08003fa5
 8003f54:	0800412b 	.word	0x0800412b
 8003f58:	0800412b 	.word	0x0800412b
 8003f5c:	0800412b 	.word	0x0800412b
 8003f60:	08003fe5 	.word	0x08003fe5
 8003f64:	0800412b 	.word	0x0800412b
 8003f68:	0800412b 	.word	0x0800412b
 8003f6c:	0800412b 	.word	0x0800412b
 8003f70:	08004027 	.word	0x08004027
 8003f74:	0800412b 	.word	0x0800412b
 8003f78:	0800412b 	.word	0x0800412b
 8003f7c:	0800412b 	.word	0x0800412b
 8003f80:	08004067 	.word	0x08004067
 8003f84:	0800412b 	.word	0x0800412b
 8003f88:	0800412b 	.word	0x0800412b
 8003f8c:	0800412b 	.word	0x0800412b
 8003f90:	080040a9 	.word	0x080040a9
 8003f94:	0800412b 	.word	0x0800412b
 8003f98:	0800412b 	.word	0x0800412b
 8003f9c:	0800412b 	.word	0x0800412b
 8003fa0:	080040e9 	.word	0x080040e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 f942 	bl	8004234 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0208 	orr.w	r2, r2, #8
 8003fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699a      	ldr	r2, [r3, #24]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0204 	bic.w	r2, r2, #4
 8003fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6999      	ldr	r1, [r3, #24]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	619a      	str	r2, [r3, #24]
      break;
 8003fe2:	e0a5      	b.n	8004130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 f9a8 	bl	8004340 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800400e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6999      	ldr	r1, [r3, #24]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	021a      	lsls	r2, r3, #8
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	619a      	str	r2, [r3, #24]
      break;
 8004024:	e084      	b.n	8004130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68b9      	ldr	r1, [r7, #8]
 800402c:	4618      	mov	r0, r3
 800402e:	f000 fa07 	bl	8004440 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69da      	ldr	r2, [r3, #28]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0208 	orr.w	r2, r2, #8
 8004040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69da      	ldr	r2, [r3, #28]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0204 	bic.w	r2, r2, #4
 8004050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69d9      	ldr	r1, [r3, #28]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	61da      	str	r2, [r3, #28]
      break;
 8004064:	e064      	b.n	8004130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fa65 	bl	800453c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69d9      	ldr	r1, [r3, #28]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	021a      	lsls	r2, r3, #8
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	61da      	str	r2, [r3, #28]
      break;
 80040a6:	e043      	b.n	8004130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 faa8 	bl	8004604 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0208 	orr.w	r2, r2, #8
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0204 	bic.w	r2, r2, #4
 80040d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040e6:	e023      	b.n	8004130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fae6 	bl	80046c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004102:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004112:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	021a      	lsls	r2, r3, #8
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004128:	e002      	b.n	8004130 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	75fb      	strb	r3, [r7, #23]
      break;
 800412e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004138:	7dfb      	ldrb	r3, [r7, #23]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3718      	adds	r7, #24
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop

08004144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a32      	ldr	r2, [pc, #200]	; (8004220 <TIM_Base_SetConfig+0xdc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d007      	beq.n	800416c <TIM_Base_SetConfig+0x28>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004162:	d003      	beq.n	800416c <TIM_Base_SetConfig+0x28>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a2f      	ldr	r2, [pc, #188]	; (8004224 <TIM_Base_SetConfig+0xe0>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d108      	bne.n	800417e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a27      	ldr	r2, [pc, #156]	; (8004220 <TIM_Base_SetConfig+0xdc>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d013      	beq.n	80041ae <TIM_Base_SetConfig+0x6a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418c:	d00f      	beq.n	80041ae <TIM_Base_SetConfig+0x6a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a24      	ldr	r2, [pc, #144]	; (8004224 <TIM_Base_SetConfig+0xe0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00b      	beq.n	80041ae <TIM_Base_SetConfig+0x6a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a23      	ldr	r2, [pc, #140]	; (8004228 <TIM_Base_SetConfig+0xe4>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d007      	beq.n	80041ae <TIM_Base_SetConfig+0x6a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a22      	ldr	r2, [pc, #136]	; (800422c <TIM_Base_SetConfig+0xe8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d003      	beq.n	80041ae <TIM_Base_SetConfig+0x6a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a21      	ldr	r2, [pc, #132]	; (8004230 <TIM_Base_SetConfig+0xec>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d108      	bne.n	80041c0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4313      	orrs	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a0e      	ldr	r2, [pc, #56]	; (8004220 <TIM_Base_SetConfig+0xdc>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d00b      	beq.n	8004204 <TIM_Base_SetConfig+0xc0>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a0e      	ldr	r2, [pc, #56]	; (8004228 <TIM_Base_SetConfig+0xe4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d007      	beq.n	8004204 <TIM_Base_SetConfig+0xc0>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a0d      	ldr	r2, [pc, #52]	; (800422c <TIM_Base_SetConfig+0xe8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d003      	beq.n	8004204 <TIM_Base_SetConfig+0xc0>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a0c      	ldr	r2, [pc, #48]	; (8004230 <TIM_Base_SetConfig+0xec>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d103      	bne.n	800420c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	615a      	str	r2, [r3, #20]
}
 8004212:	bf00      	nop
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40012c00 	.word	0x40012c00
 8004224:	40000400 	.word	0x40000400
 8004228:	40014000 	.word	0x40014000
 800422c:	40014400 	.word	0x40014400
 8004230:	40014800 	.word	0x40014800

08004234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f023 0201 	bic.w	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0303 	bic.w	r3, r3, #3
 800426e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f023 0302 	bic.w	r3, r3, #2
 8004280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a28      	ldr	r2, [pc, #160]	; (8004330 <TIM_OC1_SetConfig+0xfc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00b      	beq.n	80042ac <TIM_OC1_SetConfig+0x78>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a27      	ldr	r2, [pc, #156]	; (8004334 <TIM_OC1_SetConfig+0x100>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d007      	beq.n	80042ac <TIM_OC1_SetConfig+0x78>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a26      	ldr	r2, [pc, #152]	; (8004338 <TIM_OC1_SetConfig+0x104>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d003      	beq.n	80042ac <TIM_OC1_SetConfig+0x78>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a25      	ldr	r2, [pc, #148]	; (800433c <TIM_OC1_SetConfig+0x108>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d10c      	bne.n	80042c6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f023 0308 	bic.w	r3, r3, #8
 80042b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f023 0304 	bic.w	r3, r3, #4
 80042c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a19      	ldr	r2, [pc, #100]	; (8004330 <TIM_OC1_SetConfig+0xfc>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00b      	beq.n	80042e6 <TIM_OC1_SetConfig+0xb2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a18      	ldr	r2, [pc, #96]	; (8004334 <TIM_OC1_SetConfig+0x100>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d007      	beq.n	80042e6 <TIM_OC1_SetConfig+0xb2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a17      	ldr	r2, [pc, #92]	; (8004338 <TIM_OC1_SetConfig+0x104>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d003      	beq.n	80042e6 <TIM_OC1_SetConfig+0xb2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a16      	ldr	r2, [pc, #88]	; (800433c <TIM_OC1_SetConfig+0x108>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d111      	bne.n	800430a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	621a      	str	r2, [r3, #32]
}
 8004324:	bf00      	nop
 8004326:	371c      	adds	r7, #28
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40014000 	.word	0x40014000
 8004338:	40014400 	.word	0x40014400
 800433c:	40014800 	.word	0x40014800

08004340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	f023 0210 	bic.w	r2, r3, #16
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800436e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800437a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	021b      	lsls	r3, r3, #8
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4313      	orrs	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f023 0320 	bic.w	r3, r3, #32
 800438e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4313      	orrs	r3, r2
 800439a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a24      	ldr	r2, [pc, #144]	; (8004430 <TIM_OC2_SetConfig+0xf0>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d10d      	bne.n	80043c0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a1b      	ldr	r2, [pc, #108]	; (8004430 <TIM_OC2_SetConfig+0xf0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00b      	beq.n	80043e0 <TIM_OC2_SetConfig+0xa0>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a1a      	ldr	r2, [pc, #104]	; (8004434 <TIM_OC2_SetConfig+0xf4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d007      	beq.n	80043e0 <TIM_OC2_SetConfig+0xa0>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a19      	ldr	r2, [pc, #100]	; (8004438 <TIM_OC2_SetConfig+0xf8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d003      	beq.n	80043e0 <TIM_OC2_SetConfig+0xa0>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a18      	ldr	r2, [pc, #96]	; (800443c <TIM_OC2_SetConfig+0xfc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d113      	bne.n	8004408 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043e6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043ee:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	621a      	str	r2, [r3, #32]
}
 8004422:	bf00      	nop
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40012c00 	.word	0x40012c00
 8004434:	40014000 	.word	0x40014000
 8004438:	40014400 	.word	0x40014400
 800443c:	40014800 	.word	0x40014800

08004440 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800446e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0303 	bic.w	r3, r3, #3
 800447a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800448c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a23      	ldr	r2, [pc, #140]	; (800452c <TIM_OC3_SetConfig+0xec>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d10d      	bne.n	80044be <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	021b      	lsls	r3, r3, #8
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044bc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a1a      	ldr	r2, [pc, #104]	; (800452c <TIM_OC3_SetConfig+0xec>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00b      	beq.n	80044de <TIM_OC3_SetConfig+0x9e>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a19      	ldr	r2, [pc, #100]	; (8004530 <TIM_OC3_SetConfig+0xf0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d007      	beq.n	80044de <TIM_OC3_SetConfig+0x9e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a18      	ldr	r2, [pc, #96]	; (8004534 <TIM_OC3_SetConfig+0xf4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d003      	beq.n	80044de <TIM_OC3_SetConfig+0x9e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a17      	ldr	r2, [pc, #92]	; (8004538 <TIM_OC3_SetConfig+0xf8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d113      	bne.n	8004506 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	621a      	str	r2, [r3, #32]
}
 8004520:	bf00      	nop
 8004522:	371c      	adds	r7, #28
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	40012c00 	.word	0x40012c00
 8004530:	40014000 	.word	0x40014000
 8004534:	40014400 	.word	0x40014400
 8004538:	40014800 	.word	0x40014800

0800453c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800456a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800456e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800458a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	031b      	lsls	r3, r3, #12
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a16      	ldr	r2, [pc, #88]	; (80045f4 <TIM_OC4_SetConfig+0xb8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d00b      	beq.n	80045b8 <TIM_OC4_SetConfig+0x7c>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a15      	ldr	r2, [pc, #84]	; (80045f8 <TIM_OC4_SetConfig+0xbc>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d007      	beq.n	80045b8 <TIM_OC4_SetConfig+0x7c>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a14      	ldr	r2, [pc, #80]	; (80045fc <TIM_OC4_SetConfig+0xc0>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d003      	beq.n	80045b8 <TIM_OC4_SetConfig+0x7c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a13      	ldr	r2, [pc, #76]	; (8004600 <TIM_OC4_SetConfig+0xc4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d109      	bne.n	80045cc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	019b      	lsls	r3, r3, #6
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	621a      	str	r2, [r3, #32]
}
 80045e6:	bf00      	nop
 80045e8:	371c      	adds	r7, #28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40012c00 	.word	0x40012c00
 80045f8:	40014000 	.word	0x40014000
 80045fc:	40014400 	.word	0x40014400
 8004600:	40014800 	.word	0x40014800

08004604 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004648:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	041b      	lsls	r3, r3, #16
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a15      	ldr	r2, [pc, #84]	; (80046b0 <TIM_OC5_SetConfig+0xac>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00b      	beq.n	8004676 <TIM_OC5_SetConfig+0x72>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a14      	ldr	r2, [pc, #80]	; (80046b4 <TIM_OC5_SetConfig+0xb0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d007      	beq.n	8004676 <TIM_OC5_SetConfig+0x72>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a13      	ldr	r2, [pc, #76]	; (80046b8 <TIM_OC5_SetConfig+0xb4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d003      	beq.n	8004676 <TIM_OC5_SetConfig+0x72>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a12      	ldr	r2, [pc, #72]	; (80046bc <TIM_OC5_SetConfig+0xb8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d109      	bne.n	800468a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800467c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	021b      	lsls	r3, r3, #8
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	621a      	str	r2, [r3, #32]
}
 80046a4:	bf00      	nop
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	40012c00 	.word	0x40012c00
 80046b4:	40014000 	.word	0x40014000
 80046b8:	40014400 	.word	0x40014400
 80046bc:	40014800 	.word	0x40014800

080046c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	021b      	lsls	r3, r3, #8
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	051b      	lsls	r3, r3, #20
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a16      	ldr	r2, [pc, #88]	; (8004770 <TIM_OC6_SetConfig+0xb0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00b      	beq.n	8004734 <TIM_OC6_SetConfig+0x74>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a15      	ldr	r2, [pc, #84]	; (8004774 <TIM_OC6_SetConfig+0xb4>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d007      	beq.n	8004734 <TIM_OC6_SetConfig+0x74>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a14      	ldr	r2, [pc, #80]	; (8004778 <TIM_OC6_SetConfig+0xb8>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d003      	beq.n	8004734 <TIM_OC6_SetConfig+0x74>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a13      	ldr	r2, [pc, #76]	; (800477c <TIM_OC6_SetConfig+0xbc>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d109      	bne.n	8004748 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800473a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	029b      	lsls	r3, r3, #10
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	621a      	str	r2, [r3, #32]
}
 8004762:	bf00      	nop
 8004764:	371c      	adds	r7, #28
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40012c00 	.word	0x40012c00
 8004774:	40014000 	.word	0x40014000
 8004778:	40014400 	.word	0x40014400
 800477c:	40014800 	.word	0x40014800

08004780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f003 031f 	and.w	r3, r3, #31
 8004792:	2201      	movs	r2, #1
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a1a      	ldr	r2, [r3, #32]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	43db      	mvns	r3, r3
 80047a2:	401a      	ands	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a1a      	ldr	r2, [r3, #32]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f003 031f 	and.w	r3, r3, #31
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	fa01 f303 	lsl.w	r3, r1, r3
 80047b8:	431a      	orrs	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	621a      	str	r2, [r3, #32]
}
 80047be:	bf00      	nop
 80047c0:	371c      	adds	r7, #28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
	...

080047cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e054      	b.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a24      	ldr	r2, [pc, #144]	; (800489c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d108      	bne.n	8004820 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004814:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4313      	orrs	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a17      	ldr	r2, [pc, #92]	; (800489c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00e      	beq.n	8004862 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484c:	d009      	beq.n	8004862 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a13      	ldr	r2, [pc, #76]	; (80048a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d004      	beq.n	8004862 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a11      	ldr	r2, [pc, #68]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d10c      	bne.n	800487c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004868:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	4313      	orrs	r3, r2
 8004872:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40012c00 	.word	0x40012c00
 80048a0:	40000400 	.word	0x40000400
 80048a4:	40014000 	.word	0x40014000

080048a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e040      	b.n	800493c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fd f8ee 	bl	8001aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2224      	movs	r2, #36	; 0x24
 80048d4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0201 	bic.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fc00 	bl	80050ec <UART_SetConfig>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e022      	b.n	800493c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fd2a 	bl	8005358 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004912:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004922:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 fdb1 	bl	800549c <UART_CheckIdleState>
 800493a:	4603      	mov	r3, r0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08a      	sub	sp, #40	; 0x28
 8004948:	af02      	add	r7, sp, #8
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	4613      	mov	r3, r2
 8004952:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004958:	2b20      	cmp	r3, #32
 800495a:	d178      	bne.n	8004a4e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_UART_Transmit+0x24>
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e071      	b.n	8004a50 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2221      	movs	r2, #33	; 0x21
 8004978:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800497a:	f7fd fab9 	bl	8001ef0 <HAL_GetTick>
 800497e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	88fa      	ldrh	r2, [r7, #6]
 8004984:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	88fa      	ldrh	r2, [r7, #6]
 800498c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004998:	d108      	bne.n	80049ac <HAL_UART_Transmit+0x68>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d104      	bne.n	80049ac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	e003      	b.n	80049b4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049b4:	e030      	b.n	8004a18 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2200      	movs	r2, #0
 80049be:	2180      	movs	r1, #128	; 0x80
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 fe13 	bl	80055ec <UART_WaitOnFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d004      	beq.n	80049d6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e03c      	b.n	8004a50 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10b      	bne.n	80049f4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	881a      	ldrh	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049e8:	b292      	uxth	r2, r2
 80049ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	3302      	adds	r3, #2
 80049f0:	61bb      	str	r3, [r7, #24]
 80049f2:	e008      	b.n	8004a06 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	781a      	ldrb	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	b292      	uxth	r2, r2
 80049fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	3301      	adds	r3, #1
 8004a04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1c8      	bne.n	80049b6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2140      	movs	r1, #64	; 0x40
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 fddc 	bl	80055ec <UART_WaitOnFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d004      	beq.n	8004a44 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e005      	b.n	8004a50 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e000      	b.n	8004a50 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004a4e:	2302      	movs	r3, #2
  }
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3720      	adds	r7, #32
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	; 0x28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	4613      	mov	r3, r2
 8004a64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	d132      	bne.n	8004ad6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <HAL_UART_Receive_IT+0x24>
 8004a76:	88fb      	ldrh	r3, [r7, #6]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e02b      	b.n	8004ad8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d018      	beq.n	8004ac6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	e853 3f00 	ldrex	r3, [r3]
 8004aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	623b      	str	r3, [r7, #32]
 8004ab4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab6:	69f9      	ldr	r1, [r7, #28]
 8004ab8:	6a3a      	ldr	r2, [r7, #32]
 8004aba:	e841 2300 	strex	r3, r2, [r1]
 8004abe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1e6      	bne.n	8004a94 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 fdf5 	bl	80056bc <UART_Start_Receive_IT>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	e000      	b.n	8004ad8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004ad6:	2302      	movs	r3, #2
  }
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3728      	adds	r7, #40	; 0x28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b0ba      	sub	sp, #232	; 0xe8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b0e:	4013      	ands	r3, r2
 8004b10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004b14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d115      	bne.n	8004b48 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b20:	f003 0320 	and.w	r3, r3, #32
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00f      	beq.n	8004b48 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b2c:	f003 0320 	and.w	r3, r3, #32
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d009      	beq.n	8004b48 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 82ab 	beq.w	8005094 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	4798      	blx	r3
      }
      return;
 8004b46:	e2a5      	b.n	8005094 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 8117 	beq.w	8004d80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004b5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004b62:	4b85      	ldr	r3, [pc, #532]	; (8004d78 <HAL_UART_IRQHandler+0x298>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 810a 	beq.w	8004d80 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d011      	beq.n	8004b9c <HAL_UART_IRQHandler+0xbc>
 8004b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00b      	beq.n	8004b9c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b92:	f043 0201 	orr.w	r2, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d011      	beq.n	8004bcc <HAL_UART_IRQHandler+0xec>
 8004ba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00b      	beq.n	8004bcc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc2:	f043 0204 	orr.w	r2, r3, #4
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d011      	beq.n	8004bfc <HAL_UART_IRQHandler+0x11c>
 8004bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00b      	beq.n	8004bfc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2204      	movs	r2, #4
 8004bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bf2:	f043 0202 	orr.w	r2, r3, #2
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c00:	f003 0308 	and.w	r3, r3, #8
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d017      	beq.n	8004c38 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d105      	bne.n	8004c20 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00b      	beq.n	8004c38 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2208      	movs	r2, #8
 8004c26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c2e:	f043 0208 	orr.w	r2, r3, #8
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d012      	beq.n	8004c6a <HAL_UART_IRQHandler+0x18a>
 8004c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00c      	beq.n	8004c6a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c60:	f043 0220 	orr.w	r2, r3, #32
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 8211 	beq.w	8005098 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00d      	beq.n	8004c9e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c86:	f003 0320 	and.w	r3, r3, #32
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d007      	beq.n	8004c9e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ca4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb2:	2b40      	cmp	r3, #64	; 0x40
 8004cb4:	d005      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d04f      	beq.n	8004d62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 fdc0 	bl	8005848 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d141      	bne.n	8004d5a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3308      	adds	r3, #8
 8004cdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ce4:	e853 3f00 	ldrex	r3, [r3]
 8004ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3308      	adds	r3, #8
 8004cfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d12:	e841 2300 	strex	r3, r2, [r1]
 8004d16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1d9      	bne.n	8004cd6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d013      	beq.n	8004d52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d2e:	4a13      	ldr	r2, [pc, #76]	; (8004d7c <HAL_UART_IRQHandler+0x29c>)
 8004d30:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fd fa4a 	bl	80021d0 <HAL_DMA_Abort_IT>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d017      	beq.n	8004d72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d50:	e00f      	b.n	8004d72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f9b4 	bl	80050c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d58:	e00b      	b.n	8004d72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f9b0 	bl	80050c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d60:	e007      	b.n	8004d72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f9ac 	bl	80050c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004d70:	e192      	b.n	8005098 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d72:	bf00      	nop
    return;
 8004d74:	e190      	b.n	8005098 <HAL_UART_IRQHandler+0x5b8>
 8004d76:	bf00      	nop
 8004d78:	04000120 	.word	0x04000120
 8004d7c:	08005911 	.word	0x08005911

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	f040 814b 	bne.w	8005020 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 8144 	beq.w	8005020 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 813d 	beq.w	8005020 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2210      	movs	r2, #16
 8004dac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db8:	2b40      	cmp	r3, #64	; 0x40
 8004dba:	f040 80b5 	bne.w	8004f28 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004dca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 8164 	beq.w	800509c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004dda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dde:	429a      	cmp	r2, r3
 8004de0:	f080 815c 	bcs.w	800509c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	f000 8086 	beq.w	8004f06 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e06:	e853 3f00 	ldrex	r3, [r3]
 8004e0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e28:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e30:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e34:	e841 2300 	strex	r3, r2, [r1]
 8004e38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1da      	bne.n	8004dfa <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3308      	adds	r3, #8
 8004e4a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e4e:	e853 3f00 	ldrex	r3, [r3]
 8004e52:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e56:	f023 0301 	bic.w	r3, r3, #1
 8004e5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3308      	adds	r3, #8
 8004e64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e68:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e6c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e70:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e1      	bne.n	8004e44 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3308      	adds	r3, #8
 8004e86:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e8a:	e853 3f00 	ldrex	r3, [r3]
 8004e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3308      	adds	r3, #8
 8004ea0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ea4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ea6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004eaa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004eac:	e841 2300 	strex	r3, r2, [r1]
 8004eb0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004eb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e3      	bne.n	8004e80 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ece:	e853 3f00 	ldrex	r3, [r3]
 8004ed2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ed6:	f023 0310 	bic.w	r3, r3, #16
 8004eda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ee8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004eea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004eee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e4      	bne.n	8004ec6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fd f92c 	bl	800215e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2202      	movs	r2, #2
 8004f0a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f8d7 	bl	80050d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f26:	e0b9      	b.n	800509c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80ab 	beq.w	80050a0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004f4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 80a6 	beq.w	80050a0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	461a      	mov	r2, r3
 8004f72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f76:	647b      	str	r3, [r7, #68]	; 0x44
 8004f78:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e4      	bne.n	8004f54 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3308      	adds	r3, #8
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	623b      	str	r3, [r7, #32]
   return(result);
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	f023 0301 	bic.w	r3, r3, #1
 8004fa0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3308      	adds	r3, #8
 8004faa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004fae:	633a      	str	r2, [r7, #48]	; 0x30
 8004fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb6:	e841 2300 	strex	r3, r2, [r1]
 8004fba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1e3      	bne.n	8004f8a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	e853 3f00 	ldrex	r3, [r3]
 8004fe2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0310 	bic.w	r3, r3, #16
 8004fea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ff8:	61fb      	str	r3, [r7, #28]
 8004ffa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffc:	69b9      	ldr	r1, [r7, #24]
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	e841 2300 	strex	r3, r2, [r1]
 8005004:	617b      	str	r3, [r7, #20]
   return(result);
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e4      	bne.n	8004fd6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005012:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005016:	4619      	mov	r1, r3
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f85b 	bl	80050d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800501e:	e03f      	b.n	80050a0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00e      	beq.n	800504a <HAL_UART_IRQHandler+0x56a>
 800502c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d008      	beq.n	800504a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005040:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fe4c 	bl	8005ce0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005048:	e02d      	b.n	80050a6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800504a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800504e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00e      	beq.n	8005074 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800505a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505e:	2b00      	cmp	r3, #0
 8005060:	d008      	beq.n	8005074 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005066:	2b00      	cmp	r3, #0
 8005068:	d01c      	beq.n	80050a4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	4798      	blx	r3
    }
    return;
 8005072:	e017      	b.n	80050a4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507c:	2b00      	cmp	r3, #0
 800507e:	d012      	beq.n	80050a6 <HAL_UART_IRQHandler+0x5c6>
 8005080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00c      	beq.n	80050a6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fc55 	bl	800593c <UART_EndTransmit_IT>
    return;
 8005092:	e008      	b.n	80050a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005094:	bf00      	nop
 8005096:	e006      	b.n	80050a6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005098:	bf00      	nop
 800509a:	e004      	b.n	80050a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 800509c:	bf00      	nop
 800509e:	e002      	b.n	80050a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80050a0:	bf00      	nop
 80050a2:	e000      	b.n	80050a6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80050a4:	bf00      	nop
  }

}
 80050a6:	37e8      	adds	r7, #232	; 0xe8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	431a      	orrs	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	4b8a      	ldr	r3, [pc, #552]	; (8005340 <UART_SetConfig+0x254>)
 8005118:	4013      	ands	r3, r2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6812      	ldr	r2, [r2, #0]
 800511e:	6979      	ldr	r1, [r7, #20]
 8005120:	430b      	orrs	r3, r1
 8005122:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	430a      	orrs	r2, r1
 800515c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a78      	ldr	r2, [pc, #480]	; (8005344 <UART_SetConfig+0x258>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d120      	bne.n	80051aa <UART_SetConfig+0xbe>
 8005168:	4b77      	ldr	r3, [pc, #476]	; (8005348 <UART_SetConfig+0x25c>)
 800516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516c:	f003 0303 	and.w	r3, r3, #3
 8005170:	2b03      	cmp	r3, #3
 8005172:	d817      	bhi.n	80051a4 <UART_SetConfig+0xb8>
 8005174:	a201      	add	r2, pc, #4	; (adr r2, 800517c <UART_SetConfig+0x90>)
 8005176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517a:	bf00      	nop
 800517c:	0800518d 	.word	0x0800518d
 8005180:	08005199 	.word	0x08005199
 8005184:	0800519f 	.word	0x0800519f
 8005188:	08005193 	.word	0x08005193
 800518c:	2300      	movs	r3, #0
 800518e:	77fb      	strb	r3, [r7, #31]
 8005190:	e01d      	b.n	80051ce <UART_SetConfig+0xe2>
 8005192:	2302      	movs	r3, #2
 8005194:	77fb      	strb	r3, [r7, #31]
 8005196:	e01a      	b.n	80051ce <UART_SetConfig+0xe2>
 8005198:	2304      	movs	r3, #4
 800519a:	77fb      	strb	r3, [r7, #31]
 800519c:	e017      	b.n	80051ce <UART_SetConfig+0xe2>
 800519e:	2308      	movs	r3, #8
 80051a0:	77fb      	strb	r3, [r7, #31]
 80051a2:	e014      	b.n	80051ce <UART_SetConfig+0xe2>
 80051a4:	2310      	movs	r3, #16
 80051a6:	77fb      	strb	r3, [r7, #31]
 80051a8:	e011      	b.n	80051ce <UART_SetConfig+0xe2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a67      	ldr	r2, [pc, #412]	; (800534c <UART_SetConfig+0x260>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d102      	bne.n	80051ba <UART_SetConfig+0xce>
 80051b4:	2300      	movs	r3, #0
 80051b6:	77fb      	strb	r3, [r7, #31]
 80051b8:	e009      	b.n	80051ce <UART_SetConfig+0xe2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a64      	ldr	r2, [pc, #400]	; (8005350 <UART_SetConfig+0x264>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d102      	bne.n	80051ca <UART_SetConfig+0xde>
 80051c4:	2300      	movs	r3, #0
 80051c6:	77fb      	strb	r3, [r7, #31]
 80051c8:	e001      	b.n	80051ce <UART_SetConfig+0xe2>
 80051ca:	2310      	movs	r3, #16
 80051cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d6:	d15a      	bne.n	800528e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80051d8:	7ffb      	ldrb	r3, [r7, #31]
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d827      	bhi.n	800522e <UART_SetConfig+0x142>
 80051de:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <UART_SetConfig+0xf8>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	08005209 	.word	0x08005209
 80051e8:	08005211 	.word	0x08005211
 80051ec:	08005219 	.word	0x08005219
 80051f0:	0800522f 	.word	0x0800522f
 80051f4:	0800521f 	.word	0x0800521f
 80051f8:	0800522f 	.word	0x0800522f
 80051fc:	0800522f 	.word	0x0800522f
 8005200:	0800522f 	.word	0x0800522f
 8005204:	08005227 	.word	0x08005227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005208:	f7fe fbda 	bl	80039c0 <HAL_RCC_GetPCLK1Freq>
 800520c:	61b8      	str	r0, [r7, #24]
        break;
 800520e:	e013      	b.n	8005238 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005210:	f7fe fbf8 	bl	8003a04 <HAL_RCC_GetPCLK2Freq>
 8005214:	61b8      	str	r0, [r7, #24]
        break;
 8005216:	e00f      	b.n	8005238 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005218:	4b4e      	ldr	r3, [pc, #312]	; (8005354 <UART_SetConfig+0x268>)
 800521a:	61bb      	str	r3, [r7, #24]
        break;
 800521c:	e00c      	b.n	8005238 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800521e:	f7fe fb59 	bl	80038d4 <HAL_RCC_GetSysClockFreq>
 8005222:	61b8      	str	r0, [r7, #24]
        break;
 8005224:	e008      	b.n	8005238 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800522a:	61bb      	str	r3, [r7, #24]
        break;
 800522c:	e004      	b.n	8005238 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	77bb      	strb	r3, [r7, #30]
        break;
 8005236:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d074      	beq.n	8005328 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	005a      	lsls	r2, r3, #1
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	085b      	lsrs	r3, r3, #1
 8005248:	441a      	add	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005252:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	2b0f      	cmp	r3, #15
 8005258:	d916      	bls.n	8005288 <UART_SetConfig+0x19c>
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005260:	d212      	bcs.n	8005288 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	b29b      	uxth	r3, r3
 8005266:	f023 030f 	bic.w	r3, r3, #15
 800526a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	085b      	lsrs	r3, r3, #1
 8005270:	b29b      	uxth	r3, r3
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	b29a      	uxth	r2, r3
 8005278:	89fb      	ldrh	r3, [r7, #14]
 800527a:	4313      	orrs	r3, r2
 800527c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	89fa      	ldrh	r2, [r7, #14]
 8005284:	60da      	str	r2, [r3, #12]
 8005286:	e04f      	b.n	8005328 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	77bb      	strb	r3, [r7, #30]
 800528c:	e04c      	b.n	8005328 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800528e:	7ffb      	ldrb	r3, [r7, #31]
 8005290:	2b08      	cmp	r3, #8
 8005292:	d828      	bhi.n	80052e6 <UART_SetConfig+0x1fa>
 8005294:	a201      	add	r2, pc, #4	; (adr r2, 800529c <UART_SetConfig+0x1b0>)
 8005296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529a:	bf00      	nop
 800529c:	080052c1 	.word	0x080052c1
 80052a0:	080052c9 	.word	0x080052c9
 80052a4:	080052d1 	.word	0x080052d1
 80052a8:	080052e7 	.word	0x080052e7
 80052ac:	080052d7 	.word	0x080052d7
 80052b0:	080052e7 	.word	0x080052e7
 80052b4:	080052e7 	.word	0x080052e7
 80052b8:	080052e7 	.word	0x080052e7
 80052bc:	080052df 	.word	0x080052df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c0:	f7fe fb7e 	bl	80039c0 <HAL_RCC_GetPCLK1Freq>
 80052c4:	61b8      	str	r0, [r7, #24]
        break;
 80052c6:	e013      	b.n	80052f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052c8:	f7fe fb9c 	bl	8003a04 <HAL_RCC_GetPCLK2Freq>
 80052cc:	61b8      	str	r0, [r7, #24]
        break;
 80052ce:	e00f      	b.n	80052f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d0:	4b20      	ldr	r3, [pc, #128]	; (8005354 <UART_SetConfig+0x268>)
 80052d2:	61bb      	str	r3, [r7, #24]
        break;
 80052d4:	e00c      	b.n	80052f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052d6:	f7fe fafd 	bl	80038d4 <HAL_RCC_GetSysClockFreq>
 80052da:	61b8      	str	r0, [r7, #24]
        break;
 80052dc:	e008      	b.n	80052f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052e2:	61bb      	str	r3, [r7, #24]
        break;
 80052e4:	e004      	b.n	80052f0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	77bb      	strb	r3, [r7, #30]
        break;
 80052ee:	bf00      	nop
    }

    if (pclk != 0U)
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d018      	beq.n	8005328 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	085a      	lsrs	r2, r3, #1
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	441a      	add	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	fbb2 f3f3 	udiv	r3, r2, r3
 8005308:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b0f      	cmp	r3, #15
 800530e:	d909      	bls.n	8005324 <UART_SetConfig+0x238>
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005316:	d205      	bcs.n	8005324 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	b29a      	uxth	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	60da      	str	r2, [r3, #12]
 8005322:	e001      	b.n	8005328 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005334:	7fbb      	ldrb	r3, [r7, #30]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3720      	adds	r7, #32
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	efff69f3 	.word	0xefff69f3
 8005344:	40013800 	.word	0x40013800
 8005348:	40021000 	.word	0x40021000
 800534c:	40004400 	.word	0x40004400
 8005350:	40004800 	.word	0x40004800
 8005354:	007a1200 	.word	0x007a1200

08005358 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00a      	beq.n	80053c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00a      	beq.n	80053e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00a      	beq.n	800540a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00a      	beq.n	800542c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01a      	beq.n	800546e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005456:	d10a      	bne.n	800546e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	605a      	str	r2, [r3, #4]
  }
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b098      	sub	sp, #96	; 0x60
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054ac:	f7fc fd20 	bl	8001ef0 <HAL_GetTick>
 80054b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d12e      	bne.n	800551e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054c8:	2200      	movs	r2, #0
 80054ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f88c 	bl	80055ec <UART_WaitOnFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d021      	beq.n	800551e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ee:	653b      	str	r3, [r7, #80]	; 0x50
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	461a      	mov	r2, r3
 80054f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f8:	647b      	str	r3, [r7, #68]	; 0x44
 80054fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e6      	bne.n	80054da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e062      	b.n	80055e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b04      	cmp	r3, #4
 800552a:	d149      	bne.n	80055c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800552c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005534:	2200      	movs	r2, #0
 8005536:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f856 	bl	80055ec <UART_WaitOnFlagUntilTimeout>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d03c      	beq.n	80055c0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	e853 3f00 	ldrex	r3, [r3]
 8005552:	623b      	str	r3, [r7, #32]
   return(result);
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800555a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	461a      	mov	r2, r3
 8005562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005564:	633b      	str	r3, [r7, #48]	; 0x30
 8005566:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005568:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800556a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800556c:	e841 2300 	strex	r3, r2, [r1]
 8005570:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1e6      	bne.n	8005546 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3308      	adds	r3, #8
 800557e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	e853 3f00 	ldrex	r3, [r3]
 8005586:	60fb      	str	r3, [r7, #12]
   return(result);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0301 	bic.w	r3, r3, #1
 800558e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3308      	adds	r3, #8
 8005596:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005598:	61fa      	str	r2, [r7, #28]
 800559a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559c:	69b9      	ldr	r1, [r7, #24]
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	e841 2300 	strex	r3, r2, [r1]
 80055a4:	617b      	str	r3, [r7, #20]
   return(result);
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1e5      	bne.n	8005578 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e011      	b.n	80055e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3758      	adds	r7, #88	; 0x58
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	4613      	mov	r3, r2
 80055fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055fc:	e049      	b.n	8005692 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005604:	d045      	beq.n	8005692 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005606:	f7fc fc73 	bl	8001ef0 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	429a      	cmp	r2, r3
 8005614:	d302      	bcc.n	800561c <UART_WaitOnFlagUntilTimeout+0x30>
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e048      	b.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0304 	and.w	r3, r3, #4
 800562a:	2b00      	cmp	r3, #0
 800562c:	d031      	beq.n	8005692 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b08      	cmp	r3, #8
 800563a:	d110      	bne.n	800565e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2208      	movs	r2, #8
 8005642:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f8ff 	bl	8005848 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2208      	movs	r2, #8
 800564e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e029      	b.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800566c:	d111      	bne.n	8005692 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005676:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f8e5 	bl	8005848 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2220      	movs	r2, #32
 8005682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e00f      	b.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69da      	ldr	r2, [r3, #28]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4013      	ands	r3, r2
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	429a      	cmp	r2, r3
 80056a0:	bf0c      	ite	eq
 80056a2:	2301      	moveq	r3, #1
 80056a4:	2300      	movne	r3, #0
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	461a      	mov	r2, r3
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d0a6      	beq.n	80055fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056bc:	b480      	push	{r7}
 80056be:	b097      	sub	sp, #92	; 0x5c
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	4613      	mov	r3, r2
 80056c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	88fa      	ldrh	r2, [r7, #6]
 80056d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	88fa      	ldrh	r2, [r7, #6]
 80056dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ee:	d10e      	bne.n	800570e <UART_Start_Receive_IT+0x52>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d105      	bne.n	8005704 <UART_Start_Receive_IT+0x48>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80056fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005702:	e02d      	b.n	8005760 <UART_Start_Receive_IT+0xa4>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	22ff      	movs	r2, #255	; 0xff
 8005708:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800570c:	e028      	b.n	8005760 <UART_Start_Receive_IT+0xa4>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10d      	bne.n	8005732 <UART_Start_Receive_IT+0x76>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d104      	bne.n	8005728 <UART_Start_Receive_IT+0x6c>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	22ff      	movs	r2, #255	; 0xff
 8005722:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005726:	e01b      	b.n	8005760 <UART_Start_Receive_IT+0xa4>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	227f      	movs	r2, #127	; 0x7f
 800572c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005730:	e016      	b.n	8005760 <UART_Start_Receive_IT+0xa4>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800573a:	d10d      	bne.n	8005758 <UART_Start_Receive_IT+0x9c>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d104      	bne.n	800574e <UART_Start_Receive_IT+0x92>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	227f      	movs	r2, #127	; 0x7f
 8005748:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800574c:	e008      	b.n	8005760 <UART_Start_Receive_IT+0xa4>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	223f      	movs	r2, #63	; 0x3f
 8005752:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005756:	e003      	b.n	8005760 <UART_Start_Receive_IT+0xa4>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2222      	movs	r2, #34	; 0x22
 800576c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3308      	adds	r3, #8
 8005776:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800577a:	e853 3f00 	ldrex	r3, [r3]
 800577e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005782:	f043 0301 	orr.w	r3, r3, #1
 8005786:	657b      	str	r3, [r7, #84]	; 0x54
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3308      	adds	r3, #8
 800578e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005790:	64ba      	str	r2, [r7, #72]	; 0x48
 8005792:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005796:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005798:	e841 2300 	strex	r3, r2, [r1]
 800579c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800579e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e5      	bne.n	8005770 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ac:	d107      	bne.n	80057be <UART_Start_Receive_IT+0x102>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d103      	bne.n	80057be <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4a21      	ldr	r2, [pc, #132]	; (8005840 <UART_Start_Receive_IT+0x184>)
 80057ba:	669a      	str	r2, [r3, #104]	; 0x68
 80057bc:	e002      	b.n	80057c4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4a20      	ldr	r2, [pc, #128]	; (8005844 <UART_Start_Receive_IT+0x188>)
 80057c2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d019      	beq.n	8005800 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80057e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ea:	637b      	str	r3, [r7, #52]	; 0x34
 80057ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1e6      	bne.n	80057cc <UART_Start_Receive_IT+0x110>
 80057fe:	e018      	b.n	8005832 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	e853 3f00 	ldrex	r3, [r3]
 800580c:	613b      	str	r3, [r7, #16]
   return(result);
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f043 0320 	orr.w	r3, r3, #32
 8005814:	653b      	str	r3, [r7, #80]	; 0x50
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800581e:	623b      	str	r3, [r7, #32]
 8005820:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	69f9      	ldr	r1, [r7, #28]
 8005824:	6a3a      	ldr	r2, [r7, #32]
 8005826:	e841 2300 	strex	r3, r2, [r1]
 800582a:	61bb      	str	r3, [r7, #24]
   return(result);
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1e6      	bne.n	8005800 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	375c      	adds	r7, #92	; 0x5c
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	08005b39 	.word	0x08005b39
 8005844:	08005991 	.word	0x08005991

08005848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005848:	b480      	push	{r7}
 800584a:	b095      	sub	sp, #84	; 0x54
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005864:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586e:	643b      	str	r3, [r7, #64]	; 0x40
 8005870:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005874:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800587c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e6      	bne.n	8005850 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3308      	adds	r3, #8
 8005888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	61fb      	str	r3, [r7, #28]
   return(result);
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	f023 0301 	bic.w	r3, r3, #1
 8005898:	64bb      	str	r3, [r7, #72]	; 0x48
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3308      	adds	r3, #8
 80058a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e5      	bne.n	8005882 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d118      	bne.n	80058f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	e853 3f00 	ldrex	r3, [r3]
 80058ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f023 0310 	bic.w	r3, r3, #16
 80058d2:	647b      	str	r3, [r7, #68]	; 0x44
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058dc:	61bb      	str	r3, [r7, #24]
 80058de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	6979      	ldr	r1, [r7, #20]
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	e841 2300 	strex	r3, r2, [r1]
 80058e8:	613b      	str	r3, [r7, #16]
   return(result);
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e6      	bne.n	80058be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005904:	bf00      	nop
 8005906:	3754      	adds	r7, #84	; 0x54
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f7ff fbc6 	bl	80050c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b088      	sub	sp, #32
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	60bb      	str	r3, [r7, #8]
   return(result);
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005958:	61fb      	str	r3, [r7, #28]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	61bb      	str	r3, [r7, #24]
 8005964:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	6979      	ldr	r1, [r7, #20]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	613b      	str	r3, [r7, #16]
   return(result);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e6      	bne.n	8005944 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff fb92 	bl	80050ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005988:	bf00      	nop
 800598a:	3720      	adds	r7, #32
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b09c      	sub	sp, #112	; 0x70
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800599e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059a8:	2b22      	cmp	r3, #34	; 0x22
 80059aa:	f040 80b9 	bne.w	8005b20 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80059b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80059b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80059bc:	b2d9      	uxtb	r1, r3
 80059be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c8:	400a      	ands	r2, r1
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f040 809c 	bne.w	8005b30 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a00:	e853 3f00 	ldrex	r3, [r3]
 8005a04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a16:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e6      	bne.n	80059f8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3308      	adds	r3, #8
 8005a30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a34:	e853 3f00 	ldrex	r3, [r3]
 8005a38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3c:	f023 0301 	bic.w	r3, r3, #1
 8005a40:	667b      	str	r3, [r7, #100]	; 0x64
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3308      	adds	r3, #8
 8005a48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a4a:	647a      	str	r2, [r7, #68]	; 0x44
 8005a4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e5      	bne.n	8005a2a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d018      	beq.n	8005ab2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	e853 3f00 	ldrex	r3, [r3]
 8005a8c:	623b      	str	r3, [r7, #32]
   return(result);
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a94:	663b      	str	r3, [r7, #96]	; 0x60
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a9e:	633b      	str	r3, [r7, #48]	; 0x30
 8005aa0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa6:	e841 2300 	strex	r3, r2, [r1]
 8005aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1e6      	bne.n	8005a80 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d12e      	bne.n	8005b18 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f023 0310 	bic.w	r3, r3, #16
 8005ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ade:	61fb      	str	r3, [r7, #28]
 8005ae0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	69b9      	ldr	r1, [r7, #24]
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	617b      	str	r3, [r7, #20]
   return(result);
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e6      	bne.n	8005ac0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	f003 0310 	and.w	r3, r3, #16
 8005afc:	2b10      	cmp	r3, #16
 8005afe:	d103      	bne.n	8005b08 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2210      	movs	r2, #16
 8005b06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b0e:	4619      	mov	r1, r3
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff fadf 	bl	80050d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b16:	e00b      	b.n	8005b30 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7fb f91b 	bl	8000d54 <HAL_UART_RxCpltCallback>
}
 8005b1e:	e007      	b.n	8005b30 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0208 	orr.w	r2, r2, #8
 8005b2e:	619a      	str	r2, [r3, #24]
}
 8005b30:	bf00      	nop
 8005b32:	3770      	adds	r7, #112	; 0x70
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b09c      	sub	sp, #112	; 0x70
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b46:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b50:	2b22      	cmp	r3, #34	; 0x22
 8005b52:	f040 80b9 	bne.w	8005cc8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005b5c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b64:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005b66:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005b6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005b6e:	4013      	ands	r3, r2
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b74:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b7a:	1c9a      	adds	r2, r3, #2
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f040 809c 	bne.w	8005cd8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ba8:	e853 3f00 	ldrex	r3, [r3]
 8005bac:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bb4:	667b      	str	r3, [r7, #100]	; 0x64
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bbe:	657b      	str	r3, [r7, #84]	; 0x54
 8005bc0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005bc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e6      	bne.n	8005ba0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	f023 0301 	bic.w	r3, r3, #1
 8005be8:	663b      	str	r3, [r7, #96]	; 0x60
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3308      	adds	r3, #8
 8005bf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bf2:	643a      	str	r2, [r7, #64]	; 0x40
 8005bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bfa:	e841 2300 	strex	r3, r2, [r1]
 8005bfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1e5      	bne.n	8005bd2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d018      	beq.n	8005c5a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c48:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e6      	bne.n	8005c28 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d12e      	bne.n	8005cc0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	f023 0310 	bic.w	r3, r3, #16
 8005c7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	461a      	mov	r2, r3
 8005c84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c86:	61bb      	str	r3, [r7, #24]
 8005c88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	6979      	ldr	r1, [r7, #20]
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	613b      	str	r3, [r7, #16]
   return(result);
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e6      	bne.n	8005c68 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	f003 0310 	and.w	r3, r3, #16
 8005ca4:	2b10      	cmp	r3, #16
 8005ca6:	d103      	bne.n	8005cb0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2210      	movs	r2, #16
 8005cae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff fa0b 	bl	80050d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cbe:	e00b      	b.n	8005cd8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7fb f847 	bl	8000d54 <HAL_UART_RxCpltCallback>
}
 8005cc6:	e007      	b.n	8005cd8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699a      	ldr	r2, [r3, #24]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f042 0208 	orr.w	r2, r2, #8
 8005cd6:	619a      	str	r2, [r3, #24]
}
 8005cd8:	bf00      	nop
 8005cda:	3770      	adds	r7, #112	; 0x70
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	0000      	movs	r0, r0
	...

08005cf8 <cos>:
 8005cf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005cfa:	ec53 2b10 	vmov	r2, r3, d0
 8005cfe:	4826      	ldr	r0, [pc, #152]	; (8005d98 <cos+0xa0>)
 8005d00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005d04:	4281      	cmp	r1, r0
 8005d06:	dc06      	bgt.n	8005d16 <cos+0x1e>
 8005d08:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005d90 <cos+0x98>
 8005d0c:	b005      	add	sp, #20
 8005d0e:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d12:	f000 b89d 	b.w	8005e50 <__kernel_cos>
 8005d16:	4821      	ldr	r0, [pc, #132]	; (8005d9c <cos+0xa4>)
 8005d18:	4281      	cmp	r1, r0
 8005d1a:	dd09      	ble.n	8005d30 <cos+0x38>
 8005d1c:	ee10 0a10 	vmov	r0, s0
 8005d20:	4619      	mov	r1, r3
 8005d22:	f7fa fac1 	bl	80002a8 <__aeabi_dsub>
 8005d26:	ec41 0b10 	vmov	d0, r0, r1
 8005d2a:	b005      	add	sp, #20
 8005d2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d30:	4668      	mov	r0, sp
 8005d32:	f000 fa15 	bl	8006160 <__ieee754_rem_pio2>
 8005d36:	f000 0003 	and.w	r0, r0, #3
 8005d3a:	2801      	cmp	r0, #1
 8005d3c:	d00b      	beq.n	8005d56 <cos+0x5e>
 8005d3e:	2802      	cmp	r0, #2
 8005d40:	d016      	beq.n	8005d70 <cos+0x78>
 8005d42:	b9e0      	cbnz	r0, 8005d7e <cos+0x86>
 8005d44:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005d48:	ed9d 0b00 	vldr	d0, [sp]
 8005d4c:	f000 f880 	bl	8005e50 <__kernel_cos>
 8005d50:	ec51 0b10 	vmov	r0, r1, d0
 8005d54:	e7e7      	b.n	8005d26 <cos+0x2e>
 8005d56:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005d5a:	ed9d 0b00 	vldr	d0, [sp]
 8005d5e:	f000 f93f 	bl	8005fe0 <__kernel_sin>
 8005d62:	ec53 2b10 	vmov	r2, r3, d0
 8005d66:	ee10 0a10 	vmov	r0, s0
 8005d6a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005d6e:	e7da      	b.n	8005d26 <cos+0x2e>
 8005d70:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005d74:	ed9d 0b00 	vldr	d0, [sp]
 8005d78:	f000 f86a 	bl	8005e50 <__kernel_cos>
 8005d7c:	e7f1      	b.n	8005d62 <cos+0x6a>
 8005d7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005d82:	ed9d 0b00 	vldr	d0, [sp]
 8005d86:	2001      	movs	r0, #1
 8005d88:	f000 f92a 	bl	8005fe0 <__kernel_sin>
 8005d8c:	e7e0      	b.n	8005d50 <cos+0x58>
 8005d8e:	bf00      	nop
	...
 8005d98:	3fe921fb 	.word	0x3fe921fb
 8005d9c:	7fefffff 	.word	0x7fefffff

08005da0 <sin>:
 8005da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005da2:	ec53 2b10 	vmov	r2, r3, d0
 8005da6:	4828      	ldr	r0, [pc, #160]	; (8005e48 <sin+0xa8>)
 8005da8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005dac:	4281      	cmp	r1, r0
 8005dae:	dc07      	bgt.n	8005dc0 <sin+0x20>
 8005db0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005e40 <sin+0xa0>
 8005db4:	2000      	movs	r0, #0
 8005db6:	b005      	add	sp, #20
 8005db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dbc:	f000 b910 	b.w	8005fe0 <__kernel_sin>
 8005dc0:	4822      	ldr	r0, [pc, #136]	; (8005e4c <sin+0xac>)
 8005dc2:	4281      	cmp	r1, r0
 8005dc4:	dd09      	ble.n	8005dda <sin+0x3a>
 8005dc6:	ee10 0a10 	vmov	r0, s0
 8005dca:	4619      	mov	r1, r3
 8005dcc:	f7fa fa6c 	bl	80002a8 <__aeabi_dsub>
 8005dd0:	ec41 0b10 	vmov	d0, r0, r1
 8005dd4:	b005      	add	sp, #20
 8005dd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8005dda:	4668      	mov	r0, sp
 8005ddc:	f000 f9c0 	bl	8006160 <__ieee754_rem_pio2>
 8005de0:	f000 0003 	and.w	r0, r0, #3
 8005de4:	2801      	cmp	r0, #1
 8005de6:	d00c      	beq.n	8005e02 <sin+0x62>
 8005de8:	2802      	cmp	r0, #2
 8005dea:	d011      	beq.n	8005e10 <sin+0x70>
 8005dec:	b9f0      	cbnz	r0, 8005e2c <sin+0x8c>
 8005dee:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005df2:	ed9d 0b00 	vldr	d0, [sp]
 8005df6:	2001      	movs	r0, #1
 8005df8:	f000 f8f2 	bl	8005fe0 <__kernel_sin>
 8005dfc:	ec51 0b10 	vmov	r0, r1, d0
 8005e00:	e7e6      	b.n	8005dd0 <sin+0x30>
 8005e02:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005e06:	ed9d 0b00 	vldr	d0, [sp]
 8005e0a:	f000 f821 	bl	8005e50 <__kernel_cos>
 8005e0e:	e7f5      	b.n	8005dfc <sin+0x5c>
 8005e10:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005e14:	ed9d 0b00 	vldr	d0, [sp]
 8005e18:	2001      	movs	r0, #1
 8005e1a:	f000 f8e1 	bl	8005fe0 <__kernel_sin>
 8005e1e:	ec53 2b10 	vmov	r2, r3, d0
 8005e22:	ee10 0a10 	vmov	r0, s0
 8005e26:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005e2a:	e7d1      	b.n	8005dd0 <sin+0x30>
 8005e2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005e30:	ed9d 0b00 	vldr	d0, [sp]
 8005e34:	f000 f80c 	bl	8005e50 <__kernel_cos>
 8005e38:	e7f1      	b.n	8005e1e <sin+0x7e>
 8005e3a:	bf00      	nop
 8005e3c:	f3af 8000 	nop.w
	...
 8005e48:	3fe921fb 	.word	0x3fe921fb
 8005e4c:	7fefffff 	.word	0x7fefffff

08005e50 <__kernel_cos>:
 8005e50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e54:	ec57 6b10 	vmov	r6, r7, d0
 8005e58:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005e5c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005e60:	ed8d 1b00 	vstr	d1, [sp]
 8005e64:	da07      	bge.n	8005e76 <__kernel_cos+0x26>
 8005e66:	ee10 0a10 	vmov	r0, s0
 8005e6a:	4639      	mov	r1, r7
 8005e6c:	f7fa fe84 	bl	8000b78 <__aeabi_d2iz>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	f000 8088 	beq.w	8005f86 <__kernel_cos+0x136>
 8005e76:	4632      	mov	r2, r6
 8005e78:	463b      	mov	r3, r7
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	4639      	mov	r1, r7
 8005e7e:	f7fa fbcb 	bl	8000618 <__aeabi_dmul>
 8005e82:	4b51      	ldr	r3, [pc, #324]	; (8005fc8 <__kernel_cos+0x178>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	4604      	mov	r4, r0
 8005e88:	460d      	mov	r5, r1
 8005e8a:	f7fa fbc5 	bl	8000618 <__aeabi_dmul>
 8005e8e:	a340      	add	r3, pc, #256	; (adr r3, 8005f90 <__kernel_cos+0x140>)
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	4682      	mov	sl, r0
 8005e96:	468b      	mov	fp, r1
 8005e98:	4620      	mov	r0, r4
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	f7fa fbbc 	bl	8000618 <__aeabi_dmul>
 8005ea0:	a33d      	add	r3, pc, #244	; (adr r3, 8005f98 <__kernel_cos+0x148>)
 8005ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea6:	f7fa fa01 	bl	80002ac <__adddf3>
 8005eaa:	4622      	mov	r2, r4
 8005eac:	462b      	mov	r3, r5
 8005eae:	f7fa fbb3 	bl	8000618 <__aeabi_dmul>
 8005eb2:	a33b      	add	r3, pc, #236	; (adr r3, 8005fa0 <__kernel_cos+0x150>)
 8005eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb8:	f7fa f9f6 	bl	80002a8 <__aeabi_dsub>
 8005ebc:	4622      	mov	r2, r4
 8005ebe:	462b      	mov	r3, r5
 8005ec0:	f7fa fbaa 	bl	8000618 <__aeabi_dmul>
 8005ec4:	a338      	add	r3, pc, #224	; (adr r3, 8005fa8 <__kernel_cos+0x158>)
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f7fa f9ef 	bl	80002ac <__adddf3>
 8005ece:	4622      	mov	r2, r4
 8005ed0:	462b      	mov	r3, r5
 8005ed2:	f7fa fba1 	bl	8000618 <__aeabi_dmul>
 8005ed6:	a336      	add	r3, pc, #216	; (adr r3, 8005fb0 <__kernel_cos+0x160>)
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	f7fa f9e4 	bl	80002a8 <__aeabi_dsub>
 8005ee0:	4622      	mov	r2, r4
 8005ee2:	462b      	mov	r3, r5
 8005ee4:	f7fa fb98 	bl	8000618 <__aeabi_dmul>
 8005ee8:	a333      	add	r3, pc, #204	; (adr r3, 8005fb8 <__kernel_cos+0x168>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f7fa f9dd 	bl	80002ac <__adddf3>
 8005ef2:	4622      	mov	r2, r4
 8005ef4:	462b      	mov	r3, r5
 8005ef6:	f7fa fb8f 	bl	8000618 <__aeabi_dmul>
 8005efa:	4622      	mov	r2, r4
 8005efc:	462b      	mov	r3, r5
 8005efe:	f7fa fb8b 	bl	8000618 <__aeabi_dmul>
 8005f02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f06:	4604      	mov	r4, r0
 8005f08:	460d      	mov	r5, r1
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	4639      	mov	r1, r7
 8005f0e:	f7fa fb83 	bl	8000618 <__aeabi_dmul>
 8005f12:	460b      	mov	r3, r1
 8005f14:	4602      	mov	r2, r0
 8005f16:	4629      	mov	r1, r5
 8005f18:	4620      	mov	r0, r4
 8005f1a:	f7fa f9c5 	bl	80002a8 <__aeabi_dsub>
 8005f1e:	4b2b      	ldr	r3, [pc, #172]	; (8005fcc <__kernel_cos+0x17c>)
 8005f20:	4598      	cmp	r8, r3
 8005f22:	4606      	mov	r6, r0
 8005f24:	460f      	mov	r7, r1
 8005f26:	dc10      	bgt.n	8005f4a <__kernel_cos+0xfa>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4650      	mov	r0, sl
 8005f2e:	4659      	mov	r1, fp
 8005f30:	f7fa f9ba 	bl	80002a8 <__aeabi_dsub>
 8005f34:	460b      	mov	r3, r1
 8005f36:	4926      	ldr	r1, [pc, #152]	; (8005fd0 <__kernel_cos+0x180>)
 8005f38:	4602      	mov	r2, r0
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	f7fa f9b4 	bl	80002a8 <__aeabi_dsub>
 8005f40:	ec41 0b10 	vmov	d0, r0, r1
 8005f44:	b003      	add	sp, #12
 8005f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f4a:	4b22      	ldr	r3, [pc, #136]	; (8005fd4 <__kernel_cos+0x184>)
 8005f4c:	4920      	ldr	r1, [pc, #128]	; (8005fd0 <__kernel_cos+0x180>)
 8005f4e:	4598      	cmp	r8, r3
 8005f50:	bfcc      	ite	gt
 8005f52:	4d21      	ldrgt	r5, [pc, #132]	; (8005fd8 <__kernel_cos+0x188>)
 8005f54:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005f58:	2400      	movs	r4, #0
 8005f5a:	4622      	mov	r2, r4
 8005f5c:	462b      	mov	r3, r5
 8005f5e:	2000      	movs	r0, #0
 8005f60:	f7fa f9a2 	bl	80002a8 <__aeabi_dsub>
 8005f64:	4622      	mov	r2, r4
 8005f66:	4680      	mov	r8, r0
 8005f68:	4689      	mov	r9, r1
 8005f6a:	462b      	mov	r3, r5
 8005f6c:	4650      	mov	r0, sl
 8005f6e:	4659      	mov	r1, fp
 8005f70:	f7fa f99a 	bl	80002a8 <__aeabi_dsub>
 8005f74:	4632      	mov	r2, r6
 8005f76:	463b      	mov	r3, r7
 8005f78:	f7fa f996 	bl	80002a8 <__aeabi_dsub>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4640      	mov	r0, r8
 8005f82:	4649      	mov	r1, r9
 8005f84:	e7da      	b.n	8005f3c <__kernel_cos+0xec>
 8005f86:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005fc0 <__kernel_cos+0x170>
 8005f8a:	e7db      	b.n	8005f44 <__kernel_cos+0xf4>
 8005f8c:	f3af 8000 	nop.w
 8005f90:	be8838d4 	.word	0xbe8838d4
 8005f94:	bda8fae9 	.word	0xbda8fae9
 8005f98:	bdb4b1c4 	.word	0xbdb4b1c4
 8005f9c:	3e21ee9e 	.word	0x3e21ee9e
 8005fa0:	809c52ad 	.word	0x809c52ad
 8005fa4:	3e927e4f 	.word	0x3e927e4f
 8005fa8:	19cb1590 	.word	0x19cb1590
 8005fac:	3efa01a0 	.word	0x3efa01a0
 8005fb0:	16c15177 	.word	0x16c15177
 8005fb4:	3f56c16c 	.word	0x3f56c16c
 8005fb8:	5555554c 	.word	0x5555554c
 8005fbc:	3fa55555 	.word	0x3fa55555
 8005fc0:	00000000 	.word	0x00000000
 8005fc4:	3ff00000 	.word	0x3ff00000
 8005fc8:	3fe00000 	.word	0x3fe00000
 8005fcc:	3fd33332 	.word	0x3fd33332
 8005fd0:	3ff00000 	.word	0x3ff00000
 8005fd4:	3fe90000 	.word	0x3fe90000
 8005fd8:	3fd20000 	.word	0x3fd20000
 8005fdc:	00000000 	.word	0x00000000

08005fe0 <__kernel_sin>:
 8005fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe4:	ed2d 8b04 	vpush	{d8-d9}
 8005fe8:	eeb0 8a41 	vmov.f32	s16, s2
 8005fec:	eef0 8a61 	vmov.f32	s17, s3
 8005ff0:	ec55 4b10 	vmov	r4, r5, d0
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005ffa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005ffe:	9001      	str	r0, [sp, #4]
 8006000:	da06      	bge.n	8006010 <__kernel_sin+0x30>
 8006002:	ee10 0a10 	vmov	r0, s0
 8006006:	4629      	mov	r1, r5
 8006008:	f7fa fdb6 	bl	8000b78 <__aeabi_d2iz>
 800600c:	2800      	cmp	r0, #0
 800600e:	d051      	beq.n	80060b4 <__kernel_sin+0xd4>
 8006010:	4622      	mov	r2, r4
 8006012:	462b      	mov	r3, r5
 8006014:	4620      	mov	r0, r4
 8006016:	4629      	mov	r1, r5
 8006018:	f7fa fafe 	bl	8000618 <__aeabi_dmul>
 800601c:	4682      	mov	sl, r0
 800601e:	468b      	mov	fp, r1
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	4620      	mov	r0, r4
 8006026:	4629      	mov	r1, r5
 8006028:	f7fa faf6 	bl	8000618 <__aeabi_dmul>
 800602c:	a341      	add	r3, pc, #260	; (adr r3, 8006134 <__kernel_sin+0x154>)
 800602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006032:	4680      	mov	r8, r0
 8006034:	4689      	mov	r9, r1
 8006036:	4650      	mov	r0, sl
 8006038:	4659      	mov	r1, fp
 800603a:	f7fa faed 	bl	8000618 <__aeabi_dmul>
 800603e:	a33f      	add	r3, pc, #252	; (adr r3, 800613c <__kernel_sin+0x15c>)
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	f7fa f930 	bl	80002a8 <__aeabi_dsub>
 8006048:	4652      	mov	r2, sl
 800604a:	465b      	mov	r3, fp
 800604c:	f7fa fae4 	bl	8000618 <__aeabi_dmul>
 8006050:	a33c      	add	r3, pc, #240	; (adr r3, 8006144 <__kernel_sin+0x164>)
 8006052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006056:	f7fa f929 	bl	80002ac <__adddf3>
 800605a:	4652      	mov	r2, sl
 800605c:	465b      	mov	r3, fp
 800605e:	f7fa fadb 	bl	8000618 <__aeabi_dmul>
 8006062:	a33a      	add	r3, pc, #232	; (adr r3, 800614c <__kernel_sin+0x16c>)
 8006064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006068:	f7fa f91e 	bl	80002a8 <__aeabi_dsub>
 800606c:	4652      	mov	r2, sl
 800606e:	465b      	mov	r3, fp
 8006070:	f7fa fad2 	bl	8000618 <__aeabi_dmul>
 8006074:	a337      	add	r3, pc, #220	; (adr r3, 8006154 <__kernel_sin+0x174>)
 8006076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607a:	f7fa f917 	bl	80002ac <__adddf3>
 800607e:	9b01      	ldr	r3, [sp, #4]
 8006080:	4606      	mov	r6, r0
 8006082:	460f      	mov	r7, r1
 8006084:	b9eb      	cbnz	r3, 80060c2 <__kernel_sin+0xe2>
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	4650      	mov	r0, sl
 800608c:	4659      	mov	r1, fp
 800608e:	f7fa fac3 	bl	8000618 <__aeabi_dmul>
 8006092:	a325      	add	r3, pc, #148	; (adr r3, 8006128 <__kernel_sin+0x148>)
 8006094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006098:	f7fa f906 	bl	80002a8 <__aeabi_dsub>
 800609c:	4642      	mov	r2, r8
 800609e:	464b      	mov	r3, r9
 80060a0:	f7fa faba 	bl	8000618 <__aeabi_dmul>
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4620      	mov	r0, r4
 80060aa:	4629      	mov	r1, r5
 80060ac:	f7fa f8fe 	bl	80002ac <__adddf3>
 80060b0:	4604      	mov	r4, r0
 80060b2:	460d      	mov	r5, r1
 80060b4:	ec45 4b10 	vmov	d0, r4, r5
 80060b8:	b003      	add	sp, #12
 80060ba:	ecbd 8b04 	vpop	{d8-d9}
 80060be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c2:	4b1b      	ldr	r3, [pc, #108]	; (8006130 <__kernel_sin+0x150>)
 80060c4:	ec51 0b18 	vmov	r0, r1, d8
 80060c8:	2200      	movs	r2, #0
 80060ca:	f7fa faa5 	bl	8000618 <__aeabi_dmul>
 80060ce:	4632      	mov	r2, r6
 80060d0:	ec41 0b19 	vmov	d9, r0, r1
 80060d4:	463b      	mov	r3, r7
 80060d6:	4640      	mov	r0, r8
 80060d8:	4649      	mov	r1, r9
 80060da:	f7fa fa9d 	bl	8000618 <__aeabi_dmul>
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	ec51 0b19 	vmov	r0, r1, d9
 80060e6:	f7fa f8df 	bl	80002a8 <__aeabi_dsub>
 80060ea:	4652      	mov	r2, sl
 80060ec:	465b      	mov	r3, fp
 80060ee:	f7fa fa93 	bl	8000618 <__aeabi_dmul>
 80060f2:	ec53 2b18 	vmov	r2, r3, d8
 80060f6:	f7fa f8d7 	bl	80002a8 <__aeabi_dsub>
 80060fa:	a30b      	add	r3, pc, #44	; (adr r3, 8006128 <__kernel_sin+0x148>)
 80060fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006100:	4606      	mov	r6, r0
 8006102:	460f      	mov	r7, r1
 8006104:	4640      	mov	r0, r8
 8006106:	4649      	mov	r1, r9
 8006108:	f7fa fa86 	bl	8000618 <__aeabi_dmul>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	4630      	mov	r0, r6
 8006112:	4639      	mov	r1, r7
 8006114:	f7fa f8ca 	bl	80002ac <__adddf3>
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	4620      	mov	r0, r4
 800611e:	4629      	mov	r1, r5
 8006120:	f7fa f8c2 	bl	80002a8 <__aeabi_dsub>
 8006124:	e7c4      	b.n	80060b0 <__kernel_sin+0xd0>
 8006126:	bf00      	nop
 8006128:	55555549 	.word	0x55555549
 800612c:	3fc55555 	.word	0x3fc55555
 8006130:	3fe00000 	.word	0x3fe00000
 8006134:	5acfd57c 	.word	0x5acfd57c
 8006138:	3de5d93a 	.word	0x3de5d93a
 800613c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006140:	3e5ae5e6 	.word	0x3e5ae5e6
 8006144:	57b1fe7d 	.word	0x57b1fe7d
 8006148:	3ec71de3 	.word	0x3ec71de3
 800614c:	19c161d5 	.word	0x19c161d5
 8006150:	3f2a01a0 	.word	0x3f2a01a0
 8006154:	1110f8a6 	.word	0x1110f8a6
 8006158:	3f811111 	.word	0x3f811111
 800615c:	00000000 	.word	0x00000000

08006160 <__ieee754_rem_pio2>:
 8006160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006164:	ed2d 8b02 	vpush	{d8}
 8006168:	ec55 4b10 	vmov	r4, r5, d0
 800616c:	4bca      	ldr	r3, [pc, #808]	; (8006498 <__ieee754_rem_pio2+0x338>)
 800616e:	b08b      	sub	sp, #44	; 0x2c
 8006170:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006174:	4598      	cmp	r8, r3
 8006176:	4682      	mov	sl, r0
 8006178:	9502      	str	r5, [sp, #8]
 800617a:	dc08      	bgt.n	800618e <__ieee754_rem_pio2+0x2e>
 800617c:	2200      	movs	r2, #0
 800617e:	2300      	movs	r3, #0
 8006180:	ed80 0b00 	vstr	d0, [r0]
 8006184:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006188:	f04f 0b00 	mov.w	fp, #0
 800618c:	e028      	b.n	80061e0 <__ieee754_rem_pio2+0x80>
 800618e:	4bc3      	ldr	r3, [pc, #780]	; (800649c <__ieee754_rem_pio2+0x33c>)
 8006190:	4598      	cmp	r8, r3
 8006192:	dc78      	bgt.n	8006286 <__ieee754_rem_pio2+0x126>
 8006194:	9b02      	ldr	r3, [sp, #8]
 8006196:	4ec2      	ldr	r6, [pc, #776]	; (80064a0 <__ieee754_rem_pio2+0x340>)
 8006198:	2b00      	cmp	r3, #0
 800619a:	ee10 0a10 	vmov	r0, s0
 800619e:	a3b0      	add	r3, pc, #704	; (adr r3, 8006460 <__ieee754_rem_pio2+0x300>)
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	4629      	mov	r1, r5
 80061a6:	dd39      	ble.n	800621c <__ieee754_rem_pio2+0xbc>
 80061a8:	f7fa f87e 	bl	80002a8 <__aeabi_dsub>
 80061ac:	45b0      	cmp	r8, r6
 80061ae:	4604      	mov	r4, r0
 80061b0:	460d      	mov	r5, r1
 80061b2:	d01b      	beq.n	80061ec <__ieee754_rem_pio2+0x8c>
 80061b4:	a3ac      	add	r3, pc, #688	; (adr r3, 8006468 <__ieee754_rem_pio2+0x308>)
 80061b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ba:	f7fa f875 	bl	80002a8 <__aeabi_dsub>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	e9ca 2300 	strd	r2, r3, [sl]
 80061c6:	4620      	mov	r0, r4
 80061c8:	4629      	mov	r1, r5
 80061ca:	f7fa f86d 	bl	80002a8 <__aeabi_dsub>
 80061ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8006468 <__ieee754_rem_pio2+0x308>)
 80061d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d4:	f7fa f868 	bl	80002a8 <__aeabi_dsub>
 80061d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80061dc:	f04f 0b01 	mov.w	fp, #1
 80061e0:	4658      	mov	r0, fp
 80061e2:	b00b      	add	sp, #44	; 0x2c
 80061e4:	ecbd 8b02 	vpop	{d8}
 80061e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ec:	a3a0      	add	r3, pc, #640	; (adr r3, 8006470 <__ieee754_rem_pio2+0x310>)
 80061ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f2:	f7fa f859 	bl	80002a8 <__aeabi_dsub>
 80061f6:	a3a0      	add	r3, pc, #640	; (adr r3, 8006478 <__ieee754_rem_pio2+0x318>)
 80061f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fc:	4604      	mov	r4, r0
 80061fe:	460d      	mov	r5, r1
 8006200:	f7fa f852 	bl	80002a8 <__aeabi_dsub>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	e9ca 2300 	strd	r2, r3, [sl]
 800620c:	4620      	mov	r0, r4
 800620e:	4629      	mov	r1, r5
 8006210:	f7fa f84a 	bl	80002a8 <__aeabi_dsub>
 8006214:	a398      	add	r3, pc, #608	; (adr r3, 8006478 <__ieee754_rem_pio2+0x318>)
 8006216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621a:	e7db      	b.n	80061d4 <__ieee754_rem_pio2+0x74>
 800621c:	f7fa f846 	bl	80002ac <__adddf3>
 8006220:	45b0      	cmp	r8, r6
 8006222:	4604      	mov	r4, r0
 8006224:	460d      	mov	r5, r1
 8006226:	d016      	beq.n	8006256 <__ieee754_rem_pio2+0xf6>
 8006228:	a38f      	add	r3, pc, #572	; (adr r3, 8006468 <__ieee754_rem_pio2+0x308>)
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	f7fa f83d 	bl	80002ac <__adddf3>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	e9ca 2300 	strd	r2, r3, [sl]
 800623a:	4620      	mov	r0, r4
 800623c:	4629      	mov	r1, r5
 800623e:	f7fa f833 	bl	80002a8 <__aeabi_dsub>
 8006242:	a389      	add	r3, pc, #548	; (adr r3, 8006468 <__ieee754_rem_pio2+0x308>)
 8006244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006248:	f7fa f830 	bl	80002ac <__adddf3>
 800624c:	f04f 3bff 	mov.w	fp, #4294967295
 8006250:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006254:	e7c4      	b.n	80061e0 <__ieee754_rem_pio2+0x80>
 8006256:	a386      	add	r3, pc, #536	; (adr r3, 8006470 <__ieee754_rem_pio2+0x310>)
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f7fa f826 	bl	80002ac <__adddf3>
 8006260:	a385      	add	r3, pc, #532	; (adr r3, 8006478 <__ieee754_rem_pio2+0x318>)
 8006262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006266:	4604      	mov	r4, r0
 8006268:	460d      	mov	r5, r1
 800626a:	f7fa f81f 	bl	80002ac <__adddf3>
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	e9ca 2300 	strd	r2, r3, [sl]
 8006276:	4620      	mov	r0, r4
 8006278:	4629      	mov	r1, r5
 800627a:	f7fa f815 	bl	80002a8 <__aeabi_dsub>
 800627e:	a37e      	add	r3, pc, #504	; (adr r3, 8006478 <__ieee754_rem_pio2+0x318>)
 8006280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006284:	e7e0      	b.n	8006248 <__ieee754_rem_pio2+0xe8>
 8006286:	4b87      	ldr	r3, [pc, #540]	; (80064a4 <__ieee754_rem_pio2+0x344>)
 8006288:	4598      	cmp	r8, r3
 800628a:	f300 80d8 	bgt.w	800643e <__ieee754_rem_pio2+0x2de>
 800628e:	f000 f96d 	bl	800656c <fabs>
 8006292:	ec55 4b10 	vmov	r4, r5, d0
 8006296:	ee10 0a10 	vmov	r0, s0
 800629a:	a379      	add	r3, pc, #484	; (adr r3, 8006480 <__ieee754_rem_pio2+0x320>)
 800629c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a0:	4629      	mov	r1, r5
 80062a2:	f7fa f9b9 	bl	8000618 <__aeabi_dmul>
 80062a6:	4b80      	ldr	r3, [pc, #512]	; (80064a8 <__ieee754_rem_pio2+0x348>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	f7f9 ffff 	bl	80002ac <__adddf3>
 80062ae:	f7fa fc63 	bl	8000b78 <__aeabi_d2iz>
 80062b2:	4683      	mov	fp, r0
 80062b4:	f7fa f946 	bl	8000544 <__aeabi_i2d>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	ec43 2b18 	vmov	d8, r2, r3
 80062c0:	a367      	add	r3, pc, #412	; (adr r3, 8006460 <__ieee754_rem_pio2+0x300>)
 80062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c6:	f7fa f9a7 	bl	8000618 <__aeabi_dmul>
 80062ca:	4602      	mov	r2, r0
 80062cc:	460b      	mov	r3, r1
 80062ce:	4620      	mov	r0, r4
 80062d0:	4629      	mov	r1, r5
 80062d2:	f7f9 ffe9 	bl	80002a8 <__aeabi_dsub>
 80062d6:	a364      	add	r3, pc, #400	; (adr r3, 8006468 <__ieee754_rem_pio2+0x308>)
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	4606      	mov	r6, r0
 80062de:	460f      	mov	r7, r1
 80062e0:	ec51 0b18 	vmov	r0, r1, d8
 80062e4:	f7fa f998 	bl	8000618 <__aeabi_dmul>
 80062e8:	f1bb 0f1f 	cmp.w	fp, #31
 80062ec:	4604      	mov	r4, r0
 80062ee:	460d      	mov	r5, r1
 80062f0:	dc0d      	bgt.n	800630e <__ieee754_rem_pio2+0x1ae>
 80062f2:	4b6e      	ldr	r3, [pc, #440]	; (80064ac <__ieee754_rem_pio2+0x34c>)
 80062f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80062f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fc:	4543      	cmp	r3, r8
 80062fe:	d006      	beq.n	800630e <__ieee754_rem_pio2+0x1ae>
 8006300:	4622      	mov	r2, r4
 8006302:	462b      	mov	r3, r5
 8006304:	4630      	mov	r0, r6
 8006306:	4639      	mov	r1, r7
 8006308:	f7f9 ffce 	bl	80002a8 <__aeabi_dsub>
 800630c:	e00e      	b.n	800632c <__ieee754_rem_pio2+0x1cc>
 800630e:	462b      	mov	r3, r5
 8006310:	4622      	mov	r2, r4
 8006312:	4630      	mov	r0, r6
 8006314:	4639      	mov	r1, r7
 8006316:	f7f9 ffc7 	bl	80002a8 <__aeabi_dsub>
 800631a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800631e:	9303      	str	r3, [sp, #12]
 8006320:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006324:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006328:	2b10      	cmp	r3, #16
 800632a:	dc02      	bgt.n	8006332 <__ieee754_rem_pio2+0x1d2>
 800632c:	e9ca 0100 	strd	r0, r1, [sl]
 8006330:	e039      	b.n	80063a6 <__ieee754_rem_pio2+0x246>
 8006332:	a34f      	add	r3, pc, #316	; (adr r3, 8006470 <__ieee754_rem_pio2+0x310>)
 8006334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006338:	ec51 0b18 	vmov	r0, r1, d8
 800633c:	f7fa f96c 	bl	8000618 <__aeabi_dmul>
 8006340:	4604      	mov	r4, r0
 8006342:	460d      	mov	r5, r1
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4630      	mov	r0, r6
 800634a:	4639      	mov	r1, r7
 800634c:	f7f9 ffac 	bl	80002a8 <__aeabi_dsub>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4680      	mov	r8, r0
 8006356:	4689      	mov	r9, r1
 8006358:	4630      	mov	r0, r6
 800635a:	4639      	mov	r1, r7
 800635c:	f7f9 ffa4 	bl	80002a8 <__aeabi_dsub>
 8006360:	4622      	mov	r2, r4
 8006362:	462b      	mov	r3, r5
 8006364:	f7f9 ffa0 	bl	80002a8 <__aeabi_dsub>
 8006368:	a343      	add	r3, pc, #268	; (adr r3, 8006478 <__ieee754_rem_pio2+0x318>)
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	4604      	mov	r4, r0
 8006370:	460d      	mov	r5, r1
 8006372:	ec51 0b18 	vmov	r0, r1, d8
 8006376:	f7fa f94f 	bl	8000618 <__aeabi_dmul>
 800637a:	4622      	mov	r2, r4
 800637c:	462b      	mov	r3, r5
 800637e:	f7f9 ff93 	bl	80002a8 <__aeabi_dsub>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4604      	mov	r4, r0
 8006388:	460d      	mov	r5, r1
 800638a:	4640      	mov	r0, r8
 800638c:	4649      	mov	r1, r9
 800638e:	f7f9 ff8b 	bl	80002a8 <__aeabi_dsub>
 8006392:	9a03      	ldr	r2, [sp, #12]
 8006394:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b31      	cmp	r3, #49	; 0x31
 800639c:	dc24      	bgt.n	80063e8 <__ieee754_rem_pio2+0x288>
 800639e:	e9ca 0100 	strd	r0, r1, [sl]
 80063a2:	4646      	mov	r6, r8
 80063a4:	464f      	mov	r7, r9
 80063a6:	e9da 8900 	ldrd	r8, r9, [sl]
 80063aa:	4630      	mov	r0, r6
 80063ac:	4642      	mov	r2, r8
 80063ae:	464b      	mov	r3, r9
 80063b0:	4639      	mov	r1, r7
 80063b2:	f7f9 ff79 	bl	80002a8 <__aeabi_dsub>
 80063b6:	462b      	mov	r3, r5
 80063b8:	4622      	mov	r2, r4
 80063ba:	f7f9 ff75 	bl	80002a8 <__aeabi_dsub>
 80063be:	9b02      	ldr	r3, [sp, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80063c6:	f6bf af0b 	bge.w	80061e0 <__ieee754_rem_pio2+0x80>
 80063ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80063ce:	f8ca 3004 	str.w	r3, [sl, #4]
 80063d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063d6:	f8ca 8000 	str.w	r8, [sl]
 80063da:	f8ca 0008 	str.w	r0, [sl, #8]
 80063de:	f8ca 300c 	str.w	r3, [sl, #12]
 80063e2:	f1cb 0b00 	rsb	fp, fp, #0
 80063e6:	e6fb      	b.n	80061e0 <__ieee754_rem_pio2+0x80>
 80063e8:	a327      	add	r3, pc, #156	; (adr r3, 8006488 <__ieee754_rem_pio2+0x328>)
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	ec51 0b18 	vmov	r0, r1, d8
 80063f2:	f7fa f911 	bl	8000618 <__aeabi_dmul>
 80063f6:	4604      	mov	r4, r0
 80063f8:	460d      	mov	r5, r1
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	4640      	mov	r0, r8
 8006400:	4649      	mov	r1, r9
 8006402:	f7f9 ff51 	bl	80002a8 <__aeabi_dsub>
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	4606      	mov	r6, r0
 800640c:	460f      	mov	r7, r1
 800640e:	4640      	mov	r0, r8
 8006410:	4649      	mov	r1, r9
 8006412:	f7f9 ff49 	bl	80002a8 <__aeabi_dsub>
 8006416:	4622      	mov	r2, r4
 8006418:	462b      	mov	r3, r5
 800641a:	f7f9 ff45 	bl	80002a8 <__aeabi_dsub>
 800641e:	a31c      	add	r3, pc, #112	; (adr r3, 8006490 <__ieee754_rem_pio2+0x330>)
 8006420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006424:	4604      	mov	r4, r0
 8006426:	460d      	mov	r5, r1
 8006428:	ec51 0b18 	vmov	r0, r1, d8
 800642c:	f7fa f8f4 	bl	8000618 <__aeabi_dmul>
 8006430:	4622      	mov	r2, r4
 8006432:	462b      	mov	r3, r5
 8006434:	f7f9 ff38 	bl	80002a8 <__aeabi_dsub>
 8006438:	4604      	mov	r4, r0
 800643a:	460d      	mov	r5, r1
 800643c:	e760      	b.n	8006300 <__ieee754_rem_pio2+0x1a0>
 800643e:	4b1c      	ldr	r3, [pc, #112]	; (80064b0 <__ieee754_rem_pio2+0x350>)
 8006440:	4598      	cmp	r8, r3
 8006442:	dd37      	ble.n	80064b4 <__ieee754_rem_pio2+0x354>
 8006444:	ee10 2a10 	vmov	r2, s0
 8006448:	462b      	mov	r3, r5
 800644a:	4620      	mov	r0, r4
 800644c:	4629      	mov	r1, r5
 800644e:	f7f9 ff2b 	bl	80002a8 <__aeabi_dsub>
 8006452:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006456:	e9ca 0100 	strd	r0, r1, [sl]
 800645a:	e695      	b.n	8006188 <__ieee754_rem_pio2+0x28>
 800645c:	f3af 8000 	nop.w
 8006460:	54400000 	.word	0x54400000
 8006464:	3ff921fb 	.word	0x3ff921fb
 8006468:	1a626331 	.word	0x1a626331
 800646c:	3dd0b461 	.word	0x3dd0b461
 8006470:	1a600000 	.word	0x1a600000
 8006474:	3dd0b461 	.word	0x3dd0b461
 8006478:	2e037073 	.word	0x2e037073
 800647c:	3ba3198a 	.word	0x3ba3198a
 8006480:	6dc9c883 	.word	0x6dc9c883
 8006484:	3fe45f30 	.word	0x3fe45f30
 8006488:	2e000000 	.word	0x2e000000
 800648c:	3ba3198a 	.word	0x3ba3198a
 8006490:	252049c1 	.word	0x252049c1
 8006494:	397b839a 	.word	0x397b839a
 8006498:	3fe921fb 	.word	0x3fe921fb
 800649c:	4002d97b 	.word	0x4002d97b
 80064a0:	3ff921fb 	.word	0x3ff921fb
 80064a4:	413921fb 	.word	0x413921fb
 80064a8:	3fe00000 	.word	0x3fe00000
 80064ac:	0800b334 	.word	0x0800b334
 80064b0:	7fefffff 	.word	0x7fefffff
 80064b4:	ea4f 5628 	mov.w	r6, r8, asr #20
 80064b8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80064bc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80064c0:	4620      	mov	r0, r4
 80064c2:	460d      	mov	r5, r1
 80064c4:	f7fa fb58 	bl	8000b78 <__aeabi_d2iz>
 80064c8:	f7fa f83c 	bl	8000544 <__aeabi_i2d>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4620      	mov	r0, r4
 80064d2:	4629      	mov	r1, r5
 80064d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064d8:	f7f9 fee6 	bl	80002a8 <__aeabi_dsub>
 80064dc:	4b21      	ldr	r3, [pc, #132]	; (8006564 <__ieee754_rem_pio2+0x404>)
 80064de:	2200      	movs	r2, #0
 80064e0:	f7fa f89a 	bl	8000618 <__aeabi_dmul>
 80064e4:	460d      	mov	r5, r1
 80064e6:	4604      	mov	r4, r0
 80064e8:	f7fa fb46 	bl	8000b78 <__aeabi_d2iz>
 80064ec:	f7fa f82a 	bl	8000544 <__aeabi_i2d>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4620      	mov	r0, r4
 80064f6:	4629      	mov	r1, r5
 80064f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80064fc:	f7f9 fed4 	bl	80002a8 <__aeabi_dsub>
 8006500:	4b18      	ldr	r3, [pc, #96]	; (8006564 <__ieee754_rem_pio2+0x404>)
 8006502:	2200      	movs	r2, #0
 8006504:	f7fa f888 	bl	8000618 <__aeabi_dmul>
 8006508:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800650c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006510:	2703      	movs	r7, #3
 8006512:	2400      	movs	r4, #0
 8006514:	2500      	movs	r5, #0
 8006516:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800651a:	4622      	mov	r2, r4
 800651c:	462b      	mov	r3, r5
 800651e:	46b9      	mov	r9, r7
 8006520:	3f01      	subs	r7, #1
 8006522:	f7fa fae1 	bl	8000ae8 <__aeabi_dcmpeq>
 8006526:	2800      	cmp	r0, #0
 8006528:	d1f5      	bne.n	8006516 <__ieee754_rem_pio2+0x3b6>
 800652a:	4b0f      	ldr	r3, [pc, #60]	; (8006568 <__ieee754_rem_pio2+0x408>)
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	2302      	movs	r3, #2
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	4632      	mov	r2, r6
 8006534:	464b      	mov	r3, r9
 8006536:	4651      	mov	r1, sl
 8006538:	a804      	add	r0, sp, #16
 800653a:	f000 f821 	bl	8006580 <__kernel_rem_pio2>
 800653e:	9b02      	ldr	r3, [sp, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	4683      	mov	fp, r0
 8006544:	f6bf ae4c 	bge.w	80061e0 <__ieee754_rem_pio2+0x80>
 8006548:	e9da 2100 	ldrd	r2, r1, [sl]
 800654c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006550:	e9ca 2300 	strd	r2, r3, [sl]
 8006554:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006558:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800655c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006560:	e73f      	b.n	80063e2 <__ieee754_rem_pio2+0x282>
 8006562:	bf00      	nop
 8006564:	41700000 	.word	0x41700000
 8006568:	0800b3b4 	.word	0x0800b3b4

0800656c <fabs>:
 800656c:	ec51 0b10 	vmov	r0, r1, d0
 8006570:	ee10 2a10 	vmov	r2, s0
 8006574:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006578:	ec43 2b10 	vmov	d0, r2, r3
 800657c:	4770      	bx	lr
	...

08006580 <__kernel_rem_pio2>:
 8006580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006584:	ed2d 8b02 	vpush	{d8}
 8006588:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800658c:	f112 0f14 	cmn.w	r2, #20
 8006590:	9306      	str	r3, [sp, #24]
 8006592:	9104      	str	r1, [sp, #16]
 8006594:	4bc2      	ldr	r3, [pc, #776]	; (80068a0 <__kernel_rem_pio2+0x320>)
 8006596:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006598:	9009      	str	r0, [sp, #36]	; 0x24
 800659a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	9b06      	ldr	r3, [sp, #24]
 80065a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80065a6:	bfa8      	it	ge
 80065a8:	1ed4      	subge	r4, r2, #3
 80065aa:	9305      	str	r3, [sp, #20]
 80065ac:	bfb2      	itee	lt
 80065ae:	2400      	movlt	r4, #0
 80065b0:	2318      	movge	r3, #24
 80065b2:	fb94 f4f3 	sdivge	r4, r4, r3
 80065b6:	f06f 0317 	mvn.w	r3, #23
 80065ba:	fb04 3303 	mla	r3, r4, r3, r3
 80065be:	eb03 0a02 	add.w	sl, r3, r2
 80065c2:	9b00      	ldr	r3, [sp, #0]
 80065c4:	9a05      	ldr	r2, [sp, #20]
 80065c6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8006890 <__kernel_rem_pio2+0x310>
 80065ca:	eb03 0802 	add.w	r8, r3, r2
 80065ce:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80065d0:	1aa7      	subs	r7, r4, r2
 80065d2:	ae20      	add	r6, sp, #128	; 0x80
 80065d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80065d8:	2500      	movs	r5, #0
 80065da:	4545      	cmp	r5, r8
 80065dc:	dd13      	ble.n	8006606 <__kernel_rem_pio2+0x86>
 80065de:	9b06      	ldr	r3, [sp, #24]
 80065e0:	aa20      	add	r2, sp, #128	; 0x80
 80065e2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80065e6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80065ea:	f04f 0800 	mov.w	r8, #0
 80065ee:	9b00      	ldr	r3, [sp, #0]
 80065f0:	4598      	cmp	r8, r3
 80065f2:	dc31      	bgt.n	8006658 <__kernel_rem_pio2+0xd8>
 80065f4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8006890 <__kernel_rem_pio2+0x310>
 80065f8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80065fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006600:	462f      	mov	r7, r5
 8006602:	2600      	movs	r6, #0
 8006604:	e01b      	b.n	800663e <__kernel_rem_pio2+0xbe>
 8006606:	42ef      	cmn	r7, r5
 8006608:	d407      	bmi.n	800661a <__kernel_rem_pio2+0x9a>
 800660a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800660e:	f7f9 ff99 	bl	8000544 <__aeabi_i2d>
 8006612:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006616:	3501      	adds	r5, #1
 8006618:	e7df      	b.n	80065da <__kernel_rem_pio2+0x5a>
 800661a:	ec51 0b18 	vmov	r0, r1, d8
 800661e:	e7f8      	b.n	8006612 <__kernel_rem_pio2+0x92>
 8006620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006624:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006628:	f7f9 fff6 	bl	8000618 <__aeabi_dmul>
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006634:	f7f9 fe3a 	bl	80002ac <__adddf3>
 8006638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800663c:	3601      	adds	r6, #1
 800663e:	9b05      	ldr	r3, [sp, #20]
 8006640:	429e      	cmp	r6, r3
 8006642:	f1a7 0708 	sub.w	r7, r7, #8
 8006646:	ddeb      	ble.n	8006620 <__kernel_rem_pio2+0xa0>
 8006648:	ed9d 7b02 	vldr	d7, [sp, #8]
 800664c:	f108 0801 	add.w	r8, r8, #1
 8006650:	ecab 7b02 	vstmia	fp!, {d7}
 8006654:	3508      	adds	r5, #8
 8006656:	e7ca      	b.n	80065ee <__kernel_rem_pio2+0x6e>
 8006658:	9b00      	ldr	r3, [sp, #0]
 800665a:	aa0c      	add	r2, sp, #48	; 0x30
 800665c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006660:	930b      	str	r3, [sp, #44]	; 0x2c
 8006662:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006664:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006668:	9c00      	ldr	r4, [sp, #0]
 800666a:	930a      	str	r3, [sp, #40]	; 0x28
 800666c:	00e3      	lsls	r3, r4, #3
 800666e:	9308      	str	r3, [sp, #32]
 8006670:	ab98      	add	r3, sp, #608	; 0x260
 8006672:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006676:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800667a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800667e:	ab70      	add	r3, sp, #448	; 0x1c0
 8006680:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8006684:	46c3      	mov	fp, r8
 8006686:	46a1      	mov	r9, r4
 8006688:	f1b9 0f00 	cmp.w	r9, #0
 800668c:	f1a5 0508 	sub.w	r5, r5, #8
 8006690:	dc77      	bgt.n	8006782 <__kernel_rem_pio2+0x202>
 8006692:	ec47 6b10 	vmov	d0, r6, r7
 8006696:	4650      	mov	r0, sl
 8006698:	f000 fac2 	bl	8006c20 <scalbn>
 800669c:	ec57 6b10 	vmov	r6, r7, d0
 80066a0:	2200      	movs	r2, #0
 80066a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80066a6:	ee10 0a10 	vmov	r0, s0
 80066aa:	4639      	mov	r1, r7
 80066ac:	f7f9 ffb4 	bl	8000618 <__aeabi_dmul>
 80066b0:	ec41 0b10 	vmov	d0, r0, r1
 80066b4:	f000 fb34 	bl	8006d20 <floor>
 80066b8:	4b7a      	ldr	r3, [pc, #488]	; (80068a4 <__kernel_rem_pio2+0x324>)
 80066ba:	ec51 0b10 	vmov	r0, r1, d0
 80066be:	2200      	movs	r2, #0
 80066c0:	f7f9 ffaa 	bl	8000618 <__aeabi_dmul>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	4630      	mov	r0, r6
 80066ca:	4639      	mov	r1, r7
 80066cc:	f7f9 fdec 	bl	80002a8 <__aeabi_dsub>
 80066d0:	460f      	mov	r7, r1
 80066d2:	4606      	mov	r6, r0
 80066d4:	f7fa fa50 	bl	8000b78 <__aeabi_d2iz>
 80066d8:	9002      	str	r0, [sp, #8]
 80066da:	f7f9 ff33 	bl	8000544 <__aeabi_i2d>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	4630      	mov	r0, r6
 80066e4:	4639      	mov	r1, r7
 80066e6:	f7f9 fddf 	bl	80002a8 <__aeabi_dsub>
 80066ea:	f1ba 0f00 	cmp.w	sl, #0
 80066ee:	4606      	mov	r6, r0
 80066f0:	460f      	mov	r7, r1
 80066f2:	dd6d      	ble.n	80067d0 <__kernel_rem_pio2+0x250>
 80066f4:	1e61      	subs	r1, r4, #1
 80066f6:	ab0c      	add	r3, sp, #48	; 0x30
 80066f8:	9d02      	ldr	r5, [sp, #8]
 80066fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80066fe:	f1ca 0018 	rsb	r0, sl, #24
 8006702:	fa43 f200 	asr.w	r2, r3, r0
 8006706:	4415      	add	r5, r2
 8006708:	4082      	lsls	r2, r0
 800670a:	1a9b      	subs	r3, r3, r2
 800670c:	aa0c      	add	r2, sp, #48	; 0x30
 800670e:	9502      	str	r5, [sp, #8]
 8006710:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006714:	f1ca 0217 	rsb	r2, sl, #23
 8006718:	fa43 fb02 	asr.w	fp, r3, r2
 800671c:	f1bb 0f00 	cmp.w	fp, #0
 8006720:	dd65      	ble.n	80067ee <__kernel_rem_pio2+0x26e>
 8006722:	9b02      	ldr	r3, [sp, #8]
 8006724:	2200      	movs	r2, #0
 8006726:	3301      	adds	r3, #1
 8006728:	9302      	str	r3, [sp, #8]
 800672a:	4615      	mov	r5, r2
 800672c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006730:	4294      	cmp	r4, r2
 8006732:	f300 809f 	bgt.w	8006874 <__kernel_rem_pio2+0x2f4>
 8006736:	f1ba 0f00 	cmp.w	sl, #0
 800673a:	dd07      	ble.n	800674c <__kernel_rem_pio2+0x1cc>
 800673c:	f1ba 0f01 	cmp.w	sl, #1
 8006740:	f000 80c1 	beq.w	80068c6 <__kernel_rem_pio2+0x346>
 8006744:	f1ba 0f02 	cmp.w	sl, #2
 8006748:	f000 80c7 	beq.w	80068da <__kernel_rem_pio2+0x35a>
 800674c:	f1bb 0f02 	cmp.w	fp, #2
 8006750:	d14d      	bne.n	80067ee <__kernel_rem_pio2+0x26e>
 8006752:	4632      	mov	r2, r6
 8006754:	463b      	mov	r3, r7
 8006756:	4954      	ldr	r1, [pc, #336]	; (80068a8 <__kernel_rem_pio2+0x328>)
 8006758:	2000      	movs	r0, #0
 800675a:	f7f9 fda5 	bl	80002a8 <__aeabi_dsub>
 800675e:	4606      	mov	r6, r0
 8006760:	460f      	mov	r7, r1
 8006762:	2d00      	cmp	r5, #0
 8006764:	d043      	beq.n	80067ee <__kernel_rem_pio2+0x26e>
 8006766:	4650      	mov	r0, sl
 8006768:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8006898 <__kernel_rem_pio2+0x318>
 800676c:	f000 fa58 	bl	8006c20 <scalbn>
 8006770:	4630      	mov	r0, r6
 8006772:	4639      	mov	r1, r7
 8006774:	ec53 2b10 	vmov	r2, r3, d0
 8006778:	f7f9 fd96 	bl	80002a8 <__aeabi_dsub>
 800677c:	4606      	mov	r6, r0
 800677e:	460f      	mov	r7, r1
 8006780:	e035      	b.n	80067ee <__kernel_rem_pio2+0x26e>
 8006782:	4b4a      	ldr	r3, [pc, #296]	; (80068ac <__kernel_rem_pio2+0x32c>)
 8006784:	2200      	movs	r2, #0
 8006786:	4630      	mov	r0, r6
 8006788:	4639      	mov	r1, r7
 800678a:	f7f9 ff45 	bl	8000618 <__aeabi_dmul>
 800678e:	f7fa f9f3 	bl	8000b78 <__aeabi_d2iz>
 8006792:	f7f9 fed7 	bl	8000544 <__aeabi_i2d>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	ec43 2b18 	vmov	d8, r2, r3
 800679e:	4b44      	ldr	r3, [pc, #272]	; (80068b0 <__kernel_rem_pio2+0x330>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	f7f9 ff39 	bl	8000618 <__aeabi_dmul>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	4630      	mov	r0, r6
 80067ac:	4639      	mov	r1, r7
 80067ae:	f7f9 fd7b 	bl	80002a8 <__aeabi_dsub>
 80067b2:	f7fa f9e1 	bl	8000b78 <__aeabi_d2iz>
 80067b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80067ba:	f84b 0b04 	str.w	r0, [fp], #4
 80067be:	ec51 0b18 	vmov	r0, r1, d8
 80067c2:	f7f9 fd73 	bl	80002ac <__adddf3>
 80067c6:	f109 39ff 	add.w	r9, r9, #4294967295
 80067ca:	4606      	mov	r6, r0
 80067cc:	460f      	mov	r7, r1
 80067ce:	e75b      	b.n	8006688 <__kernel_rem_pio2+0x108>
 80067d0:	d106      	bne.n	80067e0 <__kernel_rem_pio2+0x260>
 80067d2:	1e63      	subs	r3, r4, #1
 80067d4:	aa0c      	add	r2, sp, #48	; 0x30
 80067d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067da:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80067de:	e79d      	b.n	800671c <__kernel_rem_pio2+0x19c>
 80067e0:	4b34      	ldr	r3, [pc, #208]	; (80068b4 <__kernel_rem_pio2+0x334>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	f7fa f99e 	bl	8000b24 <__aeabi_dcmpge>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d140      	bne.n	800686e <__kernel_rem_pio2+0x2ee>
 80067ec:	4683      	mov	fp, r0
 80067ee:	2200      	movs	r2, #0
 80067f0:	2300      	movs	r3, #0
 80067f2:	4630      	mov	r0, r6
 80067f4:	4639      	mov	r1, r7
 80067f6:	f7fa f977 	bl	8000ae8 <__aeabi_dcmpeq>
 80067fa:	2800      	cmp	r0, #0
 80067fc:	f000 80c1 	beq.w	8006982 <__kernel_rem_pio2+0x402>
 8006800:	1e65      	subs	r5, r4, #1
 8006802:	462b      	mov	r3, r5
 8006804:	2200      	movs	r2, #0
 8006806:	9900      	ldr	r1, [sp, #0]
 8006808:	428b      	cmp	r3, r1
 800680a:	da6d      	bge.n	80068e8 <__kernel_rem_pio2+0x368>
 800680c:	2a00      	cmp	r2, #0
 800680e:	f000 808a 	beq.w	8006926 <__kernel_rem_pio2+0x3a6>
 8006812:	ab0c      	add	r3, sp, #48	; 0x30
 8006814:	f1aa 0a18 	sub.w	sl, sl, #24
 8006818:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 80ae 	beq.w	800697e <__kernel_rem_pio2+0x3fe>
 8006822:	4650      	mov	r0, sl
 8006824:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8006898 <__kernel_rem_pio2+0x318>
 8006828:	f000 f9fa 	bl	8006c20 <scalbn>
 800682c:	1c6b      	adds	r3, r5, #1
 800682e:	00da      	lsls	r2, r3, #3
 8006830:	9205      	str	r2, [sp, #20]
 8006832:	ec57 6b10 	vmov	r6, r7, d0
 8006836:	aa70      	add	r2, sp, #448	; 0x1c0
 8006838:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80068ac <__kernel_rem_pio2+0x32c>
 800683c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8006840:	462c      	mov	r4, r5
 8006842:	f04f 0800 	mov.w	r8, #0
 8006846:	2c00      	cmp	r4, #0
 8006848:	f280 80d4 	bge.w	80069f4 <__kernel_rem_pio2+0x474>
 800684c:	462c      	mov	r4, r5
 800684e:	2c00      	cmp	r4, #0
 8006850:	f2c0 8102 	blt.w	8006a58 <__kernel_rem_pio2+0x4d8>
 8006854:	4b18      	ldr	r3, [pc, #96]	; (80068b8 <__kernel_rem_pio2+0x338>)
 8006856:	461e      	mov	r6, r3
 8006858:	ab70      	add	r3, sp, #448	; 0x1c0
 800685a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800685e:	1b2b      	subs	r3, r5, r4
 8006860:	f04f 0900 	mov.w	r9, #0
 8006864:	f04f 0a00 	mov.w	sl, #0
 8006868:	2700      	movs	r7, #0
 800686a:	9306      	str	r3, [sp, #24]
 800686c:	e0e6      	b.n	8006a3c <__kernel_rem_pio2+0x4bc>
 800686e:	f04f 0b02 	mov.w	fp, #2
 8006872:	e756      	b.n	8006722 <__kernel_rem_pio2+0x1a2>
 8006874:	f8d8 3000 	ldr.w	r3, [r8]
 8006878:	bb05      	cbnz	r5, 80068bc <__kernel_rem_pio2+0x33c>
 800687a:	b123      	cbz	r3, 8006886 <__kernel_rem_pio2+0x306>
 800687c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006880:	f8c8 3000 	str.w	r3, [r8]
 8006884:	2301      	movs	r3, #1
 8006886:	3201      	adds	r2, #1
 8006888:	f108 0804 	add.w	r8, r8, #4
 800688c:	461d      	mov	r5, r3
 800688e:	e74f      	b.n	8006730 <__kernel_rem_pio2+0x1b0>
	...
 800689c:	3ff00000 	.word	0x3ff00000
 80068a0:	0800b500 	.word	0x0800b500
 80068a4:	40200000 	.word	0x40200000
 80068a8:	3ff00000 	.word	0x3ff00000
 80068ac:	3e700000 	.word	0x3e700000
 80068b0:	41700000 	.word	0x41700000
 80068b4:	3fe00000 	.word	0x3fe00000
 80068b8:	0800b4c0 	.word	0x0800b4c0
 80068bc:	1acb      	subs	r3, r1, r3
 80068be:	f8c8 3000 	str.w	r3, [r8]
 80068c2:	462b      	mov	r3, r5
 80068c4:	e7df      	b.n	8006886 <__kernel_rem_pio2+0x306>
 80068c6:	1e62      	subs	r2, r4, #1
 80068c8:	ab0c      	add	r3, sp, #48	; 0x30
 80068ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ce:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80068d2:	a90c      	add	r1, sp, #48	; 0x30
 80068d4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80068d8:	e738      	b.n	800674c <__kernel_rem_pio2+0x1cc>
 80068da:	1e62      	subs	r2, r4, #1
 80068dc:	ab0c      	add	r3, sp, #48	; 0x30
 80068de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80068e6:	e7f4      	b.n	80068d2 <__kernel_rem_pio2+0x352>
 80068e8:	a90c      	add	r1, sp, #48	; 0x30
 80068ea:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80068ee:	3b01      	subs	r3, #1
 80068f0:	430a      	orrs	r2, r1
 80068f2:	e788      	b.n	8006806 <__kernel_rem_pio2+0x286>
 80068f4:	3301      	adds	r3, #1
 80068f6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80068fa:	2900      	cmp	r1, #0
 80068fc:	d0fa      	beq.n	80068f4 <__kernel_rem_pio2+0x374>
 80068fe:	9a08      	ldr	r2, [sp, #32]
 8006900:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8006904:	446a      	add	r2, sp
 8006906:	3a98      	subs	r2, #152	; 0x98
 8006908:	9208      	str	r2, [sp, #32]
 800690a:	9a06      	ldr	r2, [sp, #24]
 800690c:	a920      	add	r1, sp, #128	; 0x80
 800690e:	18a2      	adds	r2, r4, r2
 8006910:	18e3      	adds	r3, r4, r3
 8006912:	f104 0801 	add.w	r8, r4, #1
 8006916:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800691a:	9302      	str	r3, [sp, #8]
 800691c:	9b02      	ldr	r3, [sp, #8]
 800691e:	4543      	cmp	r3, r8
 8006920:	da04      	bge.n	800692c <__kernel_rem_pio2+0x3ac>
 8006922:	461c      	mov	r4, r3
 8006924:	e6a2      	b.n	800666c <__kernel_rem_pio2+0xec>
 8006926:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006928:	2301      	movs	r3, #1
 800692a:	e7e4      	b.n	80068f6 <__kernel_rem_pio2+0x376>
 800692c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800692e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006932:	f7f9 fe07 	bl	8000544 <__aeabi_i2d>
 8006936:	e8e5 0102 	strd	r0, r1, [r5], #8
 800693a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800693c:	46ab      	mov	fp, r5
 800693e:	461c      	mov	r4, r3
 8006940:	f04f 0900 	mov.w	r9, #0
 8006944:	2600      	movs	r6, #0
 8006946:	2700      	movs	r7, #0
 8006948:	9b05      	ldr	r3, [sp, #20]
 800694a:	4599      	cmp	r9, r3
 800694c:	dd06      	ble.n	800695c <__kernel_rem_pio2+0x3dc>
 800694e:	9b08      	ldr	r3, [sp, #32]
 8006950:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006954:	f108 0801 	add.w	r8, r8, #1
 8006958:	9308      	str	r3, [sp, #32]
 800695a:	e7df      	b.n	800691c <__kernel_rem_pio2+0x39c>
 800695c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006960:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006964:	f7f9 fe58 	bl	8000618 <__aeabi_dmul>
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	4630      	mov	r0, r6
 800696e:	4639      	mov	r1, r7
 8006970:	f7f9 fc9c 	bl	80002ac <__adddf3>
 8006974:	f109 0901 	add.w	r9, r9, #1
 8006978:	4606      	mov	r6, r0
 800697a:	460f      	mov	r7, r1
 800697c:	e7e4      	b.n	8006948 <__kernel_rem_pio2+0x3c8>
 800697e:	3d01      	subs	r5, #1
 8006980:	e747      	b.n	8006812 <__kernel_rem_pio2+0x292>
 8006982:	ec47 6b10 	vmov	d0, r6, r7
 8006986:	f1ca 0000 	rsb	r0, sl, #0
 800698a:	f000 f949 	bl	8006c20 <scalbn>
 800698e:	ec57 6b10 	vmov	r6, r7, d0
 8006992:	4ba0      	ldr	r3, [pc, #640]	; (8006c14 <__kernel_rem_pio2+0x694>)
 8006994:	ee10 0a10 	vmov	r0, s0
 8006998:	2200      	movs	r2, #0
 800699a:	4639      	mov	r1, r7
 800699c:	f7fa f8c2 	bl	8000b24 <__aeabi_dcmpge>
 80069a0:	b1f8      	cbz	r0, 80069e2 <__kernel_rem_pio2+0x462>
 80069a2:	4b9d      	ldr	r3, [pc, #628]	; (8006c18 <__kernel_rem_pio2+0x698>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	4630      	mov	r0, r6
 80069a8:	4639      	mov	r1, r7
 80069aa:	f7f9 fe35 	bl	8000618 <__aeabi_dmul>
 80069ae:	f7fa f8e3 	bl	8000b78 <__aeabi_d2iz>
 80069b2:	4680      	mov	r8, r0
 80069b4:	f7f9 fdc6 	bl	8000544 <__aeabi_i2d>
 80069b8:	4b96      	ldr	r3, [pc, #600]	; (8006c14 <__kernel_rem_pio2+0x694>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	f7f9 fe2c 	bl	8000618 <__aeabi_dmul>
 80069c0:	460b      	mov	r3, r1
 80069c2:	4602      	mov	r2, r0
 80069c4:	4639      	mov	r1, r7
 80069c6:	4630      	mov	r0, r6
 80069c8:	f7f9 fc6e 	bl	80002a8 <__aeabi_dsub>
 80069cc:	f7fa f8d4 	bl	8000b78 <__aeabi_d2iz>
 80069d0:	1c65      	adds	r5, r4, #1
 80069d2:	ab0c      	add	r3, sp, #48	; 0x30
 80069d4:	f10a 0a18 	add.w	sl, sl, #24
 80069d8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80069dc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80069e0:	e71f      	b.n	8006822 <__kernel_rem_pio2+0x2a2>
 80069e2:	4630      	mov	r0, r6
 80069e4:	4639      	mov	r1, r7
 80069e6:	f7fa f8c7 	bl	8000b78 <__aeabi_d2iz>
 80069ea:	ab0c      	add	r3, sp, #48	; 0x30
 80069ec:	4625      	mov	r5, r4
 80069ee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80069f2:	e716      	b.n	8006822 <__kernel_rem_pio2+0x2a2>
 80069f4:	ab0c      	add	r3, sp, #48	; 0x30
 80069f6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80069fa:	f7f9 fda3 	bl	8000544 <__aeabi_i2d>
 80069fe:	4632      	mov	r2, r6
 8006a00:	463b      	mov	r3, r7
 8006a02:	f7f9 fe09 	bl	8000618 <__aeabi_dmul>
 8006a06:	4642      	mov	r2, r8
 8006a08:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006a0c:	464b      	mov	r3, r9
 8006a0e:	4630      	mov	r0, r6
 8006a10:	4639      	mov	r1, r7
 8006a12:	f7f9 fe01 	bl	8000618 <__aeabi_dmul>
 8006a16:	3c01      	subs	r4, #1
 8006a18:	4606      	mov	r6, r0
 8006a1a:	460f      	mov	r7, r1
 8006a1c:	e713      	b.n	8006846 <__kernel_rem_pio2+0x2c6>
 8006a1e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8006a22:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8006a26:	f7f9 fdf7 	bl	8000618 <__aeabi_dmul>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	4648      	mov	r0, r9
 8006a30:	4651      	mov	r1, sl
 8006a32:	f7f9 fc3b 	bl	80002ac <__adddf3>
 8006a36:	3701      	adds	r7, #1
 8006a38:	4681      	mov	r9, r0
 8006a3a:	468a      	mov	sl, r1
 8006a3c:	9b00      	ldr	r3, [sp, #0]
 8006a3e:	429f      	cmp	r7, r3
 8006a40:	dc02      	bgt.n	8006a48 <__kernel_rem_pio2+0x4c8>
 8006a42:	9b06      	ldr	r3, [sp, #24]
 8006a44:	429f      	cmp	r7, r3
 8006a46:	ddea      	ble.n	8006a1e <__kernel_rem_pio2+0x49e>
 8006a48:	9a06      	ldr	r2, [sp, #24]
 8006a4a:	ab48      	add	r3, sp, #288	; 0x120
 8006a4c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8006a50:	e9c6 9a00 	strd	r9, sl, [r6]
 8006a54:	3c01      	subs	r4, #1
 8006a56:	e6fa      	b.n	800684e <__kernel_rem_pio2+0x2ce>
 8006a58:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	dc0b      	bgt.n	8006a76 <__kernel_rem_pio2+0x4f6>
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	dc39      	bgt.n	8006ad6 <__kernel_rem_pio2+0x556>
 8006a62:	d05d      	beq.n	8006b20 <__kernel_rem_pio2+0x5a0>
 8006a64:	9b02      	ldr	r3, [sp, #8]
 8006a66:	f003 0007 	and.w	r0, r3, #7
 8006a6a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006a6e:	ecbd 8b02 	vpop	{d8}
 8006a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a76:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	d1f3      	bne.n	8006a64 <__kernel_rem_pio2+0x4e4>
 8006a7c:	9b05      	ldr	r3, [sp, #20]
 8006a7e:	9500      	str	r5, [sp, #0]
 8006a80:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006a84:	eb0d 0403 	add.w	r4, sp, r3
 8006a88:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8006a8c:	46a2      	mov	sl, r4
 8006a8e:	9b00      	ldr	r3, [sp, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f1aa 0a08 	sub.w	sl, sl, #8
 8006a96:	dc69      	bgt.n	8006b6c <__kernel_rem_pio2+0x5ec>
 8006a98:	46aa      	mov	sl, r5
 8006a9a:	f1ba 0f01 	cmp.w	sl, #1
 8006a9e:	f1a4 0408 	sub.w	r4, r4, #8
 8006aa2:	f300 8083 	bgt.w	8006bac <__kernel_rem_pio2+0x62c>
 8006aa6:	9c05      	ldr	r4, [sp, #20]
 8006aa8:	ab48      	add	r3, sp, #288	; 0x120
 8006aaa:	441c      	add	r4, r3
 8006aac:	2000      	movs	r0, #0
 8006aae:	2100      	movs	r1, #0
 8006ab0:	2d01      	cmp	r5, #1
 8006ab2:	f300 809a 	bgt.w	8006bea <__kernel_rem_pio2+0x66a>
 8006ab6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8006aba:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006abe:	f1bb 0f00 	cmp.w	fp, #0
 8006ac2:	f040 8098 	bne.w	8006bf6 <__kernel_rem_pio2+0x676>
 8006ac6:	9b04      	ldr	r3, [sp, #16]
 8006ac8:	e9c3 7800 	strd	r7, r8, [r3]
 8006acc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006ad0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006ad4:	e7c6      	b.n	8006a64 <__kernel_rem_pio2+0x4e4>
 8006ad6:	9e05      	ldr	r6, [sp, #20]
 8006ad8:	ab48      	add	r3, sp, #288	; 0x120
 8006ada:	441e      	add	r6, r3
 8006adc:	462c      	mov	r4, r5
 8006ade:	2000      	movs	r0, #0
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	2c00      	cmp	r4, #0
 8006ae4:	da33      	bge.n	8006b4e <__kernel_rem_pio2+0x5ce>
 8006ae6:	f1bb 0f00 	cmp.w	fp, #0
 8006aea:	d036      	beq.n	8006b5a <__kernel_rem_pio2+0x5da>
 8006aec:	4602      	mov	r2, r0
 8006aee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006af2:	9c04      	ldr	r4, [sp, #16]
 8006af4:	e9c4 2300 	strd	r2, r3, [r4]
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006b00:	f7f9 fbd2 	bl	80002a8 <__aeabi_dsub>
 8006b04:	ae4a      	add	r6, sp, #296	; 0x128
 8006b06:	2401      	movs	r4, #1
 8006b08:	42a5      	cmp	r5, r4
 8006b0a:	da29      	bge.n	8006b60 <__kernel_rem_pio2+0x5e0>
 8006b0c:	f1bb 0f00 	cmp.w	fp, #0
 8006b10:	d002      	beq.n	8006b18 <__kernel_rem_pio2+0x598>
 8006b12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b16:	4619      	mov	r1, r3
 8006b18:	9b04      	ldr	r3, [sp, #16]
 8006b1a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006b1e:	e7a1      	b.n	8006a64 <__kernel_rem_pio2+0x4e4>
 8006b20:	9c05      	ldr	r4, [sp, #20]
 8006b22:	ab48      	add	r3, sp, #288	; 0x120
 8006b24:	441c      	add	r4, r3
 8006b26:	2000      	movs	r0, #0
 8006b28:	2100      	movs	r1, #0
 8006b2a:	2d00      	cmp	r5, #0
 8006b2c:	da09      	bge.n	8006b42 <__kernel_rem_pio2+0x5c2>
 8006b2e:	f1bb 0f00 	cmp.w	fp, #0
 8006b32:	d002      	beq.n	8006b3a <__kernel_rem_pio2+0x5ba>
 8006b34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b38:	4619      	mov	r1, r3
 8006b3a:	9b04      	ldr	r3, [sp, #16]
 8006b3c:	e9c3 0100 	strd	r0, r1, [r3]
 8006b40:	e790      	b.n	8006a64 <__kernel_rem_pio2+0x4e4>
 8006b42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006b46:	f7f9 fbb1 	bl	80002ac <__adddf3>
 8006b4a:	3d01      	subs	r5, #1
 8006b4c:	e7ed      	b.n	8006b2a <__kernel_rem_pio2+0x5aa>
 8006b4e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006b52:	f7f9 fbab 	bl	80002ac <__adddf3>
 8006b56:	3c01      	subs	r4, #1
 8006b58:	e7c3      	b.n	8006ae2 <__kernel_rem_pio2+0x562>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	e7c8      	b.n	8006af2 <__kernel_rem_pio2+0x572>
 8006b60:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006b64:	f7f9 fba2 	bl	80002ac <__adddf3>
 8006b68:	3401      	adds	r4, #1
 8006b6a:	e7cd      	b.n	8006b08 <__kernel_rem_pio2+0x588>
 8006b6c:	e9da 8900 	ldrd	r8, r9, [sl]
 8006b70:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006b74:	9b00      	ldr	r3, [sp, #0]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	4632      	mov	r2, r6
 8006b7c:	463b      	mov	r3, r7
 8006b7e:	4640      	mov	r0, r8
 8006b80:	4649      	mov	r1, r9
 8006b82:	f7f9 fb93 	bl	80002ac <__adddf3>
 8006b86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4640      	mov	r0, r8
 8006b90:	4649      	mov	r1, r9
 8006b92:	f7f9 fb89 	bl	80002a8 <__aeabi_dsub>
 8006b96:	4632      	mov	r2, r6
 8006b98:	463b      	mov	r3, r7
 8006b9a:	f7f9 fb87 	bl	80002ac <__adddf3>
 8006b9e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006ba2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006ba6:	ed8a 7b00 	vstr	d7, [sl]
 8006baa:	e770      	b.n	8006a8e <__kernel_rem_pio2+0x50e>
 8006bac:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006bb0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006bb4:	4640      	mov	r0, r8
 8006bb6:	4632      	mov	r2, r6
 8006bb8:	463b      	mov	r3, r7
 8006bba:	4649      	mov	r1, r9
 8006bbc:	f7f9 fb76 	bl	80002ac <__adddf3>
 8006bc0:	e9cd 0100 	strd	r0, r1, [sp]
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4640      	mov	r0, r8
 8006bca:	4649      	mov	r1, r9
 8006bcc:	f7f9 fb6c 	bl	80002a8 <__aeabi_dsub>
 8006bd0:	4632      	mov	r2, r6
 8006bd2:	463b      	mov	r3, r7
 8006bd4:	f7f9 fb6a 	bl	80002ac <__adddf3>
 8006bd8:	ed9d 7b00 	vldr	d7, [sp]
 8006bdc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006be0:	ed84 7b00 	vstr	d7, [r4]
 8006be4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006be8:	e757      	b.n	8006a9a <__kernel_rem_pio2+0x51a>
 8006bea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006bee:	f7f9 fb5d 	bl	80002ac <__adddf3>
 8006bf2:	3d01      	subs	r5, #1
 8006bf4:	e75c      	b.n	8006ab0 <__kernel_rem_pio2+0x530>
 8006bf6:	9b04      	ldr	r3, [sp, #16]
 8006bf8:	9a04      	ldr	r2, [sp, #16]
 8006bfa:	601f      	str	r7, [r3, #0]
 8006bfc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006c00:	605c      	str	r4, [r3, #4]
 8006c02:	609d      	str	r5, [r3, #8]
 8006c04:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006c08:	60d3      	str	r3, [r2, #12]
 8006c0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c0e:	6110      	str	r0, [r2, #16]
 8006c10:	6153      	str	r3, [r2, #20]
 8006c12:	e727      	b.n	8006a64 <__kernel_rem_pio2+0x4e4>
 8006c14:	41700000 	.word	0x41700000
 8006c18:	3e700000 	.word	0x3e700000
 8006c1c:	00000000 	.word	0x00000000

08006c20 <scalbn>:
 8006c20:	b570      	push	{r4, r5, r6, lr}
 8006c22:	ec55 4b10 	vmov	r4, r5, d0
 8006c26:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006c2a:	4606      	mov	r6, r0
 8006c2c:	462b      	mov	r3, r5
 8006c2e:	b999      	cbnz	r1, 8006c58 <scalbn+0x38>
 8006c30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006c34:	4323      	orrs	r3, r4
 8006c36:	d03f      	beq.n	8006cb8 <scalbn+0x98>
 8006c38:	4b35      	ldr	r3, [pc, #212]	; (8006d10 <scalbn+0xf0>)
 8006c3a:	4629      	mov	r1, r5
 8006c3c:	ee10 0a10 	vmov	r0, s0
 8006c40:	2200      	movs	r2, #0
 8006c42:	f7f9 fce9 	bl	8000618 <__aeabi_dmul>
 8006c46:	4b33      	ldr	r3, [pc, #204]	; (8006d14 <scalbn+0xf4>)
 8006c48:	429e      	cmp	r6, r3
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	460d      	mov	r5, r1
 8006c4e:	da10      	bge.n	8006c72 <scalbn+0x52>
 8006c50:	a327      	add	r3, pc, #156	; (adr r3, 8006cf0 <scalbn+0xd0>)
 8006c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c56:	e01f      	b.n	8006c98 <scalbn+0x78>
 8006c58:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006c5c:	4291      	cmp	r1, r2
 8006c5e:	d10c      	bne.n	8006c7a <scalbn+0x5a>
 8006c60:	ee10 2a10 	vmov	r2, s0
 8006c64:	4620      	mov	r0, r4
 8006c66:	4629      	mov	r1, r5
 8006c68:	f7f9 fb20 	bl	80002ac <__adddf3>
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	460d      	mov	r5, r1
 8006c70:	e022      	b.n	8006cb8 <scalbn+0x98>
 8006c72:	460b      	mov	r3, r1
 8006c74:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006c78:	3936      	subs	r1, #54	; 0x36
 8006c7a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006c7e:	4296      	cmp	r6, r2
 8006c80:	dd0d      	ble.n	8006c9e <scalbn+0x7e>
 8006c82:	2d00      	cmp	r5, #0
 8006c84:	a11c      	add	r1, pc, #112	; (adr r1, 8006cf8 <scalbn+0xd8>)
 8006c86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c8a:	da02      	bge.n	8006c92 <scalbn+0x72>
 8006c8c:	a11c      	add	r1, pc, #112	; (adr r1, 8006d00 <scalbn+0xe0>)
 8006c8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c92:	a319      	add	r3, pc, #100	; (adr r3, 8006cf8 <scalbn+0xd8>)
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	f7f9 fcbe 	bl	8000618 <__aeabi_dmul>
 8006c9c:	e7e6      	b.n	8006c6c <scalbn+0x4c>
 8006c9e:	1872      	adds	r2, r6, r1
 8006ca0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006ca4:	428a      	cmp	r2, r1
 8006ca6:	dcec      	bgt.n	8006c82 <scalbn+0x62>
 8006ca8:	2a00      	cmp	r2, #0
 8006caa:	dd08      	ble.n	8006cbe <scalbn+0x9e>
 8006cac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006cb0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006cb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006cb8:	ec45 4b10 	vmov	d0, r4, r5
 8006cbc:	bd70      	pop	{r4, r5, r6, pc}
 8006cbe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006cc2:	da08      	bge.n	8006cd6 <scalbn+0xb6>
 8006cc4:	2d00      	cmp	r5, #0
 8006cc6:	a10a      	add	r1, pc, #40	; (adr r1, 8006cf0 <scalbn+0xd0>)
 8006cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ccc:	dac0      	bge.n	8006c50 <scalbn+0x30>
 8006cce:	a10e      	add	r1, pc, #56	; (adr r1, 8006d08 <scalbn+0xe8>)
 8006cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cd4:	e7bc      	b.n	8006c50 <scalbn+0x30>
 8006cd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006cda:	3236      	adds	r2, #54	; 0x36
 8006cdc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ce0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <scalbn+0xf8>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	e7d5      	b.n	8006c98 <scalbn+0x78>
 8006cec:	f3af 8000 	nop.w
 8006cf0:	c2f8f359 	.word	0xc2f8f359
 8006cf4:	01a56e1f 	.word	0x01a56e1f
 8006cf8:	8800759c 	.word	0x8800759c
 8006cfc:	7e37e43c 	.word	0x7e37e43c
 8006d00:	8800759c 	.word	0x8800759c
 8006d04:	fe37e43c 	.word	0xfe37e43c
 8006d08:	c2f8f359 	.word	0xc2f8f359
 8006d0c:	81a56e1f 	.word	0x81a56e1f
 8006d10:	43500000 	.word	0x43500000
 8006d14:	ffff3cb0 	.word	0xffff3cb0
 8006d18:	3c900000 	.word	0x3c900000
 8006d1c:	00000000 	.word	0x00000000

08006d20 <floor>:
 8006d20:	ec51 0b10 	vmov	r0, r1, d0
 8006d24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8006d30:	2e13      	cmp	r6, #19
 8006d32:	ee10 5a10 	vmov	r5, s0
 8006d36:	ee10 8a10 	vmov	r8, s0
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	dc31      	bgt.n	8006da2 <floor+0x82>
 8006d3e:	2e00      	cmp	r6, #0
 8006d40:	da14      	bge.n	8006d6c <floor+0x4c>
 8006d42:	a333      	add	r3, pc, #204	; (adr r3, 8006e10 <floor+0xf0>)
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	f7f9 fab0 	bl	80002ac <__adddf3>
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f7f9 fef2 	bl	8000b38 <__aeabi_dcmpgt>
 8006d54:	b138      	cbz	r0, 8006d66 <floor+0x46>
 8006d56:	2c00      	cmp	r4, #0
 8006d58:	da53      	bge.n	8006e02 <floor+0xe2>
 8006d5a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006d5e:	4325      	orrs	r5, r4
 8006d60:	d052      	beq.n	8006e08 <floor+0xe8>
 8006d62:	4c2d      	ldr	r4, [pc, #180]	; (8006e18 <floor+0xf8>)
 8006d64:	2500      	movs	r5, #0
 8006d66:	4621      	mov	r1, r4
 8006d68:	4628      	mov	r0, r5
 8006d6a:	e024      	b.n	8006db6 <floor+0x96>
 8006d6c:	4f2b      	ldr	r7, [pc, #172]	; (8006e1c <floor+0xfc>)
 8006d6e:	4137      	asrs	r7, r6
 8006d70:	ea01 0307 	and.w	r3, r1, r7
 8006d74:	4303      	orrs	r3, r0
 8006d76:	d01e      	beq.n	8006db6 <floor+0x96>
 8006d78:	a325      	add	r3, pc, #148	; (adr r3, 8006e10 <floor+0xf0>)
 8006d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7e:	f7f9 fa95 	bl	80002ac <__adddf3>
 8006d82:	2200      	movs	r2, #0
 8006d84:	2300      	movs	r3, #0
 8006d86:	f7f9 fed7 	bl	8000b38 <__aeabi_dcmpgt>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d0eb      	beq.n	8006d66 <floor+0x46>
 8006d8e:	2c00      	cmp	r4, #0
 8006d90:	bfbe      	ittt	lt
 8006d92:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006d96:	4133      	asrlt	r3, r6
 8006d98:	18e4      	addlt	r4, r4, r3
 8006d9a:	ea24 0407 	bic.w	r4, r4, r7
 8006d9e:	2500      	movs	r5, #0
 8006da0:	e7e1      	b.n	8006d66 <floor+0x46>
 8006da2:	2e33      	cmp	r6, #51	; 0x33
 8006da4:	dd0b      	ble.n	8006dbe <floor+0x9e>
 8006da6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006daa:	d104      	bne.n	8006db6 <floor+0x96>
 8006dac:	ee10 2a10 	vmov	r2, s0
 8006db0:	460b      	mov	r3, r1
 8006db2:	f7f9 fa7b 	bl	80002ac <__adddf3>
 8006db6:	ec41 0b10 	vmov	d0, r0, r1
 8006dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dbe:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8006dc2:	f04f 37ff 	mov.w	r7, #4294967295
 8006dc6:	40df      	lsrs	r7, r3
 8006dc8:	4238      	tst	r0, r7
 8006dca:	d0f4      	beq.n	8006db6 <floor+0x96>
 8006dcc:	a310      	add	r3, pc, #64	; (adr r3, 8006e10 <floor+0xf0>)
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	f7f9 fa6b 	bl	80002ac <__adddf3>
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f7f9 fead 	bl	8000b38 <__aeabi_dcmpgt>
 8006dde:	2800      	cmp	r0, #0
 8006de0:	d0c1      	beq.n	8006d66 <floor+0x46>
 8006de2:	2c00      	cmp	r4, #0
 8006de4:	da0a      	bge.n	8006dfc <floor+0xdc>
 8006de6:	2e14      	cmp	r6, #20
 8006de8:	d101      	bne.n	8006dee <floor+0xce>
 8006dea:	3401      	adds	r4, #1
 8006dec:	e006      	b.n	8006dfc <floor+0xdc>
 8006dee:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006df2:	2301      	movs	r3, #1
 8006df4:	40b3      	lsls	r3, r6
 8006df6:	441d      	add	r5, r3
 8006df8:	45a8      	cmp	r8, r5
 8006dfa:	d8f6      	bhi.n	8006dea <floor+0xca>
 8006dfc:	ea25 0507 	bic.w	r5, r5, r7
 8006e00:	e7b1      	b.n	8006d66 <floor+0x46>
 8006e02:	2500      	movs	r5, #0
 8006e04:	462c      	mov	r4, r5
 8006e06:	e7ae      	b.n	8006d66 <floor+0x46>
 8006e08:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006e0c:	e7ab      	b.n	8006d66 <floor+0x46>
 8006e0e:	bf00      	nop
 8006e10:	8800759c 	.word	0x8800759c
 8006e14:	7e37e43c 	.word	0x7e37e43c
 8006e18:	bff00000 	.word	0xbff00000
 8006e1c:	000fffff 	.word	0x000fffff

08006e20 <atoff>:
 8006e20:	2100      	movs	r1, #0
 8006e22:	f000 be11 	b.w	8007a48 <strtof>

08006e26 <atoi>:
 8006e26:	220a      	movs	r2, #10
 8006e28:	2100      	movs	r1, #0
 8006e2a:	f000 bef5 	b.w	8007c18 <strtol>

08006e2e <sulp>:
 8006e2e:	b570      	push	{r4, r5, r6, lr}
 8006e30:	4604      	mov	r4, r0
 8006e32:	460d      	mov	r5, r1
 8006e34:	ec45 4b10 	vmov	d0, r4, r5
 8006e38:	4616      	mov	r6, r2
 8006e3a:	f003 fba1 	bl	800a580 <__ulp>
 8006e3e:	ec51 0b10 	vmov	r0, r1, d0
 8006e42:	b17e      	cbz	r6, 8006e64 <sulp+0x36>
 8006e44:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006e48:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	dd09      	ble.n	8006e64 <sulp+0x36>
 8006e50:	051b      	lsls	r3, r3, #20
 8006e52:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006e56:	2400      	movs	r4, #0
 8006e58:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006e5c:	4622      	mov	r2, r4
 8006e5e:	462b      	mov	r3, r5
 8006e60:	f7f9 fbda 	bl	8000618 <__aeabi_dmul>
 8006e64:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e68 <_strtod_l>:
 8006e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6c:	ed2d 8b02 	vpush	{d8}
 8006e70:	b09b      	sub	sp, #108	; 0x6c
 8006e72:	4604      	mov	r4, r0
 8006e74:	9213      	str	r2, [sp, #76]	; 0x4c
 8006e76:	2200      	movs	r2, #0
 8006e78:	9216      	str	r2, [sp, #88]	; 0x58
 8006e7a:	460d      	mov	r5, r1
 8006e7c:	f04f 0800 	mov.w	r8, #0
 8006e80:	f04f 0900 	mov.w	r9, #0
 8006e84:	460a      	mov	r2, r1
 8006e86:	9215      	str	r2, [sp, #84]	; 0x54
 8006e88:	7811      	ldrb	r1, [r2, #0]
 8006e8a:	292b      	cmp	r1, #43	; 0x2b
 8006e8c:	d04c      	beq.n	8006f28 <_strtod_l+0xc0>
 8006e8e:	d83a      	bhi.n	8006f06 <_strtod_l+0x9e>
 8006e90:	290d      	cmp	r1, #13
 8006e92:	d834      	bhi.n	8006efe <_strtod_l+0x96>
 8006e94:	2908      	cmp	r1, #8
 8006e96:	d834      	bhi.n	8006f02 <_strtod_l+0x9a>
 8006e98:	2900      	cmp	r1, #0
 8006e9a:	d03d      	beq.n	8006f18 <_strtod_l+0xb0>
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	920a      	str	r2, [sp, #40]	; 0x28
 8006ea0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006ea2:	7832      	ldrb	r2, [r6, #0]
 8006ea4:	2a30      	cmp	r2, #48	; 0x30
 8006ea6:	f040 80b4 	bne.w	8007012 <_strtod_l+0x1aa>
 8006eaa:	7872      	ldrb	r2, [r6, #1]
 8006eac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006eb0:	2a58      	cmp	r2, #88	; 0x58
 8006eb2:	d170      	bne.n	8006f96 <_strtod_l+0x12e>
 8006eb4:	9302      	str	r3, [sp, #8]
 8006eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb8:	9301      	str	r3, [sp, #4]
 8006eba:	ab16      	add	r3, sp, #88	; 0x58
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	4a8e      	ldr	r2, [pc, #568]	; (80070f8 <_strtod_l+0x290>)
 8006ec0:	ab17      	add	r3, sp, #92	; 0x5c
 8006ec2:	a915      	add	r1, sp, #84	; 0x54
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f002 fc39 	bl	800973c <__gethex>
 8006eca:	f010 070f 	ands.w	r7, r0, #15
 8006ece:	4605      	mov	r5, r0
 8006ed0:	d005      	beq.n	8006ede <_strtod_l+0x76>
 8006ed2:	2f06      	cmp	r7, #6
 8006ed4:	d12a      	bne.n	8006f2c <_strtod_l+0xc4>
 8006ed6:	3601      	adds	r6, #1
 8006ed8:	2300      	movs	r3, #0
 8006eda:	9615      	str	r6, [sp, #84]	; 0x54
 8006edc:	930a      	str	r3, [sp, #40]	; 0x28
 8006ede:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f040 857f 	bne.w	80079e4 <_strtod_l+0xb7c>
 8006ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ee8:	b1db      	cbz	r3, 8006f22 <_strtod_l+0xba>
 8006eea:	4642      	mov	r2, r8
 8006eec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006ef0:	ec43 2b10 	vmov	d0, r2, r3
 8006ef4:	b01b      	add	sp, #108	; 0x6c
 8006ef6:	ecbd 8b02 	vpop	{d8}
 8006efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006efe:	2920      	cmp	r1, #32
 8006f00:	d1cc      	bne.n	8006e9c <_strtod_l+0x34>
 8006f02:	3201      	adds	r2, #1
 8006f04:	e7bf      	b.n	8006e86 <_strtod_l+0x1e>
 8006f06:	292d      	cmp	r1, #45	; 0x2d
 8006f08:	d1c8      	bne.n	8006e9c <_strtod_l+0x34>
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	910a      	str	r1, [sp, #40]	; 0x28
 8006f0e:	1c51      	adds	r1, r2, #1
 8006f10:	9115      	str	r1, [sp, #84]	; 0x54
 8006f12:	7852      	ldrb	r2, [r2, #1]
 8006f14:	2a00      	cmp	r2, #0
 8006f16:	d1c3      	bne.n	8006ea0 <_strtod_l+0x38>
 8006f18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f1a:	9515      	str	r5, [sp, #84]	; 0x54
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f040 855f 	bne.w	80079e0 <_strtod_l+0xb78>
 8006f22:	4642      	mov	r2, r8
 8006f24:	464b      	mov	r3, r9
 8006f26:	e7e3      	b.n	8006ef0 <_strtod_l+0x88>
 8006f28:	2100      	movs	r1, #0
 8006f2a:	e7ef      	b.n	8006f0c <_strtod_l+0xa4>
 8006f2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006f2e:	b13a      	cbz	r2, 8006f40 <_strtod_l+0xd8>
 8006f30:	2135      	movs	r1, #53	; 0x35
 8006f32:	a818      	add	r0, sp, #96	; 0x60
 8006f34:	f003 fc21 	bl	800a77a <__copybits>
 8006f38:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f002 fff4 	bl	8009f28 <_Bfree>
 8006f40:	3f01      	subs	r7, #1
 8006f42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f44:	2f04      	cmp	r7, #4
 8006f46:	d806      	bhi.n	8006f56 <_strtod_l+0xee>
 8006f48:	e8df f007 	tbb	[pc, r7]
 8006f4c:	201d0314 	.word	0x201d0314
 8006f50:	14          	.byte	0x14
 8006f51:	00          	.byte	0x00
 8006f52:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8006f56:	05e9      	lsls	r1, r5, #23
 8006f58:	bf48      	it	mi
 8006f5a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006f5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f62:	0d1b      	lsrs	r3, r3, #20
 8006f64:	051b      	lsls	r3, r3, #20
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1b9      	bne.n	8006ede <_strtod_l+0x76>
 8006f6a:	f001 fc63 	bl	8008834 <__errno>
 8006f6e:	2322      	movs	r3, #34	; 0x22
 8006f70:	6003      	str	r3, [r0, #0]
 8006f72:	e7b4      	b.n	8006ede <_strtod_l+0x76>
 8006f74:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8006f78:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006f7c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f80:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006f84:	e7e7      	b.n	8006f56 <_strtod_l+0xee>
 8006f86:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007100 <_strtod_l+0x298>
 8006f8a:	e7e4      	b.n	8006f56 <_strtod_l+0xee>
 8006f8c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006f90:	f04f 38ff 	mov.w	r8, #4294967295
 8006f94:	e7df      	b.n	8006f56 <_strtod_l+0xee>
 8006f96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f98:	1c5a      	adds	r2, r3, #1
 8006f9a:	9215      	str	r2, [sp, #84]	; 0x54
 8006f9c:	785b      	ldrb	r3, [r3, #1]
 8006f9e:	2b30      	cmp	r3, #48	; 0x30
 8006fa0:	d0f9      	beq.n	8006f96 <_strtod_l+0x12e>
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d09b      	beq.n	8006ede <_strtod_l+0x76>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	f04f 0a00 	mov.w	sl, #0
 8006fac:	9304      	str	r3, [sp, #16]
 8006fae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fb2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006fb6:	46d3      	mov	fp, sl
 8006fb8:	220a      	movs	r2, #10
 8006fba:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006fbc:	7806      	ldrb	r6, [r0, #0]
 8006fbe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006fc2:	b2d9      	uxtb	r1, r3
 8006fc4:	2909      	cmp	r1, #9
 8006fc6:	d926      	bls.n	8007016 <_strtod_l+0x1ae>
 8006fc8:	494c      	ldr	r1, [pc, #304]	; (80070fc <_strtod_l+0x294>)
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f001 fbd5 	bl	800877a <strncmp>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	d030      	beq.n	8007036 <_strtod_l+0x1ce>
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	4632      	mov	r2, r6
 8006fd8:	9005      	str	r0, [sp, #20]
 8006fda:	465e      	mov	r6, fp
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2a65      	cmp	r2, #101	; 0x65
 8006fe0:	d001      	beq.n	8006fe6 <_strtod_l+0x17e>
 8006fe2:	2a45      	cmp	r2, #69	; 0x45
 8006fe4:	d113      	bne.n	800700e <_strtod_l+0x1a6>
 8006fe6:	b91e      	cbnz	r6, 8006ff0 <_strtod_l+0x188>
 8006fe8:	9a04      	ldr	r2, [sp, #16]
 8006fea:	4302      	orrs	r2, r0
 8006fec:	d094      	beq.n	8006f18 <_strtod_l+0xb0>
 8006fee:	2600      	movs	r6, #0
 8006ff0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006ff2:	1c6a      	adds	r2, r5, #1
 8006ff4:	9215      	str	r2, [sp, #84]	; 0x54
 8006ff6:	786a      	ldrb	r2, [r5, #1]
 8006ff8:	2a2b      	cmp	r2, #43	; 0x2b
 8006ffa:	d074      	beq.n	80070e6 <_strtod_l+0x27e>
 8006ffc:	2a2d      	cmp	r2, #45	; 0x2d
 8006ffe:	d078      	beq.n	80070f2 <_strtod_l+0x28a>
 8007000:	f04f 0c00 	mov.w	ip, #0
 8007004:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007008:	2909      	cmp	r1, #9
 800700a:	d97f      	bls.n	800710c <_strtod_l+0x2a4>
 800700c:	9515      	str	r5, [sp, #84]	; 0x54
 800700e:	2700      	movs	r7, #0
 8007010:	e09e      	b.n	8007150 <_strtod_l+0x2e8>
 8007012:	2300      	movs	r3, #0
 8007014:	e7c8      	b.n	8006fa8 <_strtod_l+0x140>
 8007016:	f1bb 0f08 	cmp.w	fp, #8
 800701a:	bfd8      	it	le
 800701c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800701e:	f100 0001 	add.w	r0, r0, #1
 8007022:	bfda      	itte	le
 8007024:	fb02 3301 	mlale	r3, r2, r1, r3
 8007028:	9309      	strle	r3, [sp, #36]	; 0x24
 800702a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800702e:	f10b 0b01 	add.w	fp, fp, #1
 8007032:	9015      	str	r0, [sp, #84]	; 0x54
 8007034:	e7c1      	b.n	8006fba <_strtod_l+0x152>
 8007036:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	9215      	str	r2, [sp, #84]	; 0x54
 800703c:	785a      	ldrb	r2, [r3, #1]
 800703e:	f1bb 0f00 	cmp.w	fp, #0
 8007042:	d037      	beq.n	80070b4 <_strtod_l+0x24c>
 8007044:	9005      	str	r0, [sp, #20]
 8007046:	465e      	mov	r6, fp
 8007048:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800704c:	2b09      	cmp	r3, #9
 800704e:	d912      	bls.n	8007076 <_strtod_l+0x20e>
 8007050:	2301      	movs	r3, #1
 8007052:	e7c4      	b.n	8006fde <_strtod_l+0x176>
 8007054:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007056:	1c5a      	adds	r2, r3, #1
 8007058:	9215      	str	r2, [sp, #84]	; 0x54
 800705a:	785a      	ldrb	r2, [r3, #1]
 800705c:	3001      	adds	r0, #1
 800705e:	2a30      	cmp	r2, #48	; 0x30
 8007060:	d0f8      	beq.n	8007054 <_strtod_l+0x1ec>
 8007062:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007066:	2b08      	cmp	r3, #8
 8007068:	f200 84c1 	bhi.w	80079ee <_strtod_l+0xb86>
 800706c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800706e:	9005      	str	r0, [sp, #20]
 8007070:	2000      	movs	r0, #0
 8007072:	930b      	str	r3, [sp, #44]	; 0x2c
 8007074:	4606      	mov	r6, r0
 8007076:	3a30      	subs	r2, #48	; 0x30
 8007078:	f100 0301 	add.w	r3, r0, #1
 800707c:	d014      	beq.n	80070a8 <_strtod_l+0x240>
 800707e:	9905      	ldr	r1, [sp, #20]
 8007080:	4419      	add	r1, r3
 8007082:	9105      	str	r1, [sp, #20]
 8007084:	4633      	mov	r3, r6
 8007086:	eb00 0c06 	add.w	ip, r0, r6
 800708a:	210a      	movs	r1, #10
 800708c:	4563      	cmp	r3, ip
 800708e:	d113      	bne.n	80070b8 <_strtod_l+0x250>
 8007090:	1833      	adds	r3, r6, r0
 8007092:	2b08      	cmp	r3, #8
 8007094:	f106 0601 	add.w	r6, r6, #1
 8007098:	4406      	add	r6, r0
 800709a:	dc1a      	bgt.n	80070d2 <_strtod_l+0x26a>
 800709c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800709e:	230a      	movs	r3, #10
 80070a0:	fb03 2301 	mla	r3, r3, r1, r2
 80070a4:	9309      	str	r3, [sp, #36]	; 0x24
 80070a6:	2300      	movs	r3, #0
 80070a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80070aa:	1c51      	adds	r1, r2, #1
 80070ac:	9115      	str	r1, [sp, #84]	; 0x54
 80070ae:	7852      	ldrb	r2, [r2, #1]
 80070b0:	4618      	mov	r0, r3
 80070b2:	e7c9      	b.n	8007048 <_strtod_l+0x1e0>
 80070b4:	4658      	mov	r0, fp
 80070b6:	e7d2      	b.n	800705e <_strtod_l+0x1f6>
 80070b8:	2b08      	cmp	r3, #8
 80070ba:	f103 0301 	add.w	r3, r3, #1
 80070be:	dc03      	bgt.n	80070c8 <_strtod_l+0x260>
 80070c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80070c2:	434f      	muls	r7, r1
 80070c4:	9709      	str	r7, [sp, #36]	; 0x24
 80070c6:	e7e1      	b.n	800708c <_strtod_l+0x224>
 80070c8:	2b10      	cmp	r3, #16
 80070ca:	bfd8      	it	le
 80070cc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80070d0:	e7dc      	b.n	800708c <_strtod_l+0x224>
 80070d2:	2e10      	cmp	r6, #16
 80070d4:	bfdc      	itt	le
 80070d6:	230a      	movle	r3, #10
 80070d8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80070dc:	e7e3      	b.n	80070a6 <_strtod_l+0x23e>
 80070de:	2300      	movs	r3, #0
 80070e0:	9305      	str	r3, [sp, #20]
 80070e2:	2301      	movs	r3, #1
 80070e4:	e780      	b.n	8006fe8 <_strtod_l+0x180>
 80070e6:	f04f 0c00 	mov.w	ip, #0
 80070ea:	1caa      	adds	r2, r5, #2
 80070ec:	9215      	str	r2, [sp, #84]	; 0x54
 80070ee:	78aa      	ldrb	r2, [r5, #2]
 80070f0:	e788      	b.n	8007004 <_strtod_l+0x19c>
 80070f2:	f04f 0c01 	mov.w	ip, #1
 80070f6:	e7f8      	b.n	80070ea <_strtod_l+0x282>
 80070f8:	0800b514 	.word	0x0800b514
 80070fc:	0800b510 	.word	0x0800b510
 8007100:	7ff00000 	.word	0x7ff00000
 8007104:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007106:	1c51      	adds	r1, r2, #1
 8007108:	9115      	str	r1, [sp, #84]	; 0x54
 800710a:	7852      	ldrb	r2, [r2, #1]
 800710c:	2a30      	cmp	r2, #48	; 0x30
 800710e:	d0f9      	beq.n	8007104 <_strtod_l+0x29c>
 8007110:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007114:	2908      	cmp	r1, #8
 8007116:	f63f af7a 	bhi.w	800700e <_strtod_l+0x1a6>
 800711a:	3a30      	subs	r2, #48	; 0x30
 800711c:	9208      	str	r2, [sp, #32]
 800711e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007120:	920c      	str	r2, [sp, #48]	; 0x30
 8007122:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007124:	1c57      	adds	r7, r2, #1
 8007126:	9715      	str	r7, [sp, #84]	; 0x54
 8007128:	7852      	ldrb	r2, [r2, #1]
 800712a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800712e:	f1be 0f09 	cmp.w	lr, #9
 8007132:	d938      	bls.n	80071a6 <_strtod_l+0x33e>
 8007134:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007136:	1a7f      	subs	r7, r7, r1
 8007138:	2f08      	cmp	r7, #8
 800713a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800713e:	dc03      	bgt.n	8007148 <_strtod_l+0x2e0>
 8007140:	9908      	ldr	r1, [sp, #32]
 8007142:	428f      	cmp	r7, r1
 8007144:	bfa8      	it	ge
 8007146:	460f      	movge	r7, r1
 8007148:	f1bc 0f00 	cmp.w	ip, #0
 800714c:	d000      	beq.n	8007150 <_strtod_l+0x2e8>
 800714e:	427f      	negs	r7, r7
 8007150:	2e00      	cmp	r6, #0
 8007152:	d14f      	bne.n	80071f4 <_strtod_l+0x38c>
 8007154:	9904      	ldr	r1, [sp, #16]
 8007156:	4301      	orrs	r1, r0
 8007158:	f47f aec1 	bne.w	8006ede <_strtod_l+0x76>
 800715c:	2b00      	cmp	r3, #0
 800715e:	f47f aedb 	bne.w	8006f18 <_strtod_l+0xb0>
 8007162:	2a69      	cmp	r2, #105	; 0x69
 8007164:	d029      	beq.n	80071ba <_strtod_l+0x352>
 8007166:	dc26      	bgt.n	80071b6 <_strtod_l+0x34e>
 8007168:	2a49      	cmp	r2, #73	; 0x49
 800716a:	d026      	beq.n	80071ba <_strtod_l+0x352>
 800716c:	2a4e      	cmp	r2, #78	; 0x4e
 800716e:	f47f aed3 	bne.w	8006f18 <_strtod_l+0xb0>
 8007172:	499b      	ldr	r1, [pc, #620]	; (80073e0 <_strtod_l+0x578>)
 8007174:	a815      	add	r0, sp, #84	; 0x54
 8007176:	f002 fd21 	bl	8009bbc <__match>
 800717a:	2800      	cmp	r0, #0
 800717c:	f43f aecc 	beq.w	8006f18 <_strtod_l+0xb0>
 8007180:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	2b28      	cmp	r3, #40	; 0x28
 8007186:	d12f      	bne.n	80071e8 <_strtod_l+0x380>
 8007188:	4996      	ldr	r1, [pc, #600]	; (80073e4 <_strtod_l+0x57c>)
 800718a:	aa18      	add	r2, sp, #96	; 0x60
 800718c:	a815      	add	r0, sp, #84	; 0x54
 800718e:	f002 fd29 	bl	8009be4 <__hexnan>
 8007192:	2805      	cmp	r0, #5
 8007194:	d128      	bne.n	80071e8 <_strtod_l+0x380>
 8007196:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007198:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800719c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80071a0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80071a4:	e69b      	b.n	8006ede <_strtod_l+0x76>
 80071a6:	9f08      	ldr	r7, [sp, #32]
 80071a8:	210a      	movs	r1, #10
 80071aa:	fb01 2107 	mla	r1, r1, r7, r2
 80071ae:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80071b2:	9208      	str	r2, [sp, #32]
 80071b4:	e7b5      	b.n	8007122 <_strtod_l+0x2ba>
 80071b6:	2a6e      	cmp	r2, #110	; 0x6e
 80071b8:	e7d9      	b.n	800716e <_strtod_l+0x306>
 80071ba:	498b      	ldr	r1, [pc, #556]	; (80073e8 <_strtod_l+0x580>)
 80071bc:	a815      	add	r0, sp, #84	; 0x54
 80071be:	f002 fcfd 	bl	8009bbc <__match>
 80071c2:	2800      	cmp	r0, #0
 80071c4:	f43f aea8 	beq.w	8006f18 <_strtod_l+0xb0>
 80071c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071ca:	4988      	ldr	r1, [pc, #544]	; (80073ec <_strtod_l+0x584>)
 80071cc:	3b01      	subs	r3, #1
 80071ce:	a815      	add	r0, sp, #84	; 0x54
 80071d0:	9315      	str	r3, [sp, #84]	; 0x54
 80071d2:	f002 fcf3 	bl	8009bbc <__match>
 80071d6:	b910      	cbnz	r0, 80071de <_strtod_l+0x376>
 80071d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071da:	3301      	adds	r3, #1
 80071dc:	9315      	str	r3, [sp, #84]	; 0x54
 80071de:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80073fc <_strtod_l+0x594>
 80071e2:	f04f 0800 	mov.w	r8, #0
 80071e6:	e67a      	b.n	8006ede <_strtod_l+0x76>
 80071e8:	4881      	ldr	r0, [pc, #516]	; (80073f0 <_strtod_l+0x588>)
 80071ea:	f001 fb69 	bl	80088c0 <nan>
 80071ee:	ec59 8b10 	vmov	r8, r9, d0
 80071f2:	e674      	b.n	8006ede <_strtod_l+0x76>
 80071f4:	9b05      	ldr	r3, [sp, #20]
 80071f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071f8:	1afb      	subs	r3, r7, r3
 80071fa:	f1bb 0f00 	cmp.w	fp, #0
 80071fe:	bf08      	it	eq
 8007200:	46b3      	moveq	fp, r6
 8007202:	2e10      	cmp	r6, #16
 8007204:	9308      	str	r3, [sp, #32]
 8007206:	4635      	mov	r5, r6
 8007208:	bfa8      	it	ge
 800720a:	2510      	movge	r5, #16
 800720c:	f7f9 f98a 	bl	8000524 <__aeabi_ui2d>
 8007210:	2e09      	cmp	r6, #9
 8007212:	4680      	mov	r8, r0
 8007214:	4689      	mov	r9, r1
 8007216:	dd13      	ble.n	8007240 <_strtod_l+0x3d8>
 8007218:	4b76      	ldr	r3, [pc, #472]	; (80073f4 <_strtod_l+0x58c>)
 800721a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800721e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007222:	f7f9 f9f9 	bl	8000618 <__aeabi_dmul>
 8007226:	4680      	mov	r8, r0
 8007228:	4650      	mov	r0, sl
 800722a:	4689      	mov	r9, r1
 800722c:	f7f9 f97a 	bl	8000524 <__aeabi_ui2d>
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	4640      	mov	r0, r8
 8007236:	4649      	mov	r1, r9
 8007238:	f7f9 f838 	bl	80002ac <__adddf3>
 800723c:	4680      	mov	r8, r0
 800723e:	4689      	mov	r9, r1
 8007240:	2e0f      	cmp	r6, #15
 8007242:	dc38      	bgt.n	80072b6 <_strtod_l+0x44e>
 8007244:	9b08      	ldr	r3, [sp, #32]
 8007246:	2b00      	cmp	r3, #0
 8007248:	f43f ae49 	beq.w	8006ede <_strtod_l+0x76>
 800724c:	dd24      	ble.n	8007298 <_strtod_l+0x430>
 800724e:	2b16      	cmp	r3, #22
 8007250:	dc0b      	bgt.n	800726a <_strtod_l+0x402>
 8007252:	4968      	ldr	r1, [pc, #416]	; (80073f4 <_strtod_l+0x58c>)
 8007254:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800725c:	4642      	mov	r2, r8
 800725e:	464b      	mov	r3, r9
 8007260:	f7f9 f9da 	bl	8000618 <__aeabi_dmul>
 8007264:	4680      	mov	r8, r0
 8007266:	4689      	mov	r9, r1
 8007268:	e639      	b.n	8006ede <_strtod_l+0x76>
 800726a:	9a08      	ldr	r2, [sp, #32]
 800726c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007270:	4293      	cmp	r3, r2
 8007272:	db20      	blt.n	80072b6 <_strtod_l+0x44e>
 8007274:	4c5f      	ldr	r4, [pc, #380]	; (80073f4 <_strtod_l+0x58c>)
 8007276:	f1c6 060f 	rsb	r6, r6, #15
 800727a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800727e:	4642      	mov	r2, r8
 8007280:	464b      	mov	r3, r9
 8007282:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007286:	f7f9 f9c7 	bl	8000618 <__aeabi_dmul>
 800728a:	9b08      	ldr	r3, [sp, #32]
 800728c:	1b9e      	subs	r6, r3, r6
 800728e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007292:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007296:	e7e3      	b.n	8007260 <_strtod_l+0x3f8>
 8007298:	9b08      	ldr	r3, [sp, #32]
 800729a:	3316      	adds	r3, #22
 800729c:	db0b      	blt.n	80072b6 <_strtod_l+0x44e>
 800729e:	9b05      	ldr	r3, [sp, #20]
 80072a0:	1bdf      	subs	r7, r3, r7
 80072a2:	4b54      	ldr	r3, [pc, #336]	; (80073f4 <_strtod_l+0x58c>)
 80072a4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80072a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072ac:	4640      	mov	r0, r8
 80072ae:	4649      	mov	r1, r9
 80072b0:	f7f9 fadc 	bl	800086c <__aeabi_ddiv>
 80072b4:	e7d6      	b.n	8007264 <_strtod_l+0x3fc>
 80072b6:	9b08      	ldr	r3, [sp, #32]
 80072b8:	1b75      	subs	r5, r6, r5
 80072ba:	441d      	add	r5, r3
 80072bc:	2d00      	cmp	r5, #0
 80072be:	dd70      	ble.n	80073a2 <_strtod_l+0x53a>
 80072c0:	f015 030f 	ands.w	r3, r5, #15
 80072c4:	d00a      	beq.n	80072dc <_strtod_l+0x474>
 80072c6:	494b      	ldr	r1, [pc, #300]	; (80073f4 <_strtod_l+0x58c>)
 80072c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80072cc:	4642      	mov	r2, r8
 80072ce:	464b      	mov	r3, r9
 80072d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072d4:	f7f9 f9a0 	bl	8000618 <__aeabi_dmul>
 80072d8:	4680      	mov	r8, r0
 80072da:	4689      	mov	r9, r1
 80072dc:	f035 050f 	bics.w	r5, r5, #15
 80072e0:	d04d      	beq.n	800737e <_strtod_l+0x516>
 80072e2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80072e6:	dd22      	ble.n	800732e <_strtod_l+0x4c6>
 80072e8:	2500      	movs	r5, #0
 80072ea:	46ab      	mov	fp, r5
 80072ec:	9509      	str	r5, [sp, #36]	; 0x24
 80072ee:	9505      	str	r5, [sp, #20]
 80072f0:	2322      	movs	r3, #34	; 0x22
 80072f2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80073fc <_strtod_l+0x594>
 80072f6:	6023      	str	r3, [r4, #0]
 80072f8:	f04f 0800 	mov.w	r8, #0
 80072fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f43f aded 	beq.w	8006ede <_strtod_l+0x76>
 8007304:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007306:	4620      	mov	r0, r4
 8007308:	f002 fe0e 	bl	8009f28 <_Bfree>
 800730c:	9905      	ldr	r1, [sp, #20]
 800730e:	4620      	mov	r0, r4
 8007310:	f002 fe0a 	bl	8009f28 <_Bfree>
 8007314:	4659      	mov	r1, fp
 8007316:	4620      	mov	r0, r4
 8007318:	f002 fe06 	bl	8009f28 <_Bfree>
 800731c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800731e:	4620      	mov	r0, r4
 8007320:	f002 fe02 	bl	8009f28 <_Bfree>
 8007324:	4629      	mov	r1, r5
 8007326:	4620      	mov	r0, r4
 8007328:	f002 fdfe 	bl	8009f28 <_Bfree>
 800732c:	e5d7      	b.n	8006ede <_strtod_l+0x76>
 800732e:	4b32      	ldr	r3, [pc, #200]	; (80073f8 <_strtod_l+0x590>)
 8007330:	9304      	str	r3, [sp, #16]
 8007332:	2300      	movs	r3, #0
 8007334:	112d      	asrs	r5, r5, #4
 8007336:	4640      	mov	r0, r8
 8007338:	4649      	mov	r1, r9
 800733a:	469a      	mov	sl, r3
 800733c:	2d01      	cmp	r5, #1
 800733e:	dc21      	bgt.n	8007384 <_strtod_l+0x51c>
 8007340:	b10b      	cbz	r3, 8007346 <_strtod_l+0x4de>
 8007342:	4680      	mov	r8, r0
 8007344:	4689      	mov	r9, r1
 8007346:	492c      	ldr	r1, [pc, #176]	; (80073f8 <_strtod_l+0x590>)
 8007348:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800734c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007350:	4642      	mov	r2, r8
 8007352:	464b      	mov	r3, r9
 8007354:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007358:	f7f9 f95e 	bl	8000618 <__aeabi_dmul>
 800735c:	4b27      	ldr	r3, [pc, #156]	; (80073fc <_strtod_l+0x594>)
 800735e:	460a      	mov	r2, r1
 8007360:	400b      	ands	r3, r1
 8007362:	4927      	ldr	r1, [pc, #156]	; (8007400 <_strtod_l+0x598>)
 8007364:	428b      	cmp	r3, r1
 8007366:	4680      	mov	r8, r0
 8007368:	d8be      	bhi.n	80072e8 <_strtod_l+0x480>
 800736a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800736e:	428b      	cmp	r3, r1
 8007370:	bf86      	itte	hi
 8007372:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007404 <_strtod_l+0x59c>
 8007376:	f04f 38ff 	movhi.w	r8, #4294967295
 800737a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800737e:	2300      	movs	r3, #0
 8007380:	9304      	str	r3, [sp, #16]
 8007382:	e07b      	b.n	800747c <_strtod_l+0x614>
 8007384:	07ea      	lsls	r2, r5, #31
 8007386:	d505      	bpl.n	8007394 <_strtod_l+0x52c>
 8007388:	9b04      	ldr	r3, [sp, #16]
 800738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738e:	f7f9 f943 	bl	8000618 <__aeabi_dmul>
 8007392:	2301      	movs	r3, #1
 8007394:	9a04      	ldr	r2, [sp, #16]
 8007396:	3208      	adds	r2, #8
 8007398:	f10a 0a01 	add.w	sl, sl, #1
 800739c:	106d      	asrs	r5, r5, #1
 800739e:	9204      	str	r2, [sp, #16]
 80073a0:	e7cc      	b.n	800733c <_strtod_l+0x4d4>
 80073a2:	d0ec      	beq.n	800737e <_strtod_l+0x516>
 80073a4:	426d      	negs	r5, r5
 80073a6:	f015 020f 	ands.w	r2, r5, #15
 80073aa:	d00a      	beq.n	80073c2 <_strtod_l+0x55a>
 80073ac:	4b11      	ldr	r3, [pc, #68]	; (80073f4 <_strtod_l+0x58c>)
 80073ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073b2:	4640      	mov	r0, r8
 80073b4:	4649      	mov	r1, r9
 80073b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ba:	f7f9 fa57 	bl	800086c <__aeabi_ddiv>
 80073be:	4680      	mov	r8, r0
 80073c0:	4689      	mov	r9, r1
 80073c2:	112d      	asrs	r5, r5, #4
 80073c4:	d0db      	beq.n	800737e <_strtod_l+0x516>
 80073c6:	2d1f      	cmp	r5, #31
 80073c8:	dd1e      	ble.n	8007408 <_strtod_l+0x5a0>
 80073ca:	2500      	movs	r5, #0
 80073cc:	46ab      	mov	fp, r5
 80073ce:	9509      	str	r5, [sp, #36]	; 0x24
 80073d0:	9505      	str	r5, [sp, #20]
 80073d2:	2322      	movs	r3, #34	; 0x22
 80073d4:	f04f 0800 	mov.w	r8, #0
 80073d8:	f04f 0900 	mov.w	r9, #0
 80073dc:	6023      	str	r3, [r4, #0]
 80073de:	e78d      	b.n	80072fc <_strtod_l+0x494>
 80073e0:	0800b676 	.word	0x0800b676
 80073e4:	0800b528 	.word	0x0800b528
 80073e8:	0800b66e 	.word	0x0800b66e
 80073ec:	0800b6a8 	.word	0x0800b6a8
 80073f0:	0800b938 	.word	0x0800b938
 80073f4:	0800b818 	.word	0x0800b818
 80073f8:	0800b7f0 	.word	0x0800b7f0
 80073fc:	7ff00000 	.word	0x7ff00000
 8007400:	7ca00000 	.word	0x7ca00000
 8007404:	7fefffff 	.word	0x7fefffff
 8007408:	f015 0310 	ands.w	r3, r5, #16
 800740c:	bf18      	it	ne
 800740e:	236a      	movne	r3, #106	; 0x6a
 8007410:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80077b4 <_strtod_l+0x94c>
 8007414:	9304      	str	r3, [sp, #16]
 8007416:	4640      	mov	r0, r8
 8007418:	4649      	mov	r1, r9
 800741a:	2300      	movs	r3, #0
 800741c:	07ea      	lsls	r2, r5, #31
 800741e:	d504      	bpl.n	800742a <_strtod_l+0x5c2>
 8007420:	e9da 2300 	ldrd	r2, r3, [sl]
 8007424:	f7f9 f8f8 	bl	8000618 <__aeabi_dmul>
 8007428:	2301      	movs	r3, #1
 800742a:	106d      	asrs	r5, r5, #1
 800742c:	f10a 0a08 	add.w	sl, sl, #8
 8007430:	d1f4      	bne.n	800741c <_strtod_l+0x5b4>
 8007432:	b10b      	cbz	r3, 8007438 <_strtod_l+0x5d0>
 8007434:	4680      	mov	r8, r0
 8007436:	4689      	mov	r9, r1
 8007438:	9b04      	ldr	r3, [sp, #16]
 800743a:	b1bb      	cbz	r3, 800746c <_strtod_l+0x604>
 800743c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007440:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007444:	2b00      	cmp	r3, #0
 8007446:	4649      	mov	r1, r9
 8007448:	dd10      	ble.n	800746c <_strtod_l+0x604>
 800744a:	2b1f      	cmp	r3, #31
 800744c:	f340 811e 	ble.w	800768c <_strtod_l+0x824>
 8007450:	2b34      	cmp	r3, #52	; 0x34
 8007452:	bfde      	ittt	le
 8007454:	f04f 33ff 	movle.w	r3, #4294967295
 8007458:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800745c:	4093      	lslle	r3, r2
 800745e:	f04f 0800 	mov.w	r8, #0
 8007462:	bfcc      	ite	gt
 8007464:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007468:	ea03 0901 	andle.w	r9, r3, r1
 800746c:	2200      	movs	r2, #0
 800746e:	2300      	movs	r3, #0
 8007470:	4640      	mov	r0, r8
 8007472:	4649      	mov	r1, r9
 8007474:	f7f9 fb38 	bl	8000ae8 <__aeabi_dcmpeq>
 8007478:	2800      	cmp	r0, #0
 800747a:	d1a6      	bne.n	80073ca <_strtod_l+0x562>
 800747c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007482:	4633      	mov	r3, r6
 8007484:	465a      	mov	r2, fp
 8007486:	4620      	mov	r0, r4
 8007488:	f002 fdb6 	bl	8009ff8 <__s2b>
 800748c:	9009      	str	r0, [sp, #36]	; 0x24
 800748e:	2800      	cmp	r0, #0
 8007490:	f43f af2a 	beq.w	80072e8 <_strtod_l+0x480>
 8007494:	9a08      	ldr	r2, [sp, #32]
 8007496:	9b05      	ldr	r3, [sp, #20]
 8007498:	2a00      	cmp	r2, #0
 800749a:	eba3 0307 	sub.w	r3, r3, r7
 800749e:	bfa8      	it	ge
 80074a0:	2300      	movge	r3, #0
 80074a2:	930c      	str	r3, [sp, #48]	; 0x30
 80074a4:	2500      	movs	r5, #0
 80074a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80074aa:	9312      	str	r3, [sp, #72]	; 0x48
 80074ac:	46ab      	mov	fp, r5
 80074ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b0:	4620      	mov	r0, r4
 80074b2:	6859      	ldr	r1, [r3, #4]
 80074b4:	f002 fcf8 	bl	8009ea8 <_Balloc>
 80074b8:	9005      	str	r0, [sp, #20]
 80074ba:	2800      	cmp	r0, #0
 80074bc:	f43f af18 	beq.w	80072f0 <_strtod_l+0x488>
 80074c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c2:	691a      	ldr	r2, [r3, #16]
 80074c4:	3202      	adds	r2, #2
 80074c6:	f103 010c 	add.w	r1, r3, #12
 80074ca:	0092      	lsls	r2, r2, #2
 80074cc:	300c      	adds	r0, #12
 80074ce:	f001 f9e6 	bl	800889e <memcpy>
 80074d2:	ec49 8b10 	vmov	d0, r8, r9
 80074d6:	aa18      	add	r2, sp, #96	; 0x60
 80074d8:	a917      	add	r1, sp, #92	; 0x5c
 80074da:	4620      	mov	r0, r4
 80074dc:	f003 f8c0 	bl	800a660 <__d2b>
 80074e0:	ec49 8b18 	vmov	d8, r8, r9
 80074e4:	9016      	str	r0, [sp, #88]	; 0x58
 80074e6:	2800      	cmp	r0, #0
 80074e8:	f43f af02 	beq.w	80072f0 <_strtod_l+0x488>
 80074ec:	2101      	movs	r1, #1
 80074ee:	4620      	mov	r0, r4
 80074f0:	f002 fe1a 	bl	800a128 <__i2b>
 80074f4:	4683      	mov	fp, r0
 80074f6:	2800      	cmp	r0, #0
 80074f8:	f43f aefa 	beq.w	80072f0 <_strtod_l+0x488>
 80074fc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80074fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007500:	2e00      	cmp	r6, #0
 8007502:	bfab      	itete	ge
 8007504:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007506:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007508:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800750a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800750e:	bfac      	ite	ge
 8007510:	eb06 0a03 	addge.w	sl, r6, r3
 8007514:	1b9f      	sublt	r7, r3, r6
 8007516:	9b04      	ldr	r3, [sp, #16]
 8007518:	1af6      	subs	r6, r6, r3
 800751a:	4416      	add	r6, r2
 800751c:	4ba0      	ldr	r3, [pc, #640]	; (80077a0 <_strtod_l+0x938>)
 800751e:	3e01      	subs	r6, #1
 8007520:	429e      	cmp	r6, r3
 8007522:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007526:	f280 80c4 	bge.w	80076b2 <_strtod_l+0x84a>
 800752a:	1b9b      	subs	r3, r3, r6
 800752c:	2b1f      	cmp	r3, #31
 800752e:	eba2 0203 	sub.w	r2, r2, r3
 8007532:	f04f 0101 	mov.w	r1, #1
 8007536:	f300 80b0 	bgt.w	800769a <_strtod_l+0x832>
 800753a:	fa01 f303 	lsl.w	r3, r1, r3
 800753e:	930e      	str	r3, [sp, #56]	; 0x38
 8007540:	2300      	movs	r3, #0
 8007542:	930d      	str	r3, [sp, #52]	; 0x34
 8007544:	eb0a 0602 	add.w	r6, sl, r2
 8007548:	9b04      	ldr	r3, [sp, #16]
 800754a:	45b2      	cmp	sl, r6
 800754c:	4417      	add	r7, r2
 800754e:	441f      	add	r7, r3
 8007550:	4653      	mov	r3, sl
 8007552:	bfa8      	it	ge
 8007554:	4633      	movge	r3, r6
 8007556:	42bb      	cmp	r3, r7
 8007558:	bfa8      	it	ge
 800755a:	463b      	movge	r3, r7
 800755c:	2b00      	cmp	r3, #0
 800755e:	bfc2      	ittt	gt
 8007560:	1af6      	subgt	r6, r6, r3
 8007562:	1aff      	subgt	r7, r7, r3
 8007564:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800756a:	2b00      	cmp	r3, #0
 800756c:	dd17      	ble.n	800759e <_strtod_l+0x736>
 800756e:	4659      	mov	r1, fp
 8007570:	461a      	mov	r2, r3
 8007572:	4620      	mov	r0, r4
 8007574:	f002 fe98 	bl	800a2a8 <__pow5mult>
 8007578:	4683      	mov	fp, r0
 800757a:	2800      	cmp	r0, #0
 800757c:	f43f aeb8 	beq.w	80072f0 <_strtod_l+0x488>
 8007580:	4601      	mov	r1, r0
 8007582:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007584:	4620      	mov	r0, r4
 8007586:	f002 fde5 	bl	800a154 <__multiply>
 800758a:	900b      	str	r0, [sp, #44]	; 0x2c
 800758c:	2800      	cmp	r0, #0
 800758e:	f43f aeaf 	beq.w	80072f0 <_strtod_l+0x488>
 8007592:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007594:	4620      	mov	r0, r4
 8007596:	f002 fcc7 	bl	8009f28 <_Bfree>
 800759a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800759c:	9316      	str	r3, [sp, #88]	; 0x58
 800759e:	2e00      	cmp	r6, #0
 80075a0:	f300 808c 	bgt.w	80076bc <_strtod_l+0x854>
 80075a4:	9b08      	ldr	r3, [sp, #32]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	dd08      	ble.n	80075bc <_strtod_l+0x754>
 80075aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075ac:	9905      	ldr	r1, [sp, #20]
 80075ae:	4620      	mov	r0, r4
 80075b0:	f002 fe7a 	bl	800a2a8 <__pow5mult>
 80075b4:	9005      	str	r0, [sp, #20]
 80075b6:	2800      	cmp	r0, #0
 80075b8:	f43f ae9a 	beq.w	80072f0 <_strtod_l+0x488>
 80075bc:	2f00      	cmp	r7, #0
 80075be:	dd08      	ble.n	80075d2 <_strtod_l+0x76a>
 80075c0:	9905      	ldr	r1, [sp, #20]
 80075c2:	463a      	mov	r2, r7
 80075c4:	4620      	mov	r0, r4
 80075c6:	f002 fec9 	bl	800a35c <__lshift>
 80075ca:	9005      	str	r0, [sp, #20]
 80075cc:	2800      	cmp	r0, #0
 80075ce:	f43f ae8f 	beq.w	80072f0 <_strtod_l+0x488>
 80075d2:	f1ba 0f00 	cmp.w	sl, #0
 80075d6:	dd08      	ble.n	80075ea <_strtod_l+0x782>
 80075d8:	4659      	mov	r1, fp
 80075da:	4652      	mov	r2, sl
 80075dc:	4620      	mov	r0, r4
 80075de:	f002 febd 	bl	800a35c <__lshift>
 80075e2:	4683      	mov	fp, r0
 80075e4:	2800      	cmp	r0, #0
 80075e6:	f43f ae83 	beq.w	80072f0 <_strtod_l+0x488>
 80075ea:	9a05      	ldr	r2, [sp, #20]
 80075ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80075ee:	4620      	mov	r0, r4
 80075f0:	f002 ff3c 	bl	800a46c <__mdiff>
 80075f4:	4605      	mov	r5, r0
 80075f6:	2800      	cmp	r0, #0
 80075f8:	f43f ae7a 	beq.w	80072f0 <_strtod_l+0x488>
 80075fc:	68c3      	ldr	r3, [r0, #12]
 80075fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007600:	2300      	movs	r3, #0
 8007602:	60c3      	str	r3, [r0, #12]
 8007604:	4659      	mov	r1, fp
 8007606:	f002 ff15 	bl	800a434 <__mcmp>
 800760a:	2800      	cmp	r0, #0
 800760c:	da60      	bge.n	80076d0 <_strtod_l+0x868>
 800760e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007610:	ea53 0308 	orrs.w	r3, r3, r8
 8007614:	f040 8084 	bne.w	8007720 <_strtod_l+0x8b8>
 8007618:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800761c:	2b00      	cmp	r3, #0
 800761e:	d17f      	bne.n	8007720 <_strtod_l+0x8b8>
 8007620:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007624:	0d1b      	lsrs	r3, r3, #20
 8007626:	051b      	lsls	r3, r3, #20
 8007628:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800762c:	d978      	bls.n	8007720 <_strtod_l+0x8b8>
 800762e:	696b      	ldr	r3, [r5, #20]
 8007630:	b913      	cbnz	r3, 8007638 <_strtod_l+0x7d0>
 8007632:	692b      	ldr	r3, [r5, #16]
 8007634:	2b01      	cmp	r3, #1
 8007636:	dd73      	ble.n	8007720 <_strtod_l+0x8b8>
 8007638:	4629      	mov	r1, r5
 800763a:	2201      	movs	r2, #1
 800763c:	4620      	mov	r0, r4
 800763e:	f002 fe8d 	bl	800a35c <__lshift>
 8007642:	4659      	mov	r1, fp
 8007644:	4605      	mov	r5, r0
 8007646:	f002 fef5 	bl	800a434 <__mcmp>
 800764a:	2800      	cmp	r0, #0
 800764c:	dd68      	ble.n	8007720 <_strtod_l+0x8b8>
 800764e:	9904      	ldr	r1, [sp, #16]
 8007650:	4a54      	ldr	r2, [pc, #336]	; (80077a4 <_strtod_l+0x93c>)
 8007652:	464b      	mov	r3, r9
 8007654:	2900      	cmp	r1, #0
 8007656:	f000 8084 	beq.w	8007762 <_strtod_l+0x8fa>
 800765a:	ea02 0109 	and.w	r1, r2, r9
 800765e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007662:	dc7e      	bgt.n	8007762 <_strtod_l+0x8fa>
 8007664:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007668:	f77f aeb3 	ble.w	80073d2 <_strtod_l+0x56a>
 800766c:	4b4e      	ldr	r3, [pc, #312]	; (80077a8 <_strtod_l+0x940>)
 800766e:	4640      	mov	r0, r8
 8007670:	4649      	mov	r1, r9
 8007672:	2200      	movs	r2, #0
 8007674:	f7f8 ffd0 	bl	8000618 <__aeabi_dmul>
 8007678:	4b4a      	ldr	r3, [pc, #296]	; (80077a4 <_strtod_l+0x93c>)
 800767a:	400b      	ands	r3, r1
 800767c:	4680      	mov	r8, r0
 800767e:	4689      	mov	r9, r1
 8007680:	2b00      	cmp	r3, #0
 8007682:	f47f ae3f 	bne.w	8007304 <_strtod_l+0x49c>
 8007686:	2322      	movs	r3, #34	; 0x22
 8007688:	6023      	str	r3, [r4, #0]
 800768a:	e63b      	b.n	8007304 <_strtod_l+0x49c>
 800768c:	f04f 32ff 	mov.w	r2, #4294967295
 8007690:	fa02 f303 	lsl.w	r3, r2, r3
 8007694:	ea03 0808 	and.w	r8, r3, r8
 8007698:	e6e8      	b.n	800746c <_strtod_l+0x604>
 800769a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800769e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80076a2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80076a6:	36e2      	adds	r6, #226	; 0xe2
 80076a8:	fa01 f306 	lsl.w	r3, r1, r6
 80076ac:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80076b0:	e748      	b.n	8007544 <_strtod_l+0x6dc>
 80076b2:	2100      	movs	r1, #0
 80076b4:	2301      	movs	r3, #1
 80076b6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80076ba:	e743      	b.n	8007544 <_strtod_l+0x6dc>
 80076bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80076be:	4632      	mov	r2, r6
 80076c0:	4620      	mov	r0, r4
 80076c2:	f002 fe4b 	bl	800a35c <__lshift>
 80076c6:	9016      	str	r0, [sp, #88]	; 0x58
 80076c8:	2800      	cmp	r0, #0
 80076ca:	f47f af6b 	bne.w	80075a4 <_strtod_l+0x73c>
 80076ce:	e60f      	b.n	80072f0 <_strtod_l+0x488>
 80076d0:	46ca      	mov	sl, r9
 80076d2:	d171      	bne.n	80077b8 <_strtod_l+0x950>
 80076d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076da:	b352      	cbz	r2, 8007732 <_strtod_l+0x8ca>
 80076dc:	4a33      	ldr	r2, [pc, #204]	; (80077ac <_strtod_l+0x944>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d12a      	bne.n	8007738 <_strtod_l+0x8d0>
 80076e2:	9b04      	ldr	r3, [sp, #16]
 80076e4:	4641      	mov	r1, r8
 80076e6:	b1fb      	cbz	r3, 8007728 <_strtod_l+0x8c0>
 80076e8:	4b2e      	ldr	r3, [pc, #184]	; (80077a4 <_strtod_l+0x93c>)
 80076ea:	ea09 0303 	and.w	r3, r9, r3
 80076ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80076f2:	f04f 32ff 	mov.w	r2, #4294967295
 80076f6:	d81a      	bhi.n	800772e <_strtod_l+0x8c6>
 80076f8:	0d1b      	lsrs	r3, r3, #20
 80076fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80076fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007702:	4299      	cmp	r1, r3
 8007704:	d118      	bne.n	8007738 <_strtod_l+0x8d0>
 8007706:	4b2a      	ldr	r3, [pc, #168]	; (80077b0 <_strtod_l+0x948>)
 8007708:	459a      	cmp	sl, r3
 800770a:	d102      	bne.n	8007712 <_strtod_l+0x8aa>
 800770c:	3101      	adds	r1, #1
 800770e:	f43f adef 	beq.w	80072f0 <_strtod_l+0x488>
 8007712:	4b24      	ldr	r3, [pc, #144]	; (80077a4 <_strtod_l+0x93c>)
 8007714:	ea0a 0303 	and.w	r3, sl, r3
 8007718:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800771c:	f04f 0800 	mov.w	r8, #0
 8007720:	9b04      	ldr	r3, [sp, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1a2      	bne.n	800766c <_strtod_l+0x804>
 8007726:	e5ed      	b.n	8007304 <_strtod_l+0x49c>
 8007728:	f04f 33ff 	mov.w	r3, #4294967295
 800772c:	e7e9      	b.n	8007702 <_strtod_l+0x89a>
 800772e:	4613      	mov	r3, r2
 8007730:	e7e7      	b.n	8007702 <_strtod_l+0x89a>
 8007732:	ea53 0308 	orrs.w	r3, r3, r8
 8007736:	d08a      	beq.n	800764e <_strtod_l+0x7e6>
 8007738:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800773a:	b1e3      	cbz	r3, 8007776 <_strtod_l+0x90e>
 800773c:	ea13 0f0a 	tst.w	r3, sl
 8007740:	d0ee      	beq.n	8007720 <_strtod_l+0x8b8>
 8007742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007744:	9a04      	ldr	r2, [sp, #16]
 8007746:	4640      	mov	r0, r8
 8007748:	4649      	mov	r1, r9
 800774a:	b1c3      	cbz	r3, 800777e <_strtod_l+0x916>
 800774c:	f7ff fb6f 	bl	8006e2e <sulp>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	ec51 0b18 	vmov	r0, r1, d8
 8007758:	f7f8 fda8 	bl	80002ac <__adddf3>
 800775c:	4680      	mov	r8, r0
 800775e:	4689      	mov	r9, r1
 8007760:	e7de      	b.n	8007720 <_strtod_l+0x8b8>
 8007762:	4013      	ands	r3, r2
 8007764:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007768:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800776c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007770:	f04f 38ff 	mov.w	r8, #4294967295
 8007774:	e7d4      	b.n	8007720 <_strtod_l+0x8b8>
 8007776:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007778:	ea13 0f08 	tst.w	r3, r8
 800777c:	e7e0      	b.n	8007740 <_strtod_l+0x8d8>
 800777e:	f7ff fb56 	bl	8006e2e <sulp>
 8007782:	4602      	mov	r2, r0
 8007784:	460b      	mov	r3, r1
 8007786:	ec51 0b18 	vmov	r0, r1, d8
 800778a:	f7f8 fd8d 	bl	80002a8 <__aeabi_dsub>
 800778e:	2200      	movs	r2, #0
 8007790:	2300      	movs	r3, #0
 8007792:	4680      	mov	r8, r0
 8007794:	4689      	mov	r9, r1
 8007796:	f7f9 f9a7 	bl	8000ae8 <__aeabi_dcmpeq>
 800779a:	2800      	cmp	r0, #0
 800779c:	d0c0      	beq.n	8007720 <_strtod_l+0x8b8>
 800779e:	e618      	b.n	80073d2 <_strtod_l+0x56a>
 80077a0:	fffffc02 	.word	0xfffffc02
 80077a4:	7ff00000 	.word	0x7ff00000
 80077a8:	39500000 	.word	0x39500000
 80077ac:	000fffff 	.word	0x000fffff
 80077b0:	7fefffff 	.word	0x7fefffff
 80077b4:	0800b540 	.word	0x0800b540
 80077b8:	4659      	mov	r1, fp
 80077ba:	4628      	mov	r0, r5
 80077bc:	f002 ffaa 	bl	800a714 <__ratio>
 80077c0:	ec57 6b10 	vmov	r6, r7, d0
 80077c4:	ee10 0a10 	vmov	r0, s0
 80077c8:	2200      	movs	r2, #0
 80077ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80077ce:	4639      	mov	r1, r7
 80077d0:	f7f9 f99e 	bl	8000b10 <__aeabi_dcmple>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	d071      	beq.n	80078bc <_strtod_l+0xa54>
 80077d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d17c      	bne.n	80078d8 <_strtod_l+0xa70>
 80077de:	f1b8 0f00 	cmp.w	r8, #0
 80077e2:	d15a      	bne.n	800789a <_strtod_l+0xa32>
 80077e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d15d      	bne.n	80078a8 <_strtod_l+0xa40>
 80077ec:	4b90      	ldr	r3, [pc, #576]	; (8007a30 <_strtod_l+0xbc8>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	4630      	mov	r0, r6
 80077f2:	4639      	mov	r1, r7
 80077f4:	f7f9 f982 	bl	8000afc <__aeabi_dcmplt>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d15c      	bne.n	80078b6 <_strtod_l+0xa4e>
 80077fc:	4630      	mov	r0, r6
 80077fe:	4639      	mov	r1, r7
 8007800:	4b8c      	ldr	r3, [pc, #560]	; (8007a34 <_strtod_l+0xbcc>)
 8007802:	2200      	movs	r2, #0
 8007804:	f7f8 ff08 	bl	8000618 <__aeabi_dmul>
 8007808:	4606      	mov	r6, r0
 800780a:	460f      	mov	r7, r1
 800780c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007810:	9606      	str	r6, [sp, #24]
 8007812:	9307      	str	r3, [sp, #28]
 8007814:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007818:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800781c:	4b86      	ldr	r3, [pc, #536]	; (8007a38 <_strtod_l+0xbd0>)
 800781e:	ea0a 0303 	and.w	r3, sl, r3
 8007822:	930d      	str	r3, [sp, #52]	; 0x34
 8007824:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007826:	4b85      	ldr	r3, [pc, #532]	; (8007a3c <_strtod_l+0xbd4>)
 8007828:	429a      	cmp	r2, r3
 800782a:	f040 8090 	bne.w	800794e <_strtod_l+0xae6>
 800782e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007832:	ec49 8b10 	vmov	d0, r8, r9
 8007836:	f002 fea3 	bl	800a580 <__ulp>
 800783a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800783e:	ec51 0b10 	vmov	r0, r1, d0
 8007842:	f7f8 fee9 	bl	8000618 <__aeabi_dmul>
 8007846:	4642      	mov	r2, r8
 8007848:	464b      	mov	r3, r9
 800784a:	f7f8 fd2f 	bl	80002ac <__adddf3>
 800784e:	460b      	mov	r3, r1
 8007850:	4979      	ldr	r1, [pc, #484]	; (8007a38 <_strtod_l+0xbd0>)
 8007852:	4a7b      	ldr	r2, [pc, #492]	; (8007a40 <_strtod_l+0xbd8>)
 8007854:	4019      	ands	r1, r3
 8007856:	4291      	cmp	r1, r2
 8007858:	4680      	mov	r8, r0
 800785a:	d944      	bls.n	80078e6 <_strtod_l+0xa7e>
 800785c:	ee18 2a90 	vmov	r2, s17
 8007860:	4b78      	ldr	r3, [pc, #480]	; (8007a44 <_strtod_l+0xbdc>)
 8007862:	429a      	cmp	r2, r3
 8007864:	d104      	bne.n	8007870 <_strtod_l+0xa08>
 8007866:	ee18 3a10 	vmov	r3, s16
 800786a:	3301      	adds	r3, #1
 800786c:	f43f ad40 	beq.w	80072f0 <_strtod_l+0x488>
 8007870:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007a44 <_strtod_l+0xbdc>
 8007874:	f04f 38ff 	mov.w	r8, #4294967295
 8007878:	9916      	ldr	r1, [sp, #88]	; 0x58
 800787a:	4620      	mov	r0, r4
 800787c:	f002 fb54 	bl	8009f28 <_Bfree>
 8007880:	9905      	ldr	r1, [sp, #20]
 8007882:	4620      	mov	r0, r4
 8007884:	f002 fb50 	bl	8009f28 <_Bfree>
 8007888:	4659      	mov	r1, fp
 800788a:	4620      	mov	r0, r4
 800788c:	f002 fb4c 	bl	8009f28 <_Bfree>
 8007890:	4629      	mov	r1, r5
 8007892:	4620      	mov	r0, r4
 8007894:	f002 fb48 	bl	8009f28 <_Bfree>
 8007898:	e609      	b.n	80074ae <_strtod_l+0x646>
 800789a:	f1b8 0f01 	cmp.w	r8, #1
 800789e:	d103      	bne.n	80078a8 <_strtod_l+0xa40>
 80078a0:	f1b9 0f00 	cmp.w	r9, #0
 80078a4:	f43f ad95 	beq.w	80073d2 <_strtod_l+0x56a>
 80078a8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007a00 <_strtod_l+0xb98>
 80078ac:	4f60      	ldr	r7, [pc, #384]	; (8007a30 <_strtod_l+0xbc8>)
 80078ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80078b2:	2600      	movs	r6, #0
 80078b4:	e7ae      	b.n	8007814 <_strtod_l+0x9ac>
 80078b6:	4f5f      	ldr	r7, [pc, #380]	; (8007a34 <_strtod_l+0xbcc>)
 80078b8:	2600      	movs	r6, #0
 80078ba:	e7a7      	b.n	800780c <_strtod_l+0x9a4>
 80078bc:	4b5d      	ldr	r3, [pc, #372]	; (8007a34 <_strtod_l+0xbcc>)
 80078be:	4630      	mov	r0, r6
 80078c0:	4639      	mov	r1, r7
 80078c2:	2200      	movs	r2, #0
 80078c4:	f7f8 fea8 	bl	8000618 <__aeabi_dmul>
 80078c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ca:	4606      	mov	r6, r0
 80078cc:	460f      	mov	r7, r1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d09c      	beq.n	800780c <_strtod_l+0x9a4>
 80078d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80078d6:	e79d      	b.n	8007814 <_strtod_l+0x9ac>
 80078d8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007a08 <_strtod_l+0xba0>
 80078dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80078e0:	ec57 6b17 	vmov	r6, r7, d7
 80078e4:	e796      	b.n	8007814 <_strtod_l+0x9ac>
 80078e6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80078ea:	9b04      	ldr	r3, [sp, #16]
 80078ec:	46ca      	mov	sl, r9
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1c2      	bne.n	8007878 <_strtod_l+0xa10>
 80078f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80078f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078f8:	0d1b      	lsrs	r3, r3, #20
 80078fa:	051b      	lsls	r3, r3, #20
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d1bb      	bne.n	8007878 <_strtod_l+0xa10>
 8007900:	4630      	mov	r0, r6
 8007902:	4639      	mov	r1, r7
 8007904:	f7f9 f9d0 	bl	8000ca8 <__aeabi_d2lz>
 8007908:	f7f8 fe58 	bl	80005bc <__aeabi_l2d>
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	4630      	mov	r0, r6
 8007912:	4639      	mov	r1, r7
 8007914:	f7f8 fcc8 	bl	80002a8 <__aeabi_dsub>
 8007918:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800791a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800791e:	ea43 0308 	orr.w	r3, r3, r8
 8007922:	4313      	orrs	r3, r2
 8007924:	4606      	mov	r6, r0
 8007926:	460f      	mov	r7, r1
 8007928:	d054      	beq.n	80079d4 <_strtod_l+0xb6c>
 800792a:	a339      	add	r3, pc, #228	; (adr r3, 8007a10 <_strtod_l+0xba8>)
 800792c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007930:	f7f9 f8e4 	bl	8000afc <__aeabi_dcmplt>
 8007934:	2800      	cmp	r0, #0
 8007936:	f47f ace5 	bne.w	8007304 <_strtod_l+0x49c>
 800793a:	a337      	add	r3, pc, #220	; (adr r3, 8007a18 <_strtod_l+0xbb0>)
 800793c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007940:	4630      	mov	r0, r6
 8007942:	4639      	mov	r1, r7
 8007944:	f7f9 f8f8 	bl	8000b38 <__aeabi_dcmpgt>
 8007948:	2800      	cmp	r0, #0
 800794a:	d095      	beq.n	8007878 <_strtod_l+0xa10>
 800794c:	e4da      	b.n	8007304 <_strtod_l+0x49c>
 800794e:	9b04      	ldr	r3, [sp, #16]
 8007950:	b333      	cbz	r3, 80079a0 <_strtod_l+0xb38>
 8007952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007954:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007958:	d822      	bhi.n	80079a0 <_strtod_l+0xb38>
 800795a:	a331      	add	r3, pc, #196	; (adr r3, 8007a20 <_strtod_l+0xbb8>)
 800795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007960:	4630      	mov	r0, r6
 8007962:	4639      	mov	r1, r7
 8007964:	f7f9 f8d4 	bl	8000b10 <__aeabi_dcmple>
 8007968:	b1a0      	cbz	r0, 8007994 <_strtod_l+0xb2c>
 800796a:	4639      	mov	r1, r7
 800796c:	4630      	mov	r0, r6
 800796e:	f7f9 f92b 	bl	8000bc8 <__aeabi_d2uiz>
 8007972:	2801      	cmp	r0, #1
 8007974:	bf38      	it	cc
 8007976:	2001      	movcc	r0, #1
 8007978:	f7f8 fdd4 	bl	8000524 <__aeabi_ui2d>
 800797c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800797e:	4606      	mov	r6, r0
 8007980:	460f      	mov	r7, r1
 8007982:	bb23      	cbnz	r3, 80079ce <_strtod_l+0xb66>
 8007984:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007988:	9010      	str	r0, [sp, #64]	; 0x40
 800798a:	9311      	str	r3, [sp, #68]	; 0x44
 800798c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007990:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007996:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007998:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800799c:	1a9b      	subs	r3, r3, r2
 800799e:	930f      	str	r3, [sp, #60]	; 0x3c
 80079a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80079a4:	eeb0 0a48 	vmov.f32	s0, s16
 80079a8:	eef0 0a68 	vmov.f32	s1, s17
 80079ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80079b0:	f002 fde6 	bl	800a580 <__ulp>
 80079b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80079b8:	ec53 2b10 	vmov	r2, r3, d0
 80079bc:	f7f8 fe2c 	bl	8000618 <__aeabi_dmul>
 80079c0:	ec53 2b18 	vmov	r2, r3, d8
 80079c4:	f7f8 fc72 	bl	80002ac <__adddf3>
 80079c8:	4680      	mov	r8, r0
 80079ca:	4689      	mov	r9, r1
 80079cc:	e78d      	b.n	80078ea <_strtod_l+0xa82>
 80079ce:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80079d2:	e7db      	b.n	800798c <_strtod_l+0xb24>
 80079d4:	a314      	add	r3, pc, #80	; (adr r3, 8007a28 <_strtod_l+0xbc0>)
 80079d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079da:	f7f9 f88f 	bl	8000afc <__aeabi_dcmplt>
 80079de:	e7b3      	b.n	8007948 <_strtod_l+0xae0>
 80079e0:	2300      	movs	r3, #0
 80079e2:	930a      	str	r3, [sp, #40]	; 0x28
 80079e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80079e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079e8:	6013      	str	r3, [r2, #0]
 80079ea:	f7ff ba7c 	b.w	8006ee6 <_strtod_l+0x7e>
 80079ee:	2a65      	cmp	r2, #101	; 0x65
 80079f0:	f43f ab75 	beq.w	80070de <_strtod_l+0x276>
 80079f4:	2a45      	cmp	r2, #69	; 0x45
 80079f6:	f43f ab72 	beq.w	80070de <_strtod_l+0x276>
 80079fa:	2301      	movs	r3, #1
 80079fc:	f7ff bbaa 	b.w	8007154 <_strtod_l+0x2ec>
 8007a00:	00000000 	.word	0x00000000
 8007a04:	bff00000 	.word	0xbff00000
 8007a08:	00000000 	.word	0x00000000
 8007a0c:	3ff00000 	.word	0x3ff00000
 8007a10:	94a03595 	.word	0x94a03595
 8007a14:	3fdfffff 	.word	0x3fdfffff
 8007a18:	35afe535 	.word	0x35afe535
 8007a1c:	3fe00000 	.word	0x3fe00000
 8007a20:	ffc00000 	.word	0xffc00000
 8007a24:	41dfffff 	.word	0x41dfffff
 8007a28:	94a03595 	.word	0x94a03595
 8007a2c:	3fcfffff 	.word	0x3fcfffff
 8007a30:	3ff00000 	.word	0x3ff00000
 8007a34:	3fe00000 	.word	0x3fe00000
 8007a38:	7ff00000 	.word	0x7ff00000
 8007a3c:	7fe00000 	.word	0x7fe00000
 8007a40:	7c9fffff 	.word	0x7c9fffff
 8007a44:	7fefffff 	.word	0x7fefffff

08007a48 <strtof>:
 8007a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a4c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8007b10 <strtof+0xc8>
 8007a50:	4b2a      	ldr	r3, [pc, #168]	; (8007afc <strtof+0xb4>)
 8007a52:	460a      	mov	r2, r1
 8007a54:	ed2d 8b02 	vpush	{d8}
 8007a58:	4601      	mov	r1, r0
 8007a5a:	f8d8 0000 	ldr.w	r0, [r8]
 8007a5e:	f7ff fa03 	bl	8006e68 <_strtod_l>
 8007a62:	ec55 4b10 	vmov	r4, r5, d0
 8007a66:	ee10 2a10 	vmov	r2, s0
 8007a6a:	ee10 0a10 	vmov	r0, s0
 8007a6e:	462b      	mov	r3, r5
 8007a70:	4629      	mov	r1, r5
 8007a72:	f7f9 f86b 	bl	8000b4c <__aeabi_dcmpun>
 8007a76:	b190      	cbz	r0, 8007a9e <strtof+0x56>
 8007a78:	2d00      	cmp	r5, #0
 8007a7a:	4821      	ldr	r0, [pc, #132]	; (8007b00 <strtof+0xb8>)
 8007a7c:	da09      	bge.n	8007a92 <strtof+0x4a>
 8007a7e:	f000 ff27 	bl	80088d0 <nanf>
 8007a82:	eeb1 8a40 	vneg.f32	s16, s0
 8007a86:	eeb0 0a48 	vmov.f32	s0, s16
 8007a8a:	ecbd 8b02 	vpop	{d8}
 8007a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a92:	ecbd 8b02 	vpop	{d8}
 8007a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a9a:	f000 bf19 	b.w	80088d0 <nanf>
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	f7f9 f8b1 	bl	8000c08 <__aeabi_d2f>
 8007aa6:	ee08 0a10 	vmov	s16, r0
 8007aaa:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007b04 <strtof+0xbc>
 8007aae:	eeb0 7ac8 	vabs.f32	s14, s16
 8007ab2:	eeb4 7a67 	vcmp.f32	s14, s15
 8007ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aba:	dd11      	ble.n	8007ae0 <strtof+0x98>
 8007abc:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8007ac0:	4b11      	ldr	r3, [pc, #68]	; (8007b08 <strtof+0xc0>)
 8007ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	4639      	mov	r1, r7
 8007aca:	f7f9 f83f 	bl	8000b4c <__aeabi_dcmpun>
 8007ace:	b980      	cbnz	r0, 8007af2 <strtof+0xaa>
 8007ad0:	4b0d      	ldr	r3, [pc, #52]	; (8007b08 <strtof+0xc0>)
 8007ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	4639      	mov	r1, r7
 8007ada:	f7f9 f819 	bl	8000b10 <__aeabi_dcmple>
 8007ade:	b940      	cbnz	r0, 8007af2 <strtof+0xaa>
 8007ae0:	ee18 3a10 	vmov	r3, s16
 8007ae4:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007ae8:	d1cd      	bne.n	8007a86 <strtof+0x3e>
 8007aea:	4b08      	ldr	r3, [pc, #32]	; (8007b0c <strtof+0xc4>)
 8007aec:	402b      	ands	r3, r5
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d0c9      	beq.n	8007a86 <strtof+0x3e>
 8007af2:	f8d8 3000 	ldr.w	r3, [r8]
 8007af6:	2222      	movs	r2, #34	; 0x22
 8007af8:	601a      	str	r2, [r3, #0]
 8007afa:	e7c4      	b.n	8007a86 <strtof+0x3e>
 8007afc:	20000018 	.word	0x20000018
 8007b00:	0800b938 	.word	0x0800b938
 8007b04:	7f7fffff 	.word	0x7f7fffff
 8007b08:	7fefffff 	.word	0x7fefffff
 8007b0c:	7ff00000 	.word	0x7ff00000
 8007b10:	200001d0 	.word	0x200001d0

08007b14 <_strtol_l.constprop.0>:
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b1a:	d001      	beq.n	8007b20 <_strtol_l.constprop.0+0xc>
 8007b1c:	2b24      	cmp	r3, #36	; 0x24
 8007b1e:	d906      	bls.n	8007b2e <_strtol_l.constprop.0+0x1a>
 8007b20:	f000 fe88 	bl	8008834 <__errno>
 8007b24:	2316      	movs	r3, #22
 8007b26:	6003      	str	r3, [r0, #0]
 8007b28:	2000      	movs	r0, #0
 8007b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b2e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007c14 <_strtol_l.constprop.0+0x100>
 8007b32:	460d      	mov	r5, r1
 8007b34:	462e      	mov	r6, r5
 8007b36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b3a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007b3e:	f017 0708 	ands.w	r7, r7, #8
 8007b42:	d1f7      	bne.n	8007b34 <_strtol_l.constprop.0+0x20>
 8007b44:	2c2d      	cmp	r4, #45	; 0x2d
 8007b46:	d132      	bne.n	8007bae <_strtol_l.constprop.0+0x9a>
 8007b48:	782c      	ldrb	r4, [r5, #0]
 8007b4a:	2701      	movs	r7, #1
 8007b4c:	1cb5      	adds	r5, r6, #2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d05b      	beq.n	8007c0a <_strtol_l.constprop.0+0xf6>
 8007b52:	2b10      	cmp	r3, #16
 8007b54:	d109      	bne.n	8007b6a <_strtol_l.constprop.0+0x56>
 8007b56:	2c30      	cmp	r4, #48	; 0x30
 8007b58:	d107      	bne.n	8007b6a <_strtol_l.constprop.0+0x56>
 8007b5a:	782c      	ldrb	r4, [r5, #0]
 8007b5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007b60:	2c58      	cmp	r4, #88	; 0x58
 8007b62:	d14d      	bne.n	8007c00 <_strtol_l.constprop.0+0xec>
 8007b64:	786c      	ldrb	r4, [r5, #1]
 8007b66:	2310      	movs	r3, #16
 8007b68:	3502      	adds	r5, #2
 8007b6a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007b6e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b72:	f04f 0e00 	mov.w	lr, #0
 8007b76:	fbb8 f9f3 	udiv	r9, r8, r3
 8007b7a:	4676      	mov	r6, lr
 8007b7c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007b80:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007b84:	f1bc 0f09 	cmp.w	ip, #9
 8007b88:	d816      	bhi.n	8007bb8 <_strtol_l.constprop.0+0xa4>
 8007b8a:	4664      	mov	r4, ip
 8007b8c:	42a3      	cmp	r3, r4
 8007b8e:	dd24      	ble.n	8007bda <_strtol_l.constprop.0+0xc6>
 8007b90:	f1be 3fff 	cmp.w	lr, #4294967295
 8007b94:	d008      	beq.n	8007ba8 <_strtol_l.constprop.0+0x94>
 8007b96:	45b1      	cmp	r9, r6
 8007b98:	d31c      	bcc.n	8007bd4 <_strtol_l.constprop.0+0xc0>
 8007b9a:	d101      	bne.n	8007ba0 <_strtol_l.constprop.0+0x8c>
 8007b9c:	45a2      	cmp	sl, r4
 8007b9e:	db19      	blt.n	8007bd4 <_strtol_l.constprop.0+0xc0>
 8007ba0:	fb06 4603 	mla	r6, r6, r3, r4
 8007ba4:	f04f 0e01 	mov.w	lr, #1
 8007ba8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bac:	e7e8      	b.n	8007b80 <_strtol_l.constprop.0+0x6c>
 8007bae:	2c2b      	cmp	r4, #43	; 0x2b
 8007bb0:	bf04      	itt	eq
 8007bb2:	782c      	ldrbeq	r4, [r5, #0]
 8007bb4:	1cb5      	addeq	r5, r6, #2
 8007bb6:	e7ca      	b.n	8007b4e <_strtol_l.constprop.0+0x3a>
 8007bb8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007bbc:	f1bc 0f19 	cmp.w	ip, #25
 8007bc0:	d801      	bhi.n	8007bc6 <_strtol_l.constprop.0+0xb2>
 8007bc2:	3c37      	subs	r4, #55	; 0x37
 8007bc4:	e7e2      	b.n	8007b8c <_strtol_l.constprop.0+0x78>
 8007bc6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007bca:	f1bc 0f19 	cmp.w	ip, #25
 8007bce:	d804      	bhi.n	8007bda <_strtol_l.constprop.0+0xc6>
 8007bd0:	3c57      	subs	r4, #87	; 0x57
 8007bd2:	e7db      	b.n	8007b8c <_strtol_l.constprop.0+0x78>
 8007bd4:	f04f 3eff 	mov.w	lr, #4294967295
 8007bd8:	e7e6      	b.n	8007ba8 <_strtol_l.constprop.0+0x94>
 8007bda:	f1be 3fff 	cmp.w	lr, #4294967295
 8007bde:	d105      	bne.n	8007bec <_strtol_l.constprop.0+0xd8>
 8007be0:	2322      	movs	r3, #34	; 0x22
 8007be2:	6003      	str	r3, [r0, #0]
 8007be4:	4646      	mov	r6, r8
 8007be6:	b942      	cbnz	r2, 8007bfa <_strtol_l.constprop.0+0xe6>
 8007be8:	4630      	mov	r0, r6
 8007bea:	e79e      	b.n	8007b2a <_strtol_l.constprop.0+0x16>
 8007bec:	b107      	cbz	r7, 8007bf0 <_strtol_l.constprop.0+0xdc>
 8007bee:	4276      	negs	r6, r6
 8007bf0:	2a00      	cmp	r2, #0
 8007bf2:	d0f9      	beq.n	8007be8 <_strtol_l.constprop.0+0xd4>
 8007bf4:	f1be 0f00 	cmp.w	lr, #0
 8007bf8:	d000      	beq.n	8007bfc <_strtol_l.constprop.0+0xe8>
 8007bfa:	1e69      	subs	r1, r5, #1
 8007bfc:	6011      	str	r1, [r2, #0]
 8007bfe:	e7f3      	b.n	8007be8 <_strtol_l.constprop.0+0xd4>
 8007c00:	2430      	movs	r4, #48	; 0x30
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1b1      	bne.n	8007b6a <_strtol_l.constprop.0+0x56>
 8007c06:	2308      	movs	r3, #8
 8007c08:	e7af      	b.n	8007b6a <_strtol_l.constprop.0+0x56>
 8007c0a:	2c30      	cmp	r4, #48	; 0x30
 8007c0c:	d0a5      	beq.n	8007b5a <_strtol_l.constprop.0+0x46>
 8007c0e:	230a      	movs	r3, #10
 8007c10:	e7ab      	b.n	8007b6a <_strtol_l.constprop.0+0x56>
 8007c12:	bf00      	nop
 8007c14:	0800b569 	.word	0x0800b569

08007c18 <strtol>:
 8007c18:	4613      	mov	r3, r2
 8007c1a:	460a      	mov	r2, r1
 8007c1c:	4601      	mov	r1, r0
 8007c1e:	4802      	ldr	r0, [pc, #8]	; (8007c28 <strtol+0x10>)
 8007c20:	6800      	ldr	r0, [r0, #0]
 8007c22:	f7ff bf77 	b.w	8007b14 <_strtol_l.constprop.0>
 8007c26:	bf00      	nop
 8007c28:	200001d0 	.word	0x200001d0

08007c2c <__cvt>:
 8007c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c30:	ec55 4b10 	vmov	r4, r5, d0
 8007c34:	2d00      	cmp	r5, #0
 8007c36:	460e      	mov	r6, r1
 8007c38:	4619      	mov	r1, r3
 8007c3a:	462b      	mov	r3, r5
 8007c3c:	bfbb      	ittet	lt
 8007c3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c42:	461d      	movlt	r5, r3
 8007c44:	2300      	movge	r3, #0
 8007c46:	232d      	movlt	r3, #45	; 0x2d
 8007c48:	700b      	strb	r3, [r1, #0]
 8007c4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c50:	4691      	mov	r9, r2
 8007c52:	f023 0820 	bic.w	r8, r3, #32
 8007c56:	bfbc      	itt	lt
 8007c58:	4622      	movlt	r2, r4
 8007c5a:	4614      	movlt	r4, r2
 8007c5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c60:	d005      	beq.n	8007c6e <__cvt+0x42>
 8007c62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c66:	d100      	bne.n	8007c6a <__cvt+0x3e>
 8007c68:	3601      	adds	r6, #1
 8007c6a:	2102      	movs	r1, #2
 8007c6c:	e000      	b.n	8007c70 <__cvt+0x44>
 8007c6e:	2103      	movs	r1, #3
 8007c70:	ab03      	add	r3, sp, #12
 8007c72:	9301      	str	r3, [sp, #4]
 8007c74:	ab02      	add	r3, sp, #8
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	ec45 4b10 	vmov	d0, r4, r5
 8007c7c:	4653      	mov	r3, sl
 8007c7e:	4632      	mov	r2, r6
 8007c80:	f000 feb6 	bl	80089f0 <_dtoa_r>
 8007c84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c88:	4607      	mov	r7, r0
 8007c8a:	d102      	bne.n	8007c92 <__cvt+0x66>
 8007c8c:	f019 0f01 	tst.w	r9, #1
 8007c90:	d022      	beq.n	8007cd8 <__cvt+0xac>
 8007c92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c96:	eb07 0906 	add.w	r9, r7, r6
 8007c9a:	d110      	bne.n	8007cbe <__cvt+0x92>
 8007c9c:	783b      	ldrb	r3, [r7, #0]
 8007c9e:	2b30      	cmp	r3, #48	; 0x30
 8007ca0:	d10a      	bne.n	8007cb8 <__cvt+0x8c>
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	4629      	mov	r1, r5
 8007caa:	f7f8 ff1d 	bl	8000ae8 <__aeabi_dcmpeq>
 8007cae:	b918      	cbnz	r0, 8007cb8 <__cvt+0x8c>
 8007cb0:	f1c6 0601 	rsb	r6, r6, #1
 8007cb4:	f8ca 6000 	str.w	r6, [sl]
 8007cb8:	f8da 3000 	ldr.w	r3, [sl]
 8007cbc:	4499      	add	r9, r3
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	4629      	mov	r1, r5
 8007cc6:	f7f8 ff0f 	bl	8000ae8 <__aeabi_dcmpeq>
 8007cca:	b108      	cbz	r0, 8007cd0 <__cvt+0xa4>
 8007ccc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007cd0:	2230      	movs	r2, #48	; 0x30
 8007cd2:	9b03      	ldr	r3, [sp, #12]
 8007cd4:	454b      	cmp	r3, r9
 8007cd6:	d307      	bcc.n	8007ce8 <__cvt+0xbc>
 8007cd8:	9b03      	ldr	r3, [sp, #12]
 8007cda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cdc:	1bdb      	subs	r3, r3, r7
 8007cde:	4638      	mov	r0, r7
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	b004      	add	sp, #16
 8007ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce8:	1c59      	adds	r1, r3, #1
 8007cea:	9103      	str	r1, [sp, #12]
 8007cec:	701a      	strb	r2, [r3, #0]
 8007cee:	e7f0      	b.n	8007cd2 <__cvt+0xa6>

08007cf0 <__exponent>:
 8007cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2900      	cmp	r1, #0
 8007cf6:	bfb8      	it	lt
 8007cf8:	4249      	neglt	r1, r1
 8007cfa:	f803 2b02 	strb.w	r2, [r3], #2
 8007cfe:	bfb4      	ite	lt
 8007d00:	222d      	movlt	r2, #45	; 0x2d
 8007d02:	222b      	movge	r2, #43	; 0x2b
 8007d04:	2909      	cmp	r1, #9
 8007d06:	7042      	strb	r2, [r0, #1]
 8007d08:	dd2a      	ble.n	8007d60 <__exponent+0x70>
 8007d0a:	f10d 0207 	add.w	r2, sp, #7
 8007d0e:	4617      	mov	r7, r2
 8007d10:	260a      	movs	r6, #10
 8007d12:	4694      	mov	ip, r2
 8007d14:	fb91 f5f6 	sdiv	r5, r1, r6
 8007d18:	fb06 1415 	mls	r4, r6, r5, r1
 8007d1c:	3430      	adds	r4, #48	; 0x30
 8007d1e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007d22:	460c      	mov	r4, r1
 8007d24:	2c63      	cmp	r4, #99	; 0x63
 8007d26:	f102 32ff 	add.w	r2, r2, #4294967295
 8007d2a:	4629      	mov	r1, r5
 8007d2c:	dcf1      	bgt.n	8007d12 <__exponent+0x22>
 8007d2e:	3130      	adds	r1, #48	; 0x30
 8007d30:	f1ac 0402 	sub.w	r4, ip, #2
 8007d34:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007d38:	1c41      	adds	r1, r0, #1
 8007d3a:	4622      	mov	r2, r4
 8007d3c:	42ba      	cmp	r2, r7
 8007d3e:	d30a      	bcc.n	8007d56 <__exponent+0x66>
 8007d40:	f10d 0209 	add.w	r2, sp, #9
 8007d44:	eba2 020c 	sub.w	r2, r2, ip
 8007d48:	42bc      	cmp	r4, r7
 8007d4a:	bf88      	it	hi
 8007d4c:	2200      	movhi	r2, #0
 8007d4e:	4413      	add	r3, r2
 8007d50:	1a18      	subs	r0, r3, r0
 8007d52:	b003      	add	sp, #12
 8007d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d56:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007d5a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007d5e:	e7ed      	b.n	8007d3c <__exponent+0x4c>
 8007d60:	2330      	movs	r3, #48	; 0x30
 8007d62:	3130      	adds	r1, #48	; 0x30
 8007d64:	7083      	strb	r3, [r0, #2]
 8007d66:	70c1      	strb	r1, [r0, #3]
 8007d68:	1d03      	adds	r3, r0, #4
 8007d6a:	e7f1      	b.n	8007d50 <__exponent+0x60>

08007d6c <_printf_float>:
 8007d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d70:	ed2d 8b02 	vpush	{d8}
 8007d74:	b08d      	sub	sp, #52	; 0x34
 8007d76:	460c      	mov	r4, r1
 8007d78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d7c:	4616      	mov	r6, r2
 8007d7e:	461f      	mov	r7, r3
 8007d80:	4605      	mov	r5, r0
 8007d82:	f000 fd0d 	bl	80087a0 <_localeconv_r>
 8007d86:	f8d0 a000 	ldr.w	sl, [r0]
 8007d8a:	4650      	mov	r0, sl
 8007d8c:	f7f8 fa80 	bl	8000290 <strlen>
 8007d90:	2300      	movs	r3, #0
 8007d92:	930a      	str	r3, [sp, #40]	; 0x28
 8007d94:	6823      	ldr	r3, [r4, #0]
 8007d96:	9305      	str	r3, [sp, #20]
 8007d98:	f8d8 3000 	ldr.w	r3, [r8]
 8007d9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007da0:	3307      	adds	r3, #7
 8007da2:	f023 0307 	bic.w	r3, r3, #7
 8007da6:	f103 0208 	add.w	r2, r3, #8
 8007daa:	f8c8 2000 	str.w	r2, [r8]
 8007dae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007db2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007db6:	9307      	str	r3, [sp, #28]
 8007db8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007dbc:	ee08 0a10 	vmov	s16, r0
 8007dc0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007dc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dc8:	4b9e      	ldr	r3, [pc, #632]	; (8008044 <_printf_float+0x2d8>)
 8007dca:	f04f 32ff 	mov.w	r2, #4294967295
 8007dce:	f7f8 febd 	bl	8000b4c <__aeabi_dcmpun>
 8007dd2:	bb88      	cbnz	r0, 8007e38 <_printf_float+0xcc>
 8007dd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dd8:	4b9a      	ldr	r3, [pc, #616]	; (8008044 <_printf_float+0x2d8>)
 8007dda:	f04f 32ff 	mov.w	r2, #4294967295
 8007dde:	f7f8 fe97 	bl	8000b10 <__aeabi_dcmple>
 8007de2:	bb48      	cbnz	r0, 8007e38 <_printf_float+0xcc>
 8007de4:	2200      	movs	r2, #0
 8007de6:	2300      	movs	r3, #0
 8007de8:	4640      	mov	r0, r8
 8007dea:	4649      	mov	r1, r9
 8007dec:	f7f8 fe86 	bl	8000afc <__aeabi_dcmplt>
 8007df0:	b110      	cbz	r0, 8007df8 <_printf_float+0x8c>
 8007df2:	232d      	movs	r3, #45	; 0x2d
 8007df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007df8:	4a93      	ldr	r2, [pc, #588]	; (8008048 <_printf_float+0x2dc>)
 8007dfa:	4b94      	ldr	r3, [pc, #592]	; (800804c <_printf_float+0x2e0>)
 8007dfc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007e00:	bf94      	ite	ls
 8007e02:	4690      	movls	r8, r2
 8007e04:	4698      	movhi	r8, r3
 8007e06:	2303      	movs	r3, #3
 8007e08:	6123      	str	r3, [r4, #16]
 8007e0a:	9b05      	ldr	r3, [sp, #20]
 8007e0c:	f023 0304 	bic.w	r3, r3, #4
 8007e10:	6023      	str	r3, [r4, #0]
 8007e12:	f04f 0900 	mov.w	r9, #0
 8007e16:	9700      	str	r7, [sp, #0]
 8007e18:	4633      	mov	r3, r6
 8007e1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	4628      	mov	r0, r5
 8007e20:	f000 f9da 	bl	80081d8 <_printf_common>
 8007e24:	3001      	adds	r0, #1
 8007e26:	f040 8090 	bne.w	8007f4a <_printf_float+0x1de>
 8007e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2e:	b00d      	add	sp, #52	; 0x34
 8007e30:	ecbd 8b02 	vpop	{d8}
 8007e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e38:	4642      	mov	r2, r8
 8007e3a:	464b      	mov	r3, r9
 8007e3c:	4640      	mov	r0, r8
 8007e3e:	4649      	mov	r1, r9
 8007e40:	f7f8 fe84 	bl	8000b4c <__aeabi_dcmpun>
 8007e44:	b140      	cbz	r0, 8007e58 <_printf_float+0xec>
 8007e46:	464b      	mov	r3, r9
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	bfbc      	itt	lt
 8007e4c:	232d      	movlt	r3, #45	; 0x2d
 8007e4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e52:	4a7f      	ldr	r2, [pc, #508]	; (8008050 <_printf_float+0x2e4>)
 8007e54:	4b7f      	ldr	r3, [pc, #508]	; (8008054 <_printf_float+0x2e8>)
 8007e56:	e7d1      	b.n	8007dfc <_printf_float+0x90>
 8007e58:	6863      	ldr	r3, [r4, #4]
 8007e5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e5e:	9206      	str	r2, [sp, #24]
 8007e60:	1c5a      	adds	r2, r3, #1
 8007e62:	d13f      	bne.n	8007ee4 <_printf_float+0x178>
 8007e64:	2306      	movs	r3, #6
 8007e66:	6063      	str	r3, [r4, #4]
 8007e68:	9b05      	ldr	r3, [sp, #20]
 8007e6a:	6861      	ldr	r1, [r4, #4]
 8007e6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e70:	2300      	movs	r3, #0
 8007e72:	9303      	str	r3, [sp, #12]
 8007e74:	ab0a      	add	r3, sp, #40	; 0x28
 8007e76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e7a:	ab09      	add	r3, sp, #36	; 0x24
 8007e7c:	ec49 8b10 	vmov	d0, r8, r9
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	6022      	str	r2, [r4, #0]
 8007e84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e88:	4628      	mov	r0, r5
 8007e8a:	f7ff fecf 	bl	8007c2c <__cvt>
 8007e8e:	9b06      	ldr	r3, [sp, #24]
 8007e90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e92:	2b47      	cmp	r3, #71	; 0x47
 8007e94:	4680      	mov	r8, r0
 8007e96:	d108      	bne.n	8007eaa <_printf_float+0x13e>
 8007e98:	1cc8      	adds	r0, r1, #3
 8007e9a:	db02      	blt.n	8007ea2 <_printf_float+0x136>
 8007e9c:	6863      	ldr	r3, [r4, #4]
 8007e9e:	4299      	cmp	r1, r3
 8007ea0:	dd41      	ble.n	8007f26 <_printf_float+0x1ba>
 8007ea2:	f1ab 0302 	sub.w	r3, fp, #2
 8007ea6:	fa5f fb83 	uxtb.w	fp, r3
 8007eaa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007eae:	d820      	bhi.n	8007ef2 <_printf_float+0x186>
 8007eb0:	3901      	subs	r1, #1
 8007eb2:	465a      	mov	r2, fp
 8007eb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007eb8:	9109      	str	r1, [sp, #36]	; 0x24
 8007eba:	f7ff ff19 	bl	8007cf0 <__exponent>
 8007ebe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ec0:	1813      	adds	r3, r2, r0
 8007ec2:	2a01      	cmp	r2, #1
 8007ec4:	4681      	mov	r9, r0
 8007ec6:	6123      	str	r3, [r4, #16]
 8007ec8:	dc02      	bgt.n	8007ed0 <_printf_float+0x164>
 8007eca:	6822      	ldr	r2, [r4, #0]
 8007ecc:	07d2      	lsls	r2, r2, #31
 8007ece:	d501      	bpl.n	8007ed4 <_printf_float+0x168>
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	6123      	str	r3, [r4, #16]
 8007ed4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d09c      	beq.n	8007e16 <_printf_float+0xaa>
 8007edc:	232d      	movs	r3, #45	; 0x2d
 8007ede:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ee2:	e798      	b.n	8007e16 <_printf_float+0xaa>
 8007ee4:	9a06      	ldr	r2, [sp, #24]
 8007ee6:	2a47      	cmp	r2, #71	; 0x47
 8007ee8:	d1be      	bne.n	8007e68 <_printf_float+0xfc>
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1bc      	bne.n	8007e68 <_printf_float+0xfc>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e7b9      	b.n	8007e66 <_printf_float+0xfa>
 8007ef2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007ef6:	d118      	bne.n	8007f2a <_printf_float+0x1be>
 8007ef8:	2900      	cmp	r1, #0
 8007efa:	6863      	ldr	r3, [r4, #4]
 8007efc:	dd0b      	ble.n	8007f16 <_printf_float+0x1aa>
 8007efe:	6121      	str	r1, [r4, #16]
 8007f00:	b913      	cbnz	r3, 8007f08 <_printf_float+0x19c>
 8007f02:	6822      	ldr	r2, [r4, #0]
 8007f04:	07d0      	lsls	r0, r2, #31
 8007f06:	d502      	bpl.n	8007f0e <_printf_float+0x1a2>
 8007f08:	3301      	adds	r3, #1
 8007f0a:	440b      	add	r3, r1
 8007f0c:	6123      	str	r3, [r4, #16]
 8007f0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f10:	f04f 0900 	mov.w	r9, #0
 8007f14:	e7de      	b.n	8007ed4 <_printf_float+0x168>
 8007f16:	b913      	cbnz	r3, 8007f1e <_printf_float+0x1b2>
 8007f18:	6822      	ldr	r2, [r4, #0]
 8007f1a:	07d2      	lsls	r2, r2, #31
 8007f1c:	d501      	bpl.n	8007f22 <_printf_float+0x1b6>
 8007f1e:	3302      	adds	r3, #2
 8007f20:	e7f4      	b.n	8007f0c <_printf_float+0x1a0>
 8007f22:	2301      	movs	r3, #1
 8007f24:	e7f2      	b.n	8007f0c <_printf_float+0x1a0>
 8007f26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f2c:	4299      	cmp	r1, r3
 8007f2e:	db05      	blt.n	8007f3c <_printf_float+0x1d0>
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	6121      	str	r1, [r4, #16]
 8007f34:	07d8      	lsls	r0, r3, #31
 8007f36:	d5ea      	bpl.n	8007f0e <_printf_float+0x1a2>
 8007f38:	1c4b      	adds	r3, r1, #1
 8007f3a:	e7e7      	b.n	8007f0c <_printf_float+0x1a0>
 8007f3c:	2900      	cmp	r1, #0
 8007f3e:	bfd4      	ite	le
 8007f40:	f1c1 0202 	rsble	r2, r1, #2
 8007f44:	2201      	movgt	r2, #1
 8007f46:	4413      	add	r3, r2
 8007f48:	e7e0      	b.n	8007f0c <_printf_float+0x1a0>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	055a      	lsls	r2, r3, #21
 8007f4e:	d407      	bmi.n	8007f60 <_printf_float+0x1f4>
 8007f50:	6923      	ldr	r3, [r4, #16]
 8007f52:	4642      	mov	r2, r8
 8007f54:	4631      	mov	r1, r6
 8007f56:	4628      	mov	r0, r5
 8007f58:	47b8      	blx	r7
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	d12c      	bne.n	8007fb8 <_printf_float+0x24c>
 8007f5e:	e764      	b.n	8007e2a <_printf_float+0xbe>
 8007f60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f64:	f240 80e0 	bls.w	8008128 <_printf_float+0x3bc>
 8007f68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f7f8 fdba 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d034      	beq.n	8007fe2 <_printf_float+0x276>
 8007f78:	4a37      	ldr	r2, [pc, #220]	; (8008058 <_printf_float+0x2ec>)
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	4631      	mov	r1, r6
 8007f7e:	4628      	mov	r0, r5
 8007f80:	47b8      	blx	r7
 8007f82:	3001      	adds	r0, #1
 8007f84:	f43f af51 	beq.w	8007e2a <_printf_float+0xbe>
 8007f88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	db02      	blt.n	8007f96 <_printf_float+0x22a>
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	07d8      	lsls	r0, r3, #31
 8007f94:	d510      	bpl.n	8007fb8 <_printf_float+0x24c>
 8007f96:	ee18 3a10 	vmov	r3, s16
 8007f9a:	4652      	mov	r2, sl
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	47b8      	blx	r7
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	f43f af41 	beq.w	8007e2a <_printf_float+0xbe>
 8007fa8:	f04f 0800 	mov.w	r8, #0
 8007fac:	f104 091a 	add.w	r9, r4, #26
 8007fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	4543      	cmp	r3, r8
 8007fb6:	dc09      	bgt.n	8007fcc <_printf_float+0x260>
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	079b      	lsls	r3, r3, #30
 8007fbc:	f100 8107 	bmi.w	80081ce <_printf_float+0x462>
 8007fc0:	68e0      	ldr	r0, [r4, #12]
 8007fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fc4:	4298      	cmp	r0, r3
 8007fc6:	bfb8      	it	lt
 8007fc8:	4618      	movlt	r0, r3
 8007fca:	e730      	b.n	8007e2e <_printf_float+0xc2>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	464a      	mov	r2, r9
 8007fd0:	4631      	mov	r1, r6
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	47b8      	blx	r7
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	f43f af27 	beq.w	8007e2a <_printf_float+0xbe>
 8007fdc:	f108 0801 	add.w	r8, r8, #1
 8007fe0:	e7e6      	b.n	8007fb0 <_printf_float+0x244>
 8007fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	dc39      	bgt.n	800805c <_printf_float+0x2f0>
 8007fe8:	4a1b      	ldr	r2, [pc, #108]	; (8008058 <_printf_float+0x2ec>)
 8007fea:	2301      	movs	r3, #1
 8007fec:	4631      	mov	r1, r6
 8007fee:	4628      	mov	r0, r5
 8007ff0:	47b8      	blx	r7
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	f43f af19 	beq.w	8007e2a <_printf_float+0xbe>
 8007ff8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	d102      	bne.n	8008006 <_printf_float+0x29a>
 8008000:	6823      	ldr	r3, [r4, #0]
 8008002:	07d9      	lsls	r1, r3, #31
 8008004:	d5d8      	bpl.n	8007fb8 <_printf_float+0x24c>
 8008006:	ee18 3a10 	vmov	r3, s16
 800800a:	4652      	mov	r2, sl
 800800c:	4631      	mov	r1, r6
 800800e:	4628      	mov	r0, r5
 8008010:	47b8      	blx	r7
 8008012:	3001      	adds	r0, #1
 8008014:	f43f af09 	beq.w	8007e2a <_printf_float+0xbe>
 8008018:	f04f 0900 	mov.w	r9, #0
 800801c:	f104 0a1a 	add.w	sl, r4, #26
 8008020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008022:	425b      	negs	r3, r3
 8008024:	454b      	cmp	r3, r9
 8008026:	dc01      	bgt.n	800802c <_printf_float+0x2c0>
 8008028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800802a:	e792      	b.n	8007f52 <_printf_float+0x1e6>
 800802c:	2301      	movs	r3, #1
 800802e:	4652      	mov	r2, sl
 8008030:	4631      	mov	r1, r6
 8008032:	4628      	mov	r0, r5
 8008034:	47b8      	blx	r7
 8008036:	3001      	adds	r0, #1
 8008038:	f43f aef7 	beq.w	8007e2a <_printf_float+0xbe>
 800803c:	f109 0901 	add.w	r9, r9, #1
 8008040:	e7ee      	b.n	8008020 <_printf_float+0x2b4>
 8008042:	bf00      	nop
 8008044:	7fefffff 	.word	0x7fefffff
 8008048:	0800b669 	.word	0x0800b669
 800804c:	0800b66d 	.word	0x0800b66d
 8008050:	0800b671 	.word	0x0800b671
 8008054:	0800b675 	.word	0x0800b675
 8008058:	0800b679 	.word	0x0800b679
 800805c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800805e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008060:	429a      	cmp	r2, r3
 8008062:	bfa8      	it	ge
 8008064:	461a      	movge	r2, r3
 8008066:	2a00      	cmp	r2, #0
 8008068:	4691      	mov	r9, r2
 800806a:	dc37      	bgt.n	80080dc <_printf_float+0x370>
 800806c:	f04f 0b00 	mov.w	fp, #0
 8008070:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008074:	f104 021a 	add.w	r2, r4, #26
 8008078:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800807a:	9305      	str	r3, [sp, #20]
 800807c:	eba3 0309 	sub.w	r3, r3, r9
 8008080:	455b      	cmp	r3, fp
 8008082:	dc33      	bgt.n	80080ec <_printf_float+0x380>
 8008084:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008088:	429a      	cmp	r2, r3
 800808a:	db3b      	blt.n	8008104 <_printf_float+0x398>
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	07da      	lsls	r2, r3, #31
 8008090:	d438      	bmi.n	8008104 <_printf_float+0x398>
 8008092:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008096:	eba2 0903 	sub.w	r9, r2, r3
 800809a:	9b05      	ldr	r3, [sp, #20]
 800809c:	1ad2      	subs	r2, r2, r3
 800809e:	4591      	cmp	r9, r2
 80080a0:	bfa8      	it	ge
 80080a2:	4691      	movge	r9, r2
 80080a4:	f1b9 0f00 	cmp.w	r9, #0
 80080a8:	dc35      	bgt.n	8008116 <_printf_float+0x3aa>
 80080aa:	f04f 0800 	mov.w	r8, #0
 80080ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080b2:	f104 0a1a 	add.w	sl, r4, #26
 80080b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080ba:	1a9b      	subs	r3, r3, r2
 80080bc:	eba3 0309 	sub.w	r3, r3, r9
 80080c0:	4543      	cmp	r3, r8
 80080c2:	f77f af79 	ble.w	8007fb8 <_printf_float+0x24c>
 80080c6:	2301      	movs	r3, #1
 80080c8:	4652      	mov	r2, sl
 80080ca:	4631      	mov	r1, r6
 80080cc:	4628      	mov	r0, r5
 80080ce:	47b8      	blx	r7
 80080d0:	3001      	adds	r0, #1
 80080d2:	f43f aeaa 	beq.w	8007e2a <_printf_float+0xbe>
 80080d6:	f108 0801 	add.w	r8, r8, #1
 80080da:	e7ec      	b.n	80080b6 <_printf_float+0x34a>
 80080dc:	4613      	mov	r3, r2
 80080de:	4631      	mov	r1, r6
 80080e0:	4642      	mov	r2, r8
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b8      	blx	r7
 80080e6:	3001      	adds	r0, #1
 80080e8:	d1c0      	bne.n	800806c <_printf_float+0x300>
 80080ea:	e69e      	b.n	8007e2a <_printf_float+0xbe>
 80080ec:	2301      	movs	r3, #1
 80080ee:	4631      	mov	r1, r6
 80080f0:	4628      	mov	r0, r5
 80080f2:	9205      	str	r2, [sp, #20]
 80080f4:	47b8      	blx	r7
 80080f6:	3001      	adds	r0, #1
 80080f8:	f43f ae97 	beq.w	8007e2a <_printf_float+0xbe>
 80080fc:	9a05      	ldr	r2, [sp, #20]
 80080fe:	f10b 0b01 	add.w	fp, fp, #1
 8008102:	e7b9      	b.n	8008078 <_printf_float+0x30c>
 8008104:	ee18 3a10 	vmov	r3, s16
 8008108:	4652      	mov	r2, sl
 800810a:	4631      	mov	r1, r6
 800810c:	4628      	mov	r0, r5
 800810e:	47b8      	blx	r7
 8008110:	3001      	adds	r0, #1
 8008112:	d1be      	bne.n	8008092 <_printf_float+0x326>
 8008114:	e689      	b.n	8007e2a <_printf_float+0xbe>
 8008116:	9a05      	ldr	r2, [sp, #20]
 8008118:	464b      	mov	r3, r9
 800811a:	4442      	add	r2, r8
 800811c:	4631      	mov	r1, r6
 800811e:	4628      	mov	r0, r5
 8008120:	47b8      	blx	r7
 8008122:	3001      	adds	r0, #1
 8008124:	d1c1      	bne.n	80080aa <_printf_float+0x33e>
 8008126:	e680      	b.n	8007e2a <_printf_float+0xbe>
 8008128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800812a:	2a01      	cmp	r2, #1
 800812c:	dc01      	bgt.n	8008132 <_printf_float+0x3c6>
 800812e:	07db      	lsls	r3, r3, #31
 8008130:	d53a      	bpl.n	80081a8 <_printf_float+0x43c>
 8008132:	2301      	movs	r3, #1
 8008134:	4642      	mov	r2, r8
 8008136:	4631      	mov	r1, r6
 8008138:	4628      	mov	r0, r5
 800813a:	47b8      	blx	r7
 800813c:	3001      	adds	r0, #1
 800813e:	f43f ae74 	beq.w	8007e2a <_printf_float+0xbe>
 8008142:	ee18 3a10 	vmov	r3, s16
 8008146:	4652      	mov	r2, sl
 8008148:	4631      	mov	r1, r6
 800814a:	4628      	mov	r0, r5
 800814c:	47b8      	blx	r7
 800814e:	3001      	adds	r0, #1
 8008150:	f43f ae6b 	beq.w	8007e2a <_printf_float+0xbe>
 8008154:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008158:	2200      	movs	r2, #0
 800815a:	2300      	movs	r3, #0
 800815c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008160:	f7f8 fcc2 	bl	8000ae8 <__aeabi_dcmpeq>
 8008164:	b9d8      	cbnz	r0, 800819e <_printf_float+0x432>
 8008166:	f10a 33ff 	add.w	r3, sl, #4294967295
 800816a:	f108 0201 	add.w	r2, r8, #1
 800816e:	4631      	mov	r1, r6
 8008170:	4628      	mov	r0, r5
 8008172:	47b8      	blx	r7
 8008174:	3001      	adds	r0, #1
 8008176:	d10e      	bne.n	8008196 <_printf_float+0x42a>
 8008178:	e657      	b.n	8007e2a <_printf_float+0xbe>
 800817a:	2301      	movs	r3, #1
 800817c:	4652      	mov	r2, sl
 800817e:	4631      	mov	r1, r6
 8008180:	4628      	mov	r0, r5
 8008182:	47b8      	blx	r7
 8008184:	3001      	adds	r0, #1
 8008186:	f43f ae50 	beq.w	8007e2a <_printf_float+0xbe>
 800818a:	f108 0801 	add.w	r8, r8, #1
 800818e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008190:	3b01      	subs	r3, #1
 8008192:	4543      	cmp	r3, r8
 8008194:	dcf1      	bgt.n	800817a <_printf_float+0x40e>
 8008196:	464b      	mov	r3, r9
 8008198:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800819c:	e6da      	b.n	8007f54 <_printf_float+0x1e8>
 800819e:	f04f 0800 	mov.w	r8, #0
 80081a2:	f104 0a1a 	add.w	sl, r4, #26
 80081a6:	e7f2      	b.n	800818e <_printf_float+0x422>
 80081a8:	2301      	movs	r3, #1
 80081aa:	4642      	mov	r2, r8
 80081ac:	e7df      	b.n	800816e <_printf_float+0x402>
 80081ae:	2301      	movs	r3, #1
 80081b0:	464a      	mov	r2, r9
 80081b2:	4631      	mov	r1, r6
 80081b4:	4628      	mov	r0, r5
 80081b6:	47b8      	blx	r7
 80081b8:	3001      	adds	r0, #1
 80081ba:	f43f ae36 	beq.w	8007e2a <_printf_float+0xbe>
 80081be:	f108 0801 	add.w	r8, r8, #1
 80081c2:	68e3      	ldr	r3, [r4, #12]
 80081c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081c6:	1a5b      	subs	r3, r3, r1
 80081c8:	4543      	cmp	r3, r8
 80081ca:	dcf0      	bgt.n	80081ae <_printf_float+0x442>
 80081cc:	e6f8      	b.n	8007fc0 <_printf_float+0x254>
 80081ce:	f04f 0800 	mov.w	r8, #0
 80081d2:	f104 0919 	add.w	r9, r4, #25
 80081d6:	e7f4      	b.n	80081c2 <_printf_float+0x456>

080081d8 <_printf_common>:
 80081d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081dc:	4616      	mov	r6, r2
 80081de:	4699      	mov	r9, r3
 80081e0:	688a      	ldr	r2, [r1, #8]
 80081e2:	690b      	ldr	r3, [r1, #16]
 80081e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081e8:	4293      	cmp	r3, r2
 80081ea:	bfb8      	it	lt
 80081ec:	4613      	movlt	r3, r2
 80081ee:	6033      	str	r3, [r6, #0]
 80081f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081f4:	4607      	mov	r7, r0
 80081f6:	460c      	mov	r4, r1
 80081f8:	b10a      	cbz	r2, 80081fe <_printf_common+0x26>
 80081fa:	3301      	adds	r3, #1
 80081fc:	6033      	str	r3, [r6, #0]
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	0699      	lsls	r1, r3, #26
 8008202:	bf42      	ittt	mi
 8008204:	6833      	ldrmi	r3, [r6, #0]
 8008206:	3302      	addmi	r3, #2
 8008208:	6033      	strmi	r3, [r6, #0]
 800820a:	6825      	ldr	r5, [r4, #0]
 800820c:	f015 0506 	ands.w	r5, r5, #6
 8008210:	d106      	bne.n	8008220 <_printf_common+0x48>
 8008212:	f104 0a19 	add.w	sl, r4, #25
 8008216:	68e3      	ldr	r3, [r4, #12]
 8008218:	6832      	ldr	r2, [r6, #0]
 800821a:	1a9b      	subs	r3, r3, r2
 800821c:	42ab      	cmp	r3, r5
 800821e:	dc26      	bgt.n	800826e <_printf_common+0x96>
 8008220:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008224:	1e13      	subs	r3, r2, #0
 8008226:	6822      	ldr	r2, [r4, #0]
 8008228:	bf18      	it	ne
 800822a:	2301      	movne	r3, #1
 800822c:	0692      	lsls	r2, r2, #26
 800822e:	d42b      	bmi.n	8008288 <_printf_common+0xb0>
 8008230:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008234:	4649      	mov	r1, r9
 8008236:	4638      	mov	r0, r7
 8008238:	47c0      	blx	r8
 800823a:	3001      	adds	r0, #1
 800823c:	d01e      	beq.n	800827c <_printf_common+0xa4>
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	6922      	ldr	r2, [r4, #16]
 8008242:	f003 0306 	and.w	r3, r3, #6
 8008246:	2b04      	cmp	r3, #4
 8008248:	bf02      	ittt	eq
 800824a:	68e5      	ldreq	r5, [r4, #12]
 800824c:	6833      	ldreq	r3, [r6, #0]
 800824e:	1aed      	subeq	r5, r5, r3
 8008250:	68a3      	ldr	r3, [r4, #8]
 8008252:	bf0c      	ite	eq
 8008254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008258:	2500      	movne	r5, #0
 800825a:	4293      	cmp	r3, r2
 800825c:	bfc4      	itt	gt
 800825e:	1a9b      	subgt	r3, r3, r2
 8008260:	18ed      	addgt	r5, r5, r3
 8008262:	2600      	movs	r6, #0
 8008264:	341a      	adds	r4, #26
 8008266:	42b5      	cmp	r5, r6
 8008268:	d11a      	bne.n	80082a0 <_printf_common+0xc8>
 800826a:	2000      	movs	r0, #0
 800826c:	e008      	b.n	8008280 <_printf_common+0xa8>
 800826e:	2301      	movs	r3, #1
 8008270:	4652      	mov	r2, sl
 8008272:	4649      	mov	r1, r9
 8008274:	4638      	mov	r0, r7
 8008276:	47c0      	blx	r8
 8008278:	3001      	adds	r0, #1
 800827a:	d103      	bne.n	8008284 <_printf_common+0xac>
 800827c:	f04f 30ff 	mov.w	r0, #4294967295
 8008280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008284:	3501      	adds	r5, #1
 8008286:	e7c6      	b.n	8008216 <_printf_common+0x3e>
 8008288:	18e1      	adds	r1, r4, r3
 800828a:	1c5a      	adds	r2, r3, #1
 800828c:	2030      	movs	r0, #48	; 0x30
 800828e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008292:	4422      	add	r2, r4
 8008294:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008298:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800829c:	3302      	adds	r3, #2
 800829e:	e7c7      	b.n	8008230 <_printf_common+0x58>
 80082a0:	2301      	movs	r3, #1
 80082a2:	4622      	mov	r2, r4
 80082a4:	4649      	mov	r1, r9
 80082a6:	4638      	mov	r0, r7
 80082a8:	47c0      	blx	r8
 80082aa:	3001      	adds	r0, #1
 80082ac:	d0e6      	beq.n	800827c <_printf_common+0xa4>
 80082ae:	3601      	adds	r6, #1
 80082b0:	e7d9      	b.n	8008266 <_printf_common+0x8e>
	...

080082b4 <_printf_i>:
 80082b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082b8:	7e0f      	ldrb	r7, [r1, #24]
 80082ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082bc:	2f78      	cmp	r7, #120	; 0x78
 80082be:	4691      	mov	r9, r2
 80082c0:	4680      	mov	r8, r0
 80082c2:	460c      	mov	r4, r1
 80082c4:	469a      	mov	sl, r3
 80082c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082ca:	d807      	bhi.n	80082dc <_printf_i+0x28>
 80082cc:	2f62      	cmp	r7, #98	; 0x62
 80082ce:	d80a      	bhi.n	80082e6 <_printf_i+0x32>
 80082d0:	2f00      	cmp	r7, #0
 80082d2:	f000 80d4 	beq.w	800847e <_printf_i+0x1ca>
 80082d6:	2f58      	cmp	r7, #88	; 0x58
 80082d8:	f000 80c0 	beq.w	800845c <_printf_i+0x1a8>
 80082dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082e4:	e03a      	b.n	800835c <_printf_i+0xa8>
 80082e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082ea:	2b15      	cmp	r3, #21
 80082ec:	d8f6      	bhi.n	80082dc <_printf_i+0x28>
 80082ee:	a101      	add	r1, pc, #4	; (adr r1, 80082f4 <_printf_i+0x40>)
 80082f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082f4:	0800834d 	.word	0x0800834d
 80082f8:	08008361 	.word	0x08008361
 80082fc:	080082dd 	.word	0x080082dd
 8008300:	080082dd 	.word	0x080082dd
 8008304:	080082dd 	.word	0x080082dd
 8008308:	080082dd 	.word	0x080082dd
 800830c:	08008361 	.word	0x08008361
 8008310:	080082dd 	.word	0x080082dd
 8008314:	080082dd 	.word	0x080082dd
 8008318:	080082dd 	.word	0x080082dd
 800831c:	080082dd 	.word	0x080082dd
 8008320:	08008465 	.word	0x08008465
 8008324:	0800838d 	.word	0x0800838d
 8008328:	0800841f 	.word	0x0800841f
 800832c:	080082dd 	.word	0x080082dd
 8008330:	080082dd 	.word	0x080082dd
 8008334:	08008487 	.word	0x08008487
 8008338:	080082dd 	.word	0x080082dd
 800833c:	0800838d 	.word	0x0800838d
 8008340:	080082dd 	.word	0x080082dd
 8008344:	080082dd 	.word	0x080082dd
 8008348:	08008427 	.word	0x08008427
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	1d1a      	adds	r2, r3, #4
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	602a      	str	r2, [r5, #0]
 8008354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008358:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800835c:	2301      	movs	r3, #1
 800835e:	e09f      	b.n	80084a0 <_printf_i+0x1ec>
 8008360:	6820      	ldr	r0, [r4, #0]
 8008362:	682b      	ldr	r3, [r5, #0]
 8008364:	0607      	lsls	r7, r0, #24
 8008366:	f103 0104 	add.w	r1, r3, #4
 800836a:	6029      	str	r1, [r5, #0]
 800836c:	d501      	bpl.n	8008372 <_printf_i+0xbe>
 800836e:	681e      	ldr	r6, [r3, #0]
 8008370:	e003      	b.n	800837a <_printf_i+0xc6>
 8008372:	0646      	lsls	r6, r0, #25
 8008374:	d5fb      	bpl.n	800836e <_printf_i+0xba>
 8008376:	f9b3 6000 	ldrsh.w	r6, [r3]
 800837a:	2e00      	cmp	r6, #0
 800837c:	da03      	bge.n	8008386 <_printf_i+0xd2>
 800837e:	232d      	movs	r3, #45	; 0x2d
 8008380:	4276      	negs	r6, r6
 8008382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008386:	485a      	ldr	r0, [pc, #360]	; (80084f0 <_printf_i+0x23c>)
 8008388:	230a      	movs	r3, #10
 800838a:	e012      	b.n	80083b2 <_printf_i+0xfe>
 800838c:	682b      	ldr	r3, [r5, #0]
 800838e:	6820      	ldr	r0, [r4, #0]
 8008390:	1d19      	adds	r1, r3, #4
 8008392:	6029      	str	r1, [r5, #0]
 8008394:	0605      	lsls	r5, r0, #24
 8008396:	d501      	bpl.n	800839c <_printf_i+0xe8>
 8008398:	681e      	ldr	r6, [r3, #0]
 800839a:	e002      	b.n	80083a2 <_printf_i+0xee>
 800839c:	0641      	lsls	r1, r0, #25
 800839e:	d5fb      	bpl.n	8008398 <_printf_i+0xe4>
 80083a0:	881e      	ldrh	r6, [r3, #0]
 80083a2:	4853      	ldr	r0, [pc, #332]	; (80084f0 <_printf_i+0x23c>)
 80083a4:	2f6f      	cmp	r7, #111	; 0x6f
 80083a6:	bf0c      	ite	eq
 80083a8:	2308      	moveq	r3, #8
 80083aa:	230a      	movne	r3, #10
 80083ac:	2100      	movs	r1, #0
 80083ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083b2:	6865      	ldr	r5, [r4, #4]
 80083b4:	60a5      	str	r5, [r4, #8]
 80083b6:	2d00      	cmp	r5, #0
 80083b8:	bfa2      	ittt	ge
 80083ba:	6821      	ldrge	r1, [r4, #0]
 80083bc:	f021 0104 	bicge.w	r1, r1, #4
 80083c0:	6021      	strge	r1, [r4, #0]
 80083c2:	b90e      	cbnz	r6, 80083c8 <_printf_i+0x114>
 80083c4:	2d00      	cmp	r5, #0
 80083c6:	d04b      	beq.n	8008460 <_printf_i+0x1ac>
 80083c8:	4615      	mov	r5, r2
 80083ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80083ce:	fb03 6711 	mls	r7, r3, r1, r6
 80083d2:	5dc7      	ldrb	r7, [r0, r7]
 80083d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083d8:	4637      	mov	r7, r6
 80083da:	42bb      	cmp	r3, r7
 80083dc:	460e      	mov	r6, r1
 80083de:	d9f4      	bls.n	80083ca <_printf_i+0x116>
 80083e0:	2b08      	cmp	r3, #8
 80083e2:	d10b      	bne.n	80083fc <_printf_i+0x148>
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	07de      	lsls	r6, r3, #31
 80083e8:	d508      	bpl.n	80083fc <_printf_i+0x148>
 80083ea:	6923      	ldr	r3, [r4, #16]
 80083ec:	6861      	ldr	r1, [r4, #4]
 80083ee:	4299      	cmp	r1, r3
 80083f0:	bfde      	ittt	le
 80083f2:	2330      	movle	r3, #48	; 0x30
 80083f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083fc:	1b52      	subs	r2, r2, r5
 80083fe:	6122      	str	r2, [r4, #16]
 8008400:	f8cd a000 	str.w	sl, [sp]
 8008404:	464b      	mov	r3, r9
 8008406:	aa03      	add	r2, sp, #12
 8008408:	4621      	mov	r1, r4
 800840a:	4640      	mov	r0, r8
 800840c:	f7ff fee4 	bl	80081d8 <_printf_common>
 8008410:	3001      	adds	r0, #1
 8008412:	d14a      	bne.n	80084aa <_printf_i+0x1f6>
 8008414:	f04f 30ff 	mov.w	r0, #4294967295
 8008418:	b004      	add	sp, #16
 800841a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	f043 0320 	orr.w	r3, r3, #32
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	4833      	ldr	r0, [pc, #204]	; (80084f4 <_printf_i+0x240>)
 8008428:	2778      	movs	r7, #120	; 0x78
 800842a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	6829      	ldr	r1, [r5, #0]
 8008432:	061f      	lsls	r7, r3, #24
 8008434:	f851 6b04 	ldr.w	r6, [r1], #4
 8008438:	d402      	bmi.n	8008440 <_printf_i+0x18c>
 800843a:	065f      	lsls	r7, r3, #25
 800843c:	bf48      	it	mi
 800843e:	b2b6      	uxthmi	r6, r6
 8008440:	07df      	lsls	r7, r3, #31
 8008442:	bf48      	it	mi
 8008444:	f043 0320 	orrmi.w	r3, r3, #32
 8008448:	6029      	str	r1, [r5, #0]
 800844a:	bf48      	it	mi
 800844c:	6023      	strmi	r3, [r4, #0]
 800844e:	b91e      	cbnz	r6, 8008458 <_printf_i+0x1a4>
 8008450:	6823      	ldr	r3, [r4, #0]
 8008452:	f023 0320 	bic.w	r3, r3, #32
 8008456:	6023      	str	r3, [r4, #0]
 8008458:	2310      	movs	r3, #16
 800845a:	e7a7      	b.n	80083ac <_printf_i+0xf8>
 800845c:	4824      	ldr	r0, [pc, #144]	; (80084f0 <_printf_i+0x23c>)
 800845e:	e7e4      	b.n	800842a <_printf_i+0x176>
 8008460:	4615      	mov	r5, r2
 8008462:	e7bd      	b.n	80083e0 <_printf_i+0x12c>
 8008464:	682b      	ldr	r3, [r5, #0]
 8008466:	6826      	ldr	r6, [r4, #0]
 8008468:	6961      	ldr	r1, [r4, #20]
 800846a:	1d18      	adds	r0, r3, #4
 800846c:	6028      	str	r0, [r5, #0]
 800846e:	0635      	lsls	r5, r6, #24
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	d501      	bpl.n	8008478 <_printf_i+0x1c4>
 8008474:	6019      	str	r1, [r3, #0]
 8008476:	e002      	b.n	800847e <_printf_i+0x1ca>
 8008478:	0670      	lsls	r0, r6, #25
 800847a:	d5fb      	bpl.n	8008474 <_printf_i+0x1c0>
 800847c:	8019      	strh	r1, [r3, #0]
 800847e:	2300      	movs	r3, #0
 8008480:	6123      	str	r3, [r4, #16]
 8008482:	4615      	mov	r5, r2
 8008484:	e7bc      	b.n	8008400 <_printf_i+0x14c>
 8008486:	682b      	ldr	r3, [r5, #0]
 8008488:	1d1a      	adds	r2, r3, #4
 800848a:	602a      	str	r2, [r5, #0]
 800848c:	681d      	ldr	r5, [r3, #0]
 800848e:	6862      	ldr	r2, [r4, #4]
 8008490:	2100      	movs	r1, #0
 8008492:	4628      	mov	r0, r5
 8008494:	f7f7 feac 	bl	80001f0 <memchr>
 8008498:	b108      	cbz	r0, 800849e <_printf_i+0x1ea>
 800849a:	1b40      	subs	r0, r0, r5
 800849c:	6060      	str	r0, [r4, #4]
 800849e:	6863      	ldr	r3, [r4, #4]
 80084a0:	6123      	str	r3, [r4, #16]
 80084a2:	2300      	movs	r3, #0
 80084a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084a8:	e7aa      	b.n	8008400 <_printf_i+0x14c>
 80084aa:	6923      	ldr	r3, [r4, #16]
 80084ac:	462a      	mov	r2, r5
 80084ae:	4649      	mov	r1, r9
 80084b0:	4640      	mov	r0, r8
 80084b2:	47d0      	blx	sl
 80084b4:	3001      	adds	r0, #1
 80084b6:	d0ad      	beq.n	8008414 <_printf_i+0x160>
 80084b8:	6823      	ldr	r3, [r4, #0]
 80084ba:	079b      	lsls	r3, r3, #30
 80084bc:	d413      	bmi.n	80084e6 <_printf_i+0x232>
 80084be:	68e0      	ldr	r0, [r4, #12]
 80084c0:	9b03      	ldr	r3, [sp, #12]
 80084c2:	4298      	cmp	r0, r3
 80084c4:	bfb8      	it	lt
 80084c6:	4618      	movlt	r0, r3
 80084c8:	e7a6      	b.n	8008418 <_printf_i+0x164>
 80084ca:	2301      	movs	r3, #1
 80084cc:	4632      	mov	r2, r6
 80084ce:	4649      	mov	r1, r9
 80084d0:	4640      	mov	r0, r8
 80084d2:	47d0      	blx	sl
 80084d4:	3001      	adds	r0, #1
 80084d6:	d09d      	beq.n	8008414 <_printf_i+0x160>
 80084d8:	3501      	adds	r5, #1
 80084da:	68e3      	ldr	r3, [r4, #12]
 80084dc:	9903      	ldr	r1, [sp, #12]
 80084de:	1a5b      	subs	r3, r3, r1
 80084e0:	42ab      	cmp	r3, r5
 80084e2:	dcf2      	bgt.n	80084ca <_printf_i+0x216>
 80084e4:	e7eb      	b.n	80084be <_printf_i+0x20a>
 80084e6:	2500      	movs	r5, #0
 80084e8:	f104 0619 	add.w	r6, r4, #25
 80084ec:	e7f5      	b.n	80084da <_printf_i+0x226>
 80084ee:	bf00      	nop
 80084f0:	0800b67b 	.word	0x0800b67b
 80084f4:	0800b68c 	.word	0x0800b68c

080084f8 <std>:
 80084f8:	2300      	movs	r3, #0
 80084fa:	b510      	push	{r4, lr}
 80084fc:	4604      	mov	r4, r0
 80084fe:	e9c0 3300 	strd	r3, r3, [r0]
 8008502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008506:	6083      	str	r3, [r0, #8]
 8008508:	8181      	strh	r1, [r0, #12]
 800850a:	6643      	str	r3, [r0, #100]	; 0x64
 800850c:	81c2      	strh	r2, [r0, #14]
 800850e:	6183      	str	r3, [r0, #24]
 8008510:	4619      	mov	r1, r3
 8008512:	2208      	movs	r2, #8
 8008514:	305c      	adds	r0, #92	; 0x5c
 8008516:	f000 f928 	bl	800876a <memset>
 800851a:	4b0d      	ldr	r3, [pc, #52]	; (8008550 <std+0x58>)
 800851c:	6263      	str	r3, [r4, #36]	; 0x24
 800851e:	4b0d      	ldr	r3, [pc, #52]	; (8008554 <std+0x5c>)
 8008520:	62a3      	str	r3, [r4, #40]	; 0x28
 8008522:	4b0d      	ldr	r3, [pc, #52]	; (8008558 <std+0x60>)
 8008524:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008526:	4b0d      	ldr	r3, [pc, #52]	; (800855c <std+0x64>)
 8008528:	6323      	str	r3, [r4, #48]	; 0x30
 800852a:	4b0d      	ldr	r3, [pc, #52]	; (8008560 <std+0x68>)
 800852c:	6224      	str	r4, [r4, #32]
 800852e:	429c      	cmp	r4, r3
 8008530:	d006      	beq.n	8008540 <std+0x48>
 8008532:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008536:	4294      	cmp	r4, r2
 8008538:	d002      	beq.n	8008540 <std+0x48>
 800853a:	33d0      	adds	r3, #208	; 0xd0
 800853c:	429c      	cmp	r4, r3
 800853e:	d105      	bne.n	800854c <std+0x54>
 8008540:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008548:	f000 b99e 	b.w	8008888 <__retarget_lock_init_recursive>
 800854c:	bd10      	pop	{r4, pc}
 800854e:	bf00      	nop
 8008550:	080086e5 	.word	0x080086e5
 8008554:	08008707 	.word	0x08008707
 8008558:	0800873f 	.word	0x0800873f
 800855c:	08008763 	.word	0x08008763
 8008560:	200003d8 	.word	0x200003d8

08008564 <stdio_exit_handler>:
 8008564:	4a02      	ldr	r2, [pc, #8]	; (8008570 <stdio_exit_handler+0xc>)
 8008566:	4903      	ldr	r1, [pc, #12]	; (8008574 <stdio_exit_handler+0x10>)
 8008568:	4803      	ldr	r0, [pc, #12]	; (8008578 <stdio_exit_handler+0x14>)
 800856a:	f000 b869 	b.w	8008640 <_fwalk_sglue>
 800856e:	bf00      	nop
 8008570:	2000000c 	.word	0x2000000c
 8008574:	0800abd9 	.word	0x0800abd9
 8008578:	20000184 	.word	0x20000184

0800857c <cleanup_stdio>:
 800857c:	6841      	ldr	r1, [r0, #4]
 800857e:	4b0c      	ldr	r3, [pc, #48]	; (80085b0 <cleanup_stdio+0x34>)
 8008580:	4299      	cmp	r1, r3
 8008582:	b510      	push	{r4, lr}
 8008584:	4604      	mov	r4, r0
 8008586:	d001      	beq.n	800858c <cleanup_stdio+0x10>
 8008588:	f002 fb26 	bl	800abd8 <_fflush_r>
 800858c:	68a1      	ldr	r1, [r4, #8]
 800858e:	4b09      	ldr	r3, [pc, #36]	; (80085b4 <cleanup_stdio+0x38>)
 8008590:	4299      	cmp	r1, r3
 8008592:	d002      	beq.n	800859a <cleanup_stdio+0x1e>
 8008594:	4620      	mov	r0, r4
 8008596:	f002 fb1f 	bl	800abd8 <_fflush_r>
 800859a:	68e1      	ldr	r1, [r4, #12]
 800859c:	4b06      	ldr	r3, [pc, #24]	; (80085b8 <cleanup_stdio+0x3c>)
 800859e:	4299      	cmp	r1, r3
 80085a0:	d004      	beq.n	80085ac <cleanup_stdio+0x30>
 80085a2:	4620      	mov	r0, r4
 80085a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085a8:	f002 bb16 	b.w	800abd8 <_fflush_r>
 80085ac:	bd10      	pop	{r4, pc}
 80085ae:	bf00      	nop
 80085b0:	200003d8 	.word	0x200003d8
 80085b4:	20000440 	.word	0x20000440
 80085b8:	200004a8 	.word	0x200004a8

080085bc <global_stdio_init.part.0>:
 80085bc:	b510      	push	{r4, lr}
 80085be:	4b0b      	ldr	r3, [pc, #44]	; (80085ec <global_stdio_init.part.0+0x30>)
 80085c0:	4c0b      	ldr	r4, [pc, #44]	; (80085f0 <global_stdio_init.part.0+0x34>)
 80085c2:	4a0c      	ldr	r2, [pc, #48]	; (80085f4 <global_stdio_init.part.0+0x38>)
 80085c4:	601a      	str	r2, [r3, #0]
 80085c6:	4620      	mov	r0, r4
 80085c8:	2200      	movs	r2, #0
 80085ca:	2104      	movs	r1, #4
 80085cc:	f7ff ff94 	bl	80084f8 <std>
 80085d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80085d4:	2201      	movs	r2, #1
 80085d6:	2109      	movs	r1, #9
 80085d8:	f7ff ff8e 	bl	80084f8 <std>
 80085dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80085e0:	2202      	movs	r2, #2
 80085e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085e6:	2112      	movs	r1, #18
 80085e8:	f7ff bf86 	b.w	80084f8 <std>
 80085ec:	20000510 	.word	0x20000510
 80085f0:	200003d8 	.word	0x200003d8
 80085f4:	08008565 	.word	0x08008565

080085f8 <__sfp_lock_acquire>:
 80085f8:	4801      	ldr	r0, [pc, #4]	; (8008600 <__sfp_lock_acquire+0x8>)
 80085fa:	f000 b946 	b.w	800888a <__retarget_lock_acquire_recursive>
 80085fe:	bf00      	nop
 8008600:	20000519 	.word	0x20000519

08008604 <__sfp_lock_release>:
 8008604:	4801      	ldr	r0, [pc, #4]	; (800860c <__sfp_lock_release+0x8>)
 8008606:	f000 b941 	b.w	800888c <__retarget_lock_release_recursive>
 800860a:	bf00      	nop
 800860c:	20000519 	.word	0x20000519

08008610 <__sinit>:
 8008610:	b510      	push	{r4, lr}
 8008612:	4604      	mov	r4, r0
 8008614:	f7ff fff0 	bl	80085f8 <__sfp_lock_acquire>
 8008618:	6a23      	ldr	r3, [r4, #32]
 800861a:	b11b      	cbz	r3, 8008624 <__sinit+0x14>
 800861c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008620:	f7ff bff0 	b.w	8008604 <__sfp_lock_release>
 8008624:	4b04      	ldr	r3, [pc, #16]	; (8008638 <__sinit+0x28>)
 8008626:	6223      	str	r3, [r4, #32]
 8008628:	4b04      	ldr	r3, [pc, #16]	; (800863c <__sinit+0x2c>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1f5      	bne.n	800861c <__sinit+0xc>
 8008630:	f7ff ffc4 	bl	80085bc <global_stdio_init.part.0>
 8008634:	e7f2      	b.n	800861c <__sinit+0xc>
 8008636:	bf00      	nop
 8008638:	0800857d 	.word	0x0800857d
 800863c:	20000510 	.word	0x20000510

08008640 <_fwalk_sglue>:
 8008640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008644:	4607      	mov	r7, r0
 8008646:	4688      	mov	r8, r1
 8008648:	4614      	mov	r4, r2
 800864a:	2600      	movs	r6, #0
 800864c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008650:	f1b9 0901 	subs.w	r9, r9, #1
 8008654:	d505      	bpl.n	8008662 <_fwalk_sglue+0x22>
 8008656:	6824      	ldr	r4, [r4, #0]
 8008658:	2c00      	cmp	r4, #0
 800865a:	d1f7      	bne.n	800864c <_fwalk_sglue+0xc>
 800865c:	4630      	mov	r0, r6
 800865e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008662:	89ab      	ldrh	r3, [r5, #12]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d907      	bls.n	8008678 <_fwalk_sglue+0x38>
 8008668:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800866c:	3301      	adds	r3, #1
 800866e:	d003      	beq.n	8008678 <_fwalk_sglue+0x38>
 8008670:	4629      	mov	r1, r5
 8008672:	4638      	mov	r0, r7
 8008674:	47c0      	blx	r8
 8008676:	4306      	orrs	r6, r0
 8008678:	3568      	adds	r5, #104	; 0x68
 800867a:	e7e9      	b.n	8008650 <_fwalk_sglue+0x10>

0800867c <sniprintf>:
 800867c:	b40c      	push	{r2, r3}
 800867e:	b530      	push	{r4, r5, lr}
 8008680:	4b17      	ldr	r3, [pc, #92]	; (80086e0 <sniprintf+0x64>)
 8008682:	1e0c      	subs	r4, r1, #0
 8008684:	681d      	ldr	r5, [r3, #0]
 8008686:	b09d      	sub	sp, #116	; 0x74
 8008688:	da08      	bge.n	800869c <sniprintf+0x20>
 800868a:	238b      	movs	r3, #139	; 0x8b
 800868c:	602b      	str	r3, [r5, #0]
 800868e:	f04f 30ff 	mov.w	r0, #4294967295
 8008692:	b01d      	add	sp, #116	; 0x74
 8008694:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008698:	b002      	add	sp, #8
 800869a:	4770      	bx	lr
 800869c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80086a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80086a4:	bf14      	ite	ne
 80086a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80086aa:	4623      	moveq	r3, r4
 80086ac:	9304      	str	r3, [sp, #16]
 80086ae:	9307      	str	r3, [sp, #28]
 80086b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086b4:	9002      	str	r0, [sp, #8]
 80086b6:	9006      	str	r0, [sp, #24]
 80086b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80086bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80086be:	ab21      	add	r3, sp, #132	; 0x84
 80086c0:	a902      	add	r1, sp, #8
 80086c2:	4628      	mov	r0, r5
 80086c4:	9301      	str	r3, [sp, #4]
 80086c6:	f002 f903 	bl	800a8d0 <_svfiprintf_r>
 80086ca:	1c43      	adds	r3, r0, #1
 80086cc:	bfbc      	itt	lt
 80086ce:	238b      	movlt	r3, #139	; 0x8b
 80086d0:	602b      	strlt	r3, [r5, #0]
 80086d2:	2c00      	cmp	r4, #0
 80086d4:	d0dd      	beq.n	8008692 <sniprintf+0x16>
 80086d6:	9b02      	ldr	r3, [sp, #8]
 80086d8:	2200      	movs	r2, #0
 80086da:	701a      	strb	r2, [r3, #0]
 80086dc:	e7d9      	b.n	8008692 <sniprintf+0x16>
 80086de:	bf00      	nop
 80086e0:	200001d0 	.word	0x200001d0

080086e4 <__sread>:
 80086e4:	b510      	push	{r4, lr}
 80086e6:	460c      	mov	r4, r1
 80086e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086ec:	f000 f87e 	bl	80087ec <_read_r>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	bfab      	itete	ge
 80086f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086f6:	89a3      	ldrhlt	r3, [r4, #12]
 80086f8:	181b      	addge	r3, r3, r0
 80086fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086fe:	bfac      	ite	ge
 8008700:	6563      	strge	r3, [r4, #84]	; 0x54
 8008702:	81a3      	strhlt	r3, [r4, #12]
 8008704:	bd10      	pop	{r4, pc}

08008706 <__swrite>:
 8008706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800870a:	461f      	mov	r7, r3
 800870c:	898b      	ldrh	r3, [r1, #12]
 800870e:	05db      	lsls	r3, r3, #23
 8008710:	4605      	mov	r5, r0
 8008712:	460c      	mov	r4, r1
 8008714:	4616      	mov	r6, r2
 8008716:	d505      	bpl.n	8008724 <__swrite+0x1e>
 8008718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800871c:	2302      	movs	r3, #2
 800871e:	2200      	movs	r2, #0
 8008720:	f000 f852 	bl	80087c8 <_lseek_r>
 8008724:	89a3      	ldrh	r3, [r4, #12]
 8008726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800872a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800872e:	81a3      	strh	r3, [r4, #12]
 8008730:	4632      	mov	r2, r6
 8008732:	463b      	mov	r3, r7
 8008734:	4628      	mov	r0, r5
 8008736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800873a:	f000 b869 	b.w	8008810 <_write_r>

0800873e <__sseek>:
 800873e:	b510      	push	{r4, lr}
 8008740:	460c      	mov	r4, r1
 8008742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008746:	f000 f83f 	bl	80087c8 <_lseek_r>
 800874a:	1c43      	adds	r3, r0, #1
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	bf15      	itete	ne
 8008750:	6560      	strne	r0, [r4, #84]	; 0x54
 8008752:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008756:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800875a:	81a3      	strheq	r3, [r4, #12]
 800875c:	bf18      	it	ne
 800875e:	81a3      	strhne	r3, [r4, #12]
 8008760:	bd10      	pop	{r4, pc}

08008762 <__sclose>:
 8008762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008766:	f000 b81f 	b.w	80087a8 <_close_r>

0800876a <memset>:
 800876a:	4402      	add	r2, r0
 800876c:	4603      	mov	r3, r0
 800876e:	4293      	cmp	r3, r2
 8008770:	d100      	bne.n	8008774 <memset+0xa>
 8008772:	4770      	bx	lr
 8008774:	f803 1b01 	strb.w	r1, [r3], #1
 8008778:	e7f9      	b.n	800876e <memset+0x4>

0800877a <strncmp>:
 800877a:	b510      	push	{r4, lr}
 800877c:	b16a      	cbz	r2, 800879a <strncmp+0x20>
 800877e:	3901      	subs	r1, #1
 8008780:	1884      	adds	r4, r0, r2
 8008782:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008786:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800878a:	429a      	cmp	r2, r3
 800878c:	d103      	bne.n	8008796 <strncmp+0x1c>
 800878e:	42a0      	cmp	r0, r4
 8008790:	d001      	beq.n	8008796 <strncmp+0x1c>
 8008792:	2a00      	cmp	r2, #0
 8008794:	d1f5      	bne.n	8008782 <strncmp+0x8>
 8008796:	1ad0      	subs	r0, r2, r3
 8008798:	bd10      	pop	{r4, pc}
 800879a:	4610      	mov	r0, r2
 800879c:	e7fc      	b.n	8008798 <strncmp+0x1e>
	...

080087a0 <_localeconv_r>:
 80087a0:	4800      	ldr	r0, [pc, #0]	; (80087a4 <_localeconv_r+0x4>)
 80087a2:	4770      	bx	lr
 80087a4:	20000108 	.word	0x20000108

080087a8 <_close_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4d06      	ldr	r5, [pc, #24]	; (80087c4 <_close_r+0x1c>)
 80087ac:	2300      	movs	r3, #0
 80087ae:	4604      	mov	r4, r0
 80087b0:	4608      	mov	r0, r1
 80087b2:	602b      	str	r3, [r5, #0]
 80087b4:	f7f9 fa9b 	bl	8001cee <_close>
 80087b8:	1c43      	adds	r3, r0, #1
 80087ba:	d102      	bne.n	80087c2 <_close_r+0x1a>
 80087bc:	682b      	ldr	r3, [r5, #0]
 80087be:	b103      	cbz	r3, 80087c2 <_close_r+0x1a>
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	bd38      	pop	{r3, r4, r5, pc}
 80087c4:	20000514 	.word	0x20000514

080087c8 <_lseek_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4d07      	ldr	r5, [pc, #28]	; (80087e8 <_lseek_r+0x20>)
 80087cc:	4604      	mov	r4, r0
 80087ce:	4608      	mov	r0, r1
 80087d0:	4611      	mov	r1, r2
 80087d2:	2200      	movs	r2, #0
 80087d4:	602a      	str	r2, [r5, #0]
 80087d6:	461a      	mov	r2, r3
 80087d8:	f7f9 fab0 	bl	8001d3c <_lseek>
 80087dc:	1c43      	adds	r3, r0, #1
 80087de:	d102      	bne.n	80087e6 <_lseek_r+0x1e>
 80087e0:	682b      	ldr	r3, [r5, #0]
 80087e2:	b103      	cbz	r3, 80087e6 <_lseek_r+0x1e>
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	bd38      	pop	{r3, r4, r5, pc}
 80087e8:	20000514 	.word	0x20000514

080087ec <_read_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	4d07      	ldr	r5, [pc, #28]	; (800880c <_read_r+0x20>)
 80087f0:	4604      	mov	r4, r0
 80087f2:	4608      	mov	r0, r1
 80087f4:	4611      	mov	r1, r2
 80087f6:	2200      	movs	r2, #0
 80087f8:	602a      	str	r2, [r5, #0]
 80087fa:	461a      	mov	r2, r3
 80087fc:	f7f9 fa3e 	bl	8001c7c <_read>
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	d102      	bne.n	800880a <_read_r+0x1e>
 8008804:	682b      	ldr	r3, [r5, #0]
 8008806:	b103      	cbz	r3, 800880a <_read_r+0x1e>
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	bd38      	pop	{r3, r4, r5, pc}
 800880c:	20000514 	.word	0x20000514

08008810 <_write_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4d07      	ldr	r5, [pc, #28]	; (8008830 <_write_r+0x20>)
 8008814:	4604      	mov	r4, r0
 8008816:	4608      	mov	r0, r1
 8008818:	4611      	mov	r1, r2
 800881a:	2200      	movs	r2, #0
 800881c:	602a      	str	r2, [r5, #0]
 800881e:	461a      	mov	r2, r3
 8008820:	f7f9 fa49 	bl	8001cb6 <_write>
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	d102      	bne.n	800882e <_write_r+0x1e>
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	b103      	cbz	r3, 800882e <_write_r+0x1e>
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	bd38      	pop	{r3, r4, r5, pc}
 8008830:	20000514 	.word	0x20000514

08008834 <__errno>:
 8008834:	4b01      	ldr	r3, [pc, #4]	; (800883c <__errno+0x8>)
 8008836:	6818      	ldr	r0, [r3, #0]
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	200001d0 	.word	0x200001d0

08008840 <__libc_init_array>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	4d0d      	ldr	r5, [pc, #52]	; (8008878 <__libc_init_array+0x38>)
 8008844:	4c0d      	ldr	r4, [pc, #52]	; (800887c <__libc_init_array+0x3c>)
 8008846:	1b64      	subs	r4, r4, r5
 8008848:	10a4      	asrs	r4, r4, #2
 800884a:	2600      	movs	r6, #0
 800884c:	42a6      	cmp	r6, r4
 800884e:	d109      	bne.n	8008864 <__libc_init_array+0x24>
 8008850:	4d0b      	ldr	r5, [pc, #44]	; (8008880 <__libc_init_array+0x40>)
 8008852:	4c0c      	ldr	r4, [pc, #48]	; (8008884 <__libc_init_array+0x44>)
 8008854:	f002 fd38 	bl	800b2c8 <_init>
 8008858:	1b64      	subs	r4, r4, r5
 800885a:	10a4      	asrs	r4, r4, #2
 800885c:	2600      	movs	r6, #0
 800885e:	42a6      	cmp	r6, r4
 8008860:	d105      	bne.n	800886e <__libc_init_array+0x2e>
 8008862:	bd70      	pop	{r4, r5, r6, pc}
 8008864:	f855 3b04 	ldr.w	r3, [r5], #4
 8008868:	4798      	blx	r3
 800886a:	3601      	adds	r6, #1
 800886c:	e7ee      	b.n	800884c <__libc_init_array+0xc>
 800886e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008872:	4798      	blx	r3
 8008874:	3601      	adds	r6, #1
 8008876:	e7f2      	b.n	800885e <__libc_init_array+0x1e>
 8008878:	0800b93c 	.word	0x0800b93c
 800887c:	0800b93c 	.word	0x0800b93c
 8008880:	0800b93c 	.word	0x0800b93c
 8008884:	0800b940 	.word	0x0800b940

08008888 <__retarget_lock_init_recursive>:
 8008888:	4770      	bx	lr

0800888a <__retarget_lock_acquire_recursive>:
 800888a:	4770      	bx	lr

0800888c <__retarget_lock_release_recursive>:
 800888c:	4770      	bx	lr

0800888e <strcpy>:
 800888e:	4603      	mov	r3, r0
 8008890:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008894:	f803 2b01 	strb.w	r2, [r3], #1
 8008898:	2a00      	cmp	r2, #0
 800889a:	d1f9      	bne.n	8008890 <strcpy+0x2>
 800889c:	4770      	bx	lr

0800889e <memcpy>:
 800889e:	440a      	add	r2, r1
 80088a0:	4291      	cmp	r1, r2
 80088a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80088a6:	d100      	bne.n	80088aa <memcpy+0xc>
 80088a8:	4770      	bx	lr
 80088aa:	b510      	push	{r4, lr}
 80088ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088b4:	4291      	cmp	r1, r2
 80088b6:	d1f9      	bne.n	80088ac <memcpy+0xe>
 80088b8:	bd10      	pop	{r4, pc}
 80088ba:	0000      	movs	r0, r0
 80088bc:	0000      	movs	r0, r0
	...

080088c0 <nan>:
 80088c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80088c8 <nan+0x8>
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	00000000 	.word	0x00000000
 80088cc:	7ff80000 	.word	0x7ff80000

080088d0 <nanf>:
 80088d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80088d8 <nanf+0x8>
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	7fc00000 	.word	0x7fc00000

080088dc <quorem>:
 80088dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e0:	6903      	ldr	r3, [r0, #16]
 80088e2:	690c      	ldr	r4, [r1, #16]
 80088e4:	42a3      	cmp	r3, r4
 80088e6:	4607      	mov	r7, r0
 80088e8:	db7e      	blt.n	80089e8 <quorem+0x10c>
 80088ea:	3c01      	subs	r4, #1
 80088ec:	f101 0814 	add.w	r8, r1, #20
 80088f0:	f100 0514 	add.w	r5, r0, #20
 80088f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088f8:	9301      	str	r3, [sp, #4]
 80088fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008902:	3301      	adds	r3, #1
 8008904:	429a      	cmp	r2, r3
 8008906:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800890a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800890e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008912:	d331      	bcc.n	8008978 <quorem+0x9c>
 8008914:	f04f 0e00 	mov.w	lr, #0
 8008918:	4640      	mov	r0, r8
 800891a:	46ac      	mov	ip, r5
 800891c:	46f2      	mov	sl, lr
 800891e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008922:	b293      	uxth	r3, r2
 8008924:	fb06 e303 	mla	r3, r6, r3, lr
 8008928:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800892c:	0c1a      	lsrs	r2, r3, #16
 800892e:	b29b      	uxth	r3, r3
 8008930:	ebaa 0303 	sub.w	r3, sl, r3
 8008934:	f8dc a000 	ldr.w	sl, [ip]
 8008938:	fa13 f38a 	uxtah	r3, r3, sl
 800893c:	fb06 220e 	mla	r2, r6, lr, r2
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	9b00      	ldr	r3, [sp, #0]
 8008944:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008948:	b292      	uxth	r2, r2
 800894a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800894e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008952:	f8bd 3000 	ldrh.w	r3, [sp]
 8008956:	4581      	cmp	r9, r0
 8008958:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800895c:	f84c 3b04 	str.w	r3, [ip], #4
 8008960:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008964:	d2db      	bcs.n	800891e <quorem+0x42>
 8008966:	f855 300b 	ldr.w	r3, [r5, fp]
 800896a:	b92b      	cbnz	r3, 8008978 <quorem+0x9c>
 800896c:	9b01      	ldr	r3, [sp, #4]
 800896e:	3b04      	subs	r3, #4
 8008970:	429d      	cmp	r5, r3
 8008972:	461a      	mov	r2, r3
 8008974:	d32c      	bcc.n	80089d0 <quorem+0xf4>
 8008976:	613c      	str	r4, [r7, #16]
 8008978:	4638      	mov	r0, r7
 800897a:	f001 fd5b 	bl	800a434 <__mcmp>
 800897e:	2800      	cmp	r0, #0
 8008980:	db22      	blt.n	80089c8 <quorem+0xec>
 8008982:	3601      	adds	r6, #1
 8008984:	4629      	mov	r1, r5
 8008986:	2000      	movs	r0, #0
 8008988:	f858 2b04 	ldr.w	r2, [r8], #4
 800898c:	f8d1 c000 	ldr.w	ip, [r1]
 8008990:	b293      	uxth	r3, r2
 8008992:	1ac3      	subs	r3, r0, r3
 8008994:	0c12      	lsrs	r2, r2, #16
 8008996:	fa13 f38c 	uxtah	r3, r3, ip
 800899a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800899e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089a8:	45c1      	cmp	r9, r8
 80089aa:	f841 3b04 	str.w	r3, [r1], #4
 80089ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 80089b2:	d2e9      	bcs.n	8008988 <quorem+0xac>
 80089b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089bc:	b922      	cbnz	r2, 80089c8 <quorem+0xec>
 80089be:	3b04      	subs	r3, #4
 80089c0:	429d      	cmp	r5, r3
 80089c2:	461a      	mov	r2, r3
 80089c4:	d30a      	bcc.n	80089dc <quorem+0x100>
 80089c6:	613c      	str	r4, [r7, #16]
 80089c8:	4630      	mov	r0, r6
 80089ca:	b003      	add	sp, #12
 80089cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d0:	6812      	ldr	r2, [r2, #0]
 80089d2:	3b04      	subs	r3, #4
 80089d4:	2a00      	cmp	r2, #0
 80089d6:	d1ce      	bne.n	8008976 <quorem+0x9a>
 80089d8:	3c01      	subs	r4, #1
 80089da:	e7c9      	b.n	8008970 <quorem+0x94>
 80089dc:	6812      	ldr	r2, [r2, #0]
 80089de:	3b04      	subs	r3, #4
 80089e0:	2a00      	cmp	r2, #0
 80089e2:	d1f0      	bne.n	80089c6 <quorem+0xea>
 80089e4:	3c01      	subs	r4, #1
 80089e6:	e7eb      	b.n	80089c0 <quorem+0xe4>
 80089e8:	2000      	movs	r0, #0
 80089ea:	e7ee      	b.n	80089ca <quorem+0xee>
 80089ec:	0000      	movs	r0, r0
	...

080089f0 <_dtoa_r>:
 80089f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f4:	ed2d 8b04 	vpush	{d8-d9}
 80089f8:	69c5      	ldr	r5, [r0, #28]
 80089fa:	b093      	sub	sp, #76	; 0x4c
 80089fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008a00:	ec57 6b10 	vmov	r6, r7, d0
 8008a04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a08:	9107      	str	r1, [sp, #28]
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	920a      	str	r2, [sp, #40]	; 0x28
 8008a0e:	930d      	str	r3, [sp, #52]	; 0x34
 8008a10:	b975      	cbnz	r5, 8008a30 <_dtoa_r+0x40>
 8008a12:	2010      	movs	r0, #16
 8008a14:	f001 f982 	bl	8009d1c <malloc>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	61e0      	str	r0, [r4, #28]
 8008a1c:	b920      	cbnz	r0, 8008a28 <_dtoa_r+0x38>
 8008a1e:	4bae      	ldr	r3, [pc, #696]	; (8008cd8 <_dtoa_r+0x2e8>)
 8008a20:	21ef      	movs	r1, #239	; 0xef
 8008a22:	48ae      	ldr	r0, [pc, #696]	; (8008cdc <_dtoa_r+0x2ec>)
 8008a24:	f002 f92a 	bl	800ac7c <__assert_func>
 8008a28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a2c:	6005      	str	r5, [r0, #0]
 8008a2e:	60c5      	str	r5, [r0, #12]
 8008a30:	69e3      	ldr	r3, [r4, #28]
 8008a32:	6819      	ldr	r1, [r3, #0]
 8008a34:	b151      	cbz	r1, 8008a4c <_dtoa_r+0x5c>
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	604a      	str	r2, [r1, #4]
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	4093      	lsls	r3, r2
 8008a3e:	608b      	str	r3, [r1, #8]
 8008a40:	4620      	mov	r0, r4
 8008a42:	f001 fa71 	bl	8009f28 <_Bfree>
 8008a46:	69e3      	ldr	r3, [r4, #28]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	601a      	str	r2, [r3, #0]
 8008a4c:	1e3b      	subs	r3, r7, #0
 8008a4e:	bfbb      	ittet	lt
 8008a50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008a54:	9303      	strlt	r3, [sp, #12]
 8008a56:	2300      	movge	r3, #0
 8008a58:	2201      	movlt	r2, #1
 8008a5a:	bfac      	ite	ge
 8008a5c:	f8c8 3000 	strge.w	r3, [r8]
 8008a60:	f8c8 2000 	strlt.w	r2, [r8]
 8008a64:	4b9e      	ldr	r3, [pc, #632]	; (8008ce0 <_dtoa_r+0x2f0>)
 8008a66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008a6a:	ea33 0308 	bics.w	r3, r3, r8
 8008a6e:	d11b      	bne.n	8008aa8 <_dtoa_r+0xb8>
 8008a70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a72:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a76:	6013      	str	r3, [r2, #0]
 8008a78:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008a7c:	4333      	orrs	r3, r6
 8008a7e:	f000 8593 	beq.w	80095a8 <_dtoa_r+0xbb8>
 8008a82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a84:	b963      	cbnz	r3, 8008aa0 <_dtoa_r+0xb0>
 8008a86:	4b97      	ldr	r3, [pc, #604]	; (8008ce4 <_dtoa_r+0x2f4>)
 8008a88:	e027      	b.n	8008ada <_dtoa_r+0xea>
 8008a8a:	4b97      	ldr	r3, [pc, #604]	; (8008ce8 <_dtoa_r+0x2f8>)
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	3308      	adds	r3, #8
 8008a90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a92:	6013      	str	r3, [r2, #0]
 8008a94:	9800      	ldr	r0, [sp, #0]
 8008a96:	b013      	add	sp, #76	; 0x4c
 8008a98:	ecbd 8b04 	vpop	{d8-d9}
 8008a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa0:	4b90      	ldr	r3, [pc, #576]	; (8008ce4 <_dtoa_r+0x2f4>)
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	3303      	adds	r3, #3
 8008aa6:	e7f3      	b.n	8008a90 <_dtoa_r+0xa0>
 8008aa8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008aac:	2200      	movs	r2, #0
 8008aae:	ec51 0b17 	vmov	r0, r1, d7
 8008ab2:	eeb0 8a47 	vmov.f32	s16, s14
 8008ab6:	eef0 8a67 	vmov.f32	s17, s15
 8008aba:	2300      	movs	r3, #0
 8008abc:	f7f8 f814 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ac0:	4681      	mov	r9, r0
 8008ac2:	b160      	cbz	r0, 8008ade <_dtoa_r+0xee>
 8008ac4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	6013      	str	r3, [r2, #0]
 8008aca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 8568 	beq.w	80095a2 <_dtoa_r+0xbb2>
 8008ad2:	4b86      	ldr	r3, [pc, #536]	; (8008cec <_dtoa_r+0x2fc>)
 8008ad4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	e7da      	b.n	8008a94 <_dtoa_r+0xa4>
 8008ade:	aa10      	add	r2, sp, #64	; 0x40
 8008ae0:	a911      	add	r1, sp, #68	; 0x44
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	eeb0 0a48 	vmov.f32	s0, s16
 8008ae8:	eef0 0a68 	vmov.f32	s1, s17
 8008aec:	f001 fdb8 	bl	800a660 <__d2b>
 8008af0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008af4:	4682      	mov	sl, r0
 8008af6:	2d00      	cmp	r5, #0
 8008af8:	d07f      	beq.n	8008bfa <_dtoa_r+0x20a>
 8008afa:	ee18 3a90 	vmov	r3, s17
 8008afe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b02:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008b06:	ec51 0b18 	vmov	r0, r1, d8
 8008b0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008b0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b12:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008b16:	4619      	mov	r1, r3
 8008b18:	2200      	movs	r2, #0
 8008b1a:	4b75      	ldr	r3, [pc, #468]	; (8008cf0 <_dtoa_r+0x300>)
 8008b1c:	f7f7 fbc4 	bl	80002a8 <__aeabi_dsub>
 8008b20:	a367      	add	r3, pc, #412	; (adr r3, 8008cc0 <_dtoa_r+0x2d0>)
 8008b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b26:	f7f7 fd77 	bl	8000618 <__aeabi_dmul>
 8008b2a:	a367      	add	r3, pc, #412	; (adr r3, 8008cc8 <_dtoa_r+0x2d8>)
 8008b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b30:	f7f7 fbbc 	bl	80002ac <__adddf3>
 8008b34:	4606      	mov	r6, r0
 8008b36:	4628      	mov	r0, r5
 8008b38:	460f      	mov	r7, r1
 8008b3a:	f7f7 fd03 	bl	8000544 <__aeabi_i2d>
 8008b3e:	a364      	add	r3, pc, #400	; (adr r3, 8008cd0 <_dtoa_r+0x2e0>)
 8008b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b44:	f7f7 fd68 	bl	8000618 <__aeabi_dmul>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	4639      	mov	r1, r7
 8008b50:	f7f7 fbac 	bl	80002ac <__adddf3>
 8008b54:	4606      	mov	r6, r0
 8008b56:	460f      	mov	r7, r1
 8008b58:	f7f8 f80e 	bl	8000b78 <__aeabi_d2iz>
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	4683      	mov	fp, r0
 8008b60:	2300      	movs	r3, #0
 8008b62:	4630      	mov	r0, r6
 8008b64:	4639      	mov	r1, r7
 8008b66:	f7f7 ffc9 	bl	8000afc <__aeabi_dcmplt>
 8008b6a:	b148      	cbz	r0, 8008b80 <_dtoa_r+0x190>
 8008b6c:	4658      	mov	r0, fp
 8008b6e:	f7f7 fce9 	bl	8000544 <__aeabi_i2d>
 8008b72:	4632      	mov	r2, r6
 8008b74:	463b      	mov	r3, r7
 8008b76:	f7f7 ffb7 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b7a:	b908      	cbnz	r0, 8008b80 <_dtoa_r+0x190>
 8008b7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b80:	f1bb 0f16 	cmp.w	fp, #22
 8008b84:	d857      	bhi.n	8008c36 <_dtoa_r+0x246>
 8008b86:	4b5b      	ldr	r3, [pc, #364]	; (8008cf4 <_dtoa_r+0x304>)
 8008b88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b90:	ec51 0b18 	vmov	r0, r1, d8
 8008b94:	f7f7 ffb2 	bl	8000afc <__aeabi_dcmplt>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	d04e      	beq.n	8008c3a <_dtoa_r+0x24a>
 8008b9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	930c      	str	r3, [sp, #48]	; 0x30
 8008ba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ba6:	1b5b      	subs	r3, r3, r5
 8008ba8:	1e5a      	subs	r2, r3, #1
 8008baa:	bf45      	ittet	mi
 8008bac:	f1c3 0301 	rsbmi	r3, r3, #1
 8008bb0:	9305      	strmi	r3, [sp, #20]
 8008bb2:	2300      	movpl	r3, #0
 8008bb4:	2300      	movmi	r3, #0
 8008bb6:	9206      	str	r2, [sp, #24]
 8008bb8:	bf54      	ite	pl
 8008bba:	9305      	strpl	r3, [sp, #20]
 8008bbc:	9306      	strmi	r3, [sp, #24]
 8008bbe:	f1bb 0f00 	cmp.w	fp, #0
 8008bc2:	db3c      	blt.n	8008c3e <_dtoa_r+0x24e>
 8008bc4:	9b06      	ldr	r3, [sp, #24]
 8008bc6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008bca:	445b      	add	r3, fp
 8008bcc:	9306      	str	r3, [sp, #24]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	9308      	str	r3, [sp, #32]
 8008bd2:	9b07      	ldr	r3, [sp, #28]
 8008bd4:	2b09      	cmp	r3, #9
 8008bd6:	d868      	bhi.n	8008caa <_dtoa_r+0x2ba>
 8008bd8:	2b05      	cmp	r3, #5
 8008bda:	bfc4      	itt	gt
 8008bdc:	3b04      	subgt	r3, #4
 8008bde:	9307      	strgt	r3, [sp, #28]
 8008be0:	9b07      	ldr	r3, [sp, #28]
 8008be2:	f1a3 0302 	sub.w	r3, r3, #2
 8008be6:	bfcc      	ite	gt
 8008be8:	2500      	movgt	r5, #0
 8008bea:	2501      	movle	r5, #1
 8008bec:	2b03      	cmp	r3, #3
 8008bee:	f200 8085 	bhi.w	8008cfc <_dtoa_r+0x30c>
 8008bf2:	e8df f003 	tbb	[pc, r3]
 8008bf6:	3b2e      	.short	0x3b2e
 8008bf8:	5839      	.short	0x5839
 8008bfa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008bfe:	441d      	add	r5, r3
 8008c00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008c04:	2b20      	cmp	r3, #32
 8008c06:	bfc1      	itttt	gt
 8008c08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008c0c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008c10:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008c14:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008c18:	bfd6      	itet	le
 8008c1a:	f1c3 0320 	rsble	r3, r3, #32
 8008c1e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008c22:	fa06 f003 	lslle.w	r0, r6, r3
 8008c26:	f7f7 fc7d 	bl	8000524 <__aeabi_ui2d>
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008c30:	3d01      	subs	r5, #1
 8008c32:	920e      	str	r2, [sp, #56]	; 0x38
 8008c34:	e76f      	b.n	8008b16 <_dtoa_r+0x126>
 8008c36:	2301      	movs	r3, #1
 8008c38:	e7b3      	b.n	8008ba2 <_dtoa_r+0x1b2>
 8008c3a:	900c      	str	r0, [sp, #48]	; 0x30
 8008c3c:	e7b2      	b.n	8008ba4 <_dtoa_r+0x1b4>
 8008c3e:	9b05      	ldr	r3, [sp, #20]
 8008c40:	eba3 030b 	sub.w	r3, r3, fp
 8008c44:	9305      	str	r3, [sp, #20]
 8008c46:	f1cb 0300 	rsb	r3, fp, #0
 8008c4a:	9308      	str	r3, [sp, #32]
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c50:	e7bf      	b.n	8008bd2 <_dtoa_r+0x1e2>
 8008c52:	2300      	movs	r3, #0
 8008c54:	9309      	str	r3, [sp, #36]	; 0x24
 8008c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	dc52      	bgt.n	8008d02 <_dtoa_r+0x312>
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	9301      	str	r3, [sp, #4]
 8008c60:	9304      	str	r3, [sp, #16]
 8008c62:	461a      	mov	r2, r3
 8008c64:	920a      	str	r2, [sp, #40]	; 0x28
 8008c66:	e00b      	b.n	8008c80 <_dtoa_r+0x290>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e7f3      	b.n	8008c54 <_dtoa_r+0x264>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c72:	445b      	add	r3, fp
 8008c74:	9301      	str	r3, [sp, #4]
 8008c76:	3301      	adds	r3, #1
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	9304      	str	r3, [sp, #16]
 8008c7c:	bfb8      	it	lt
 8008c7e:	2301      	movlt	r3, #1
 8008c80:	69e0      	ldr	r0, [r4, #28]
 8008c82:	2100      	movs	r1, #0
 8008c84:	2204      	movs	r2, #4
 8008c86:	f102 0614 	add.w	r6, r2, #20
 8008c8a:	429e      	cmp	r6, r3
 8008c8c:	d93d      	bls.n	8008d0a <_dtoa_r+0x31a>
 8008c8e:	6041      	str	r1, [r0, #4]
 8008c90:	4620      	mov	r0, r4
 8008c92:	f001 f909 	bl	8009ea8 <_Balloc>
 8008c96:	9000      	str	r0, [sp, #0]
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d139      	bne.n	8008d10 <_dtoa_r+0x320>
 8008c9c:	4b16      	ldr	r3, [pc, #88]	; (8008cf8 <_dtoa_r+0x308>)
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	f240 11af 	movw	r1, #431	; 0x1af
 8008ca4:	e6bd      	b.n	8008a22 <_dtoa_r+0x32>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e7e1      	b.n	8008c6e <_dtoa_r+0x27e>
 8008caa:	2501      	movs	r5, #1
 8008cac:	2300      	movs	r3, #0
 8008cae:	9307      	str	r3, [sp, #28]
 8008cb0:	9509      	str	r5, [sp, #36]	; 0x24
 8008cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb6:	9301      	str	r3, [sp, #4]
 8008cb8:	9304      	str	r3, [sp, #16]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	2312      	movs	r3, #18
 8008cbe:	e7d1      	b.n	8008c64 <_dtoa_r+0x274>
 8008cc0:	636f4361 	.word	0x636f4361
 8008cc4:	3fd287a7 	.word	0x3fd287a7
 8008cc8:	8b60c8b3 	.word	0x8b60c8b3
 8008ccc:	3fc68a28 	.word	0x3fc68a28
 8008cd0:	509f79fb 	.word	0x509f79fb
 8008cd4:	3fd34413 	.word	0x3fd34413
 8008cd8:	0800b6b2 	.word	0x0800b6b2
 8008cdc:	0800b6c9 	.word	0x0800b6c9
 8008ce0:	7ff00000 	.word	0x7ff00000
 8008ce4:	0800b6ae 	.word	0x0800b6ae
 8008ce8:	0800b6a5 	.word	0x0800b6a5
 8008cec:	0800b67a 	.word	0x0800b67a
 8008cf0:	3ff80000 	.word	0x3ff80000
 8008cf4:	0800b818 	.word	0x0800b818
 8008cf8:	0800b721 	.word	0x0800b721
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8008d00:	e7d7      	b.n	8008cb2 <_dtoa_r+0x2c2>
 8008d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d04:	9301      	str	r3, [sp, #4]
 8008d06:	9304      	str	r3, [sp, #16]
 8008d08:	e7ba      	b.n	8008c80 <_dtoa_r+0x290>
 8008d0a:	3101      	adds	r1, #1
 8008d0c:	0052      	lsls	r2, r2, #1
 8008d0e:	e7ba      	b.n	8008c86 <_dtoa_r+0x296>
 8008d10:	69e3      	ldr	r3, [r4, #28]
 8008d12:	9a00      	ldr	r2, [sp, #0]
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	9b04      	ldr	r3, [sp, #16]
 8008d18:	2b0e      	cmp	r3, #14
 8008d1a:	f200 80a8 	bhi.w	8008e6e <_dtoa_r+0x47e>
 8008d1e:	2d00      	cmp	r5, #0
 8008d20:	f000 80a5 	beq.w	8008e6e <_dtoa_r+0x47e>
 8008d24:	f1bb 0f00 	cmp.w	fp, #0
 8008d28:	dd38      	ble.n	8008d9c <_dtoa_r+0x3ac>
 8008d2a:	4bc0      	ldr	r3, [pc, #768]	; (800902c <_dtoa_r+0x63c>)
 8008d2c:	f00b 020f 	and.w	r2, fp, #15
 8008d30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d34:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008d38:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008d3c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008d40:	d019      	beq.n	8008d76 <_dtoa_r+0x386>
 8008d42:	4bbb      	ldr	r3, [pc, #748]	; (8009030 <_dtoa_r+0x640>)
 8008d44:	ec51 0b18 	vmov	r0, r1, d8
 8008d48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d4c:	f7f7 fd8e 	bl	800086c <__aeabi_ddiv>
 8008d50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d54:	f008 080f 	and.w	r8, r8, #15
 8008d58:	2503      	movs	r5, #3
 8008d5a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009030 <_dtoa_r+0x640>
 8008d5e:	f1b8 0f00 	cmp.w	r8, #0
 8008d62:	d10a      	bne.n	8008d7a <_dtoa_r+0x38a>
 8008d64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d68:	4632      	mov	r2, r6
 8008d6a:	463b      	mov	r3, r7
 8008d6c:	f7f7 fd7e 	bl	800086c <__aeabi_ddiv>
 8008d70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d74:	e02b      	b.n	8008dce <_dtoa_r+0x3de>
 8008d76:	2502      	movs	r5, #2
 8008d78:	e7ef      	b.n	8008d5a <_dtoa_r+0x36a>
 8008d7a:	f018 0f01 	tst.w	r8, #1
 8008d7e:	d008      	beq.n	8008d92 <_dtoa_r+0x3a2>
 8008d80:	4630      	mov	r0, r6
 8008d82:	4639      	mov	r1, r7
 8008d84:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008d88:	f7f7 fc46 	bl	8000618 <__aeabi_dmul>
 8008d8c:	3501      	adds	r5, #1
 8008d8e:	4606      	mov	r6, r0
 8008d90:	460f      	mov	r7, r1
 8008d92:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008d96:	f109 0908 	add.w	r9, r9, #8
 8008d9a:	e7e0      	b.n	8008d5e <_dtoa_r+0x36e>
 8008d9c:	f000 809f 	beq.w	8008ede <_dtoa_r+0x4ee>
 8008da0:	f1cb 0600 	rsb	r6, fp, #0
 8008da4:	4ba1      	ldr	r3, [pc, #644]	; (800902c <_dtoa_r+0x63c>)
 8008da6:	4fa2      	ldr	r7, [pc, #648]	; (8009030 <_dtoa_r+0x640>)
 8008da8:	f006 020f 	and.w	r2, r6, #15
 8008dac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db4:	ec51 0b18 	vmov	r0, r1, d8
 8008db8:	f7f7 fc2e 	bl	8000618 <__aeabi_dmul>
 8008dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dc0:	1136      	asrs	r6, r6, #4
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	2502      	movs	r5, #2
 8008dc6:	2e00      	cmp	r6, #0
 8008dc8:	d17e      	bne.n	8008ec8 <_dtoa_r+0x4d8>
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d1d0      	bne.n	8008d70 <_dtoa_r+0x380>
 8008dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dd0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f000 8084 	beq.w	8008ee2 <_dtoa_r+0x4f2>
 8008dda:	4b96      	ldr	r3, [pc, #600]	; (8009034 <_dtoa_r+0x644>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	4640      	mov	r0, r8
 8008de0:	4649      	mov	r1, r9
 8008de2:	f7f7 fe8b 	bl	8000afc <__aeabi_dcmplt>
 8008de6:	2800      	cmp	r0, #0
 8008de8:	d07b      	beq.n	8008ee2 <_dtoa_r+0x4f2>
 8008dea:	9b04      	ldr	r3, [sp, #16]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d078      	beq.n	8008ee2 <_dtoa_r+0x4f2>
 8008df0:	9b01      	ldr	r3, [sp, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	dd39      	ble.n	8008e6a <_dtoa_r+0x47a>
 8008df6:	4b90      	ldr	r3, [pc, #576]	; (8009038 <_dtoa_r+0x648>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	4640      	mov	r0, r8
 8008dfc:	4649      	mov	r1, r9
 8008dfe:	f7f7 fc0b 	bl	8000618 <__aeabi_dmul>
 8008e02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e06:	9e01      	ldr	r6, [sp, #4]
 8008e08:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008e0c:	3501      	adds	r5, #1
 8008e0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008e12:	4628      	mov	r0, r5
 8008e14:	f7f7 fb96 	bl	8000544 <__aeabi_i2d>
 8008e18:	4642      	mov	r2, r8
 8008e1a:	464b      	mov	r3, r9
 8008e1c:	f7f7 fbfc 	bl	8000618 <__aeabi_dmul>
 8008e20:	4b86      	ldr	r3, [pc, #536]	; (800903c <_dtoa_r+0x64c>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	f7f7 fa42 	bl	80002ac <__adddf3>
 8008e28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e30:	9303      	str	r3, [sp, #12]
 8008e32:	2e00      	cmp	r6, #0
 8008e34:	d158      	bne.n	8008ee8 <_dtoa_r+0x4f8>
 8008e36:	4b82      	ldr	r3, [pc, #520]	; (8009040 <_dtoa_r+0x650>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	4640      	mov	r0, r8
 8008e3c:	4649      	mov	r1, r9
 8008e3e:	f7f7 fa33 	bl	80002a8 <__aeabi_dsub>
 8008e42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e46:	4680      	mov	r8, r0
 8008e48:	4689      	mov	r9, r1
 8008e4a:	f7f7 fe75 	bl	8000b38 <__aeabi_dcmpgt>
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	f040 8296 	bne.w	8009380 <_dtoa_r+0x990>
 8008e54:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008e58:	4640      	mov	r0, r8
 8008e5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e5e:	4649      	mov	r1, r9
 8008e60:	f7f7 fe4c 	bl	8000afc <__aeabi_dcmplt>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	f040 8289 	bne.w	800937c <_dtoa_r+0x98c>
 8008e6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008e6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f2c0 814e 	blt.w	8009112 <_dtoa_r+0x722>
 8008e76:	f1bb 0f0e 	cmp.w	fp, #14
 8008e7a:	f300 814a 	bgt.w	8009112 <_dtoa_r+0x722>
 8008e7e:	4b6b      	ldr	r3, [pc, #428]	; (800902c <_dtoa_r+0x63c>)
 8008e80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008e84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f280 80dc 	bge.w	8009048 <_dtoa_r+0x658>
 8008e90:	9b04      	ldr	r3, [sp, #16]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f300 80d8 	bgt.w	8009048 <_dtoa_r+0x658>
 8008e98:	f040 826f 	bne.w	800937a <_dtoa_r+0x98a>
 8008e9c:	4b68      	ldr	r3, [pc, #416]	; (8009040 <_dtoa_r+0x650>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	4649      	mov	r1, r9
 8008ea4:	f7f7 fbb8 	bl	8000618 <__aeabi_dmul>
 8008ea8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008eac:	f7f7 fe3a 	bl	8000b24 <__aeabi_dcmpge>
 8008eb0:	9e04      	ldr	r6, [sp, #16]
 8008eb2:	4637      	mov	r7, r6
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	f040 8245 	bne.w	8009344 <_dtoa_r+0x954>
 8008eba:	9d00      	ldr	r5, [sp, #0]
 8008ebc:	2331      	movs	r3, #49	; 0x31
 8008ebe:	f805 3b01 	strb.w	r3, [r5], #1
 8008ec2:	f10b 0b01 	add.w	fp, fp, #1
 8008ec6:	e241      	b.n	800934c <_dtoa_r+0x95c>
 8008ec8:	07f2      	lsls	r2, r6, #31
 8008eca:	d505      	bpl.n	8008ed8 <_dtoa_r+0x4e8>
 8008ecc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ed0:	f7f7 fba2 	bl	8000618 <__aeabi_dmul>
 8008ed4:	3501      	adds	r5, #1
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	1076      	asrs	r6, r6, #1
 8008eda:	3708      	adds	r7, #8
 8008edc:	e773      	b.n	8008dc6 <_dtoa_r+0x3d6>
 8008ede:	2502      	movs	r5, #2
 8008ee0:	e775      	b.n	8008dce <_dtoa_r+0x3de>
 8008ee2:	9e04      	ldr	r6, [sp, #16]
 8008ee4:	465f      	mov	r7, fp
 8008ee6:	e792      	b.n	8008e0e <_dtoa_r+0x41e>
 8008ee8:	9900      	ldr	r1, [sp, #0]
 8008eea:	4b50      	ldr	r3, [pc, #320]	; (800902c <_dtoa_r+0x63c>)
 8008eec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ef0:	4431      	add	r1, r6
 8008ef2:	9102      	str	r1, [sp, #8]
 8008ef4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ef6:	eeb0 9a47 	vmov.f32	s18, s14
 8008efa:	eef0 9a67 	vmov.f32	s19, s15
 8008efe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008f02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f06:	2900      	cmp	r1, #0
 8008f08:	d044      	beq.n	8008f94 <_dtoa_r+0x5a4>
 8008f0a:	494e      	ldr	r1, [pc, #312]	; (8009044 <_dtoa_r+0x654>)
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	f7f7 fcad 	bl	800086c <__aeabi_ddiv>
 8008f12:	ec53 2b19 	vmov	r2, r3, d9
 8008f16:	f7f7 f9c7 	bl	80002a8 <__aeabi_dsub>
 8008f1a:	9d00      	ldr	r5, [sp, #0]
 8008f1c:	ec41 0b19 	vmov	d9, r0, r1
 8008f20:	4649      	mov	r1, r9
 8008f22:	4640      	mov	r0, r8
 8008f24:	f7f7 fe28 	bl	8000b78 <__aeabi_d2iz>
 8008f28:	4606      	mov	r6, r0
 8008f2a:	f7f7 fb0b 	bl	8000544 <__aeabi_i2d>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	460b      	mov	r3, r1
 8008f32:	4640      	mov	r0, r8
 8008f34:	4649      	mov	r1, r9
 8008f36:	f7f7 f9b7 	bl	80002a8 <__aeabi_dsub>
 8008f3a:	3630      	adds	r6, #48	; 0x30
 8008f3c:	f805 6b01 	strb.w	r6, [r5], #1
 8008f40:	ec53 2b19 	vmov	r2, r3, d9
 8008f44:	4680      	mov	r8, r0
 8008f46:	4689      	mov	r9, r1
 8008f48:	f7f7 fdd8 	bl	8000afc <__aeabi_dcmplt>
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	d164      	bne.n	800901a <_dtoa_r+0x62a>
 8008f50:	4642      	mov	r2, r8
 8008f52:	464b      	mov	r3, r9
 8008f54:	4937      	ldr	r1, [pc, #220]	; (8009034 <_dtoa_r+0x644>)
 8008f56:	2000      	movs	r0, #0
 8008f58:	f7f7 f9a6 	bl	80002a8 <__aeabi_dsub>
 8008f5c:	ec53 2b19 	vmov	r2, r3, d9
 8008f60:	f7f7 fdcc 	bl	8000afc <__aeabi_dcmplt>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	f040 80b6 	bne.w	80090d6 <_dtoa_r+0x6e6>
 8008f6a:	9b02      	ldr	r3, [sp, #8]
 8008f6c:	429d      	cmp	r5, r3
 8008f6e:	f43f af7c 	beq.w	8008e6a <_dtoa_r+0x47a>
 8008f72:	4b31      	ldr	r3, [pc, #196]	; (8009038 <_dtoa_r+0x648>)
 8008f74:	ec51 0b19 	vmov	r0, r1, d9
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f7f7 fb4d 	bl	8000618 <__aeabi_dmul>
 8008f7e:	4b2e      	ldr	r3, [pc, #184]	; (8009038 <_dtoa_r+0x648>)
 8008f80:	ec41 0b19 	vmov	d9, r0, r1
 8008f84:	2200      	movs	r2, #0
 8008f86:	4640      	mov	r0, r8
 8008f88:	4649      	mov	r1, r9
 8008f8a:	f7f7 fb45 	bl	8000618 <__aeabi_dmul>
 8008f8e:	4680      	mov	r8, r0
 8008f90:	4689      	mov	r9, r1
 8008f92:	e7c5      	b.n	8008f20 <_dtoa_r+0x530>
 8008f94:	ec51 0b17 	vmov	r0, r1, d7
 8008f98:	f7f7 fb3e 	bl	8000618 <__aeabi_dmul>
 8008f9c:	9b02      	ldr	r3, [sp, #8]
 8008f9e:	9d00      	ldr	r5, [sp, #0]
 8008fa0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fa2:	ec41 0b19 	vmov	d9, r0, r1
 8008fa6:	4649      	mov	r1, r9
 8008fa8:	4640      	mov	r0, r8
 8008faa:	f7f7 fde5 	bl	8000b78 <__aeabi_d2iz>
 8008fae:	4606      	mov	r6, r0
 8008fb0:	f7f7 fac8 	bl	8000544 <__aeabi_i2d>
 8008fb4:	3630      	adds	r6, #48	; 0x30
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	4640      	mov	r0, r8
 8008fbc:	4649      	mov	r1, r9
 8008fbe:	f7f7 f973 	bl	80002a8 <__aeabi_dsub>
 8008fc2:	f805 6b01 	strb.w	r6, [r5], #1
 8008fc6:	9b02      	ldr	r3, [sp, #8]
 8008fc8:	429d      	cmp	r5, r3
 8008fca:	4680      	mov	r8, r0
 8008fcc:	4689      	mov	r9, r1
 8008fce:	f04f 0200 	mov.w	r2, #0
 8008fd2:	d124      	bne.n	800901e <_dtoa_r+0x62e>
 8008fd4:	4b1b      	ldr	r3, [pc, #108]	; (8009044 <_dtoa_r+0x654>)
 8008fd6:	ec51 0b19 	vmov	r0, r1, d9
 8008fda:	f7f7 f967 	bl	80002ac <__adddf3>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	4640      	mov	r0, r8
 8008fe4:	4649      	mov	r1, r9
 8008fe6:	f7f7 fda7 	bl	8000b38 <__aeabi_dcmpgt>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d173      	bne.n	80090d6 <_dtoa_r+0x6e6>
 8008fee:	ec53 2b19 	vmov	r2, r3, d9
 8008ff2:	4914      	ldr	r1, [pc, #80]	; (8009044 <_dtoa_r+0x654>)
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	f7f7 f957 	bl	80002a8 <__aeabi_dsub>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	4640      	mov	r0, r8
 8009000:	4649      	mov	r1, r9
 8009002:	f7f7 fd7b 	bl	8000afc <__aeabi_dcmplt>
 8009006:	2800      	cmp	r0, #0
 8009008:	f43f af2f 	beq.w	8008e6a <_dtoa_r+0x47a>
 800900c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800900e:	1e6b      	subs	r3, r5, #1
 8009010:	930f      	str	r3, [sp, #60]	; 0x3c
 8009012:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009016:	2b30      	cmp	r3, #48	; 0x30
 8009018:	d0f8      	beq.n	800900c <_dtoa_r+0x61c>
 800901a:	46bb      	mov	fp, r7
 800901c:	e04a      	b.n	80090b4 <_dtoa_r+0x6c4>
 800901e:	4b06      	ldr	r3, [pc, #24]	; (8009038 <_dtoa_r+0x648>)
 8009020:	f7f7 fafa 	bl	8000618 <__aeabi_dmul>
 8009024:	4680      	mov	r8, r0
 8009026:	4689      	mov	r9, r1
 8009028:	e7bd      	b.n	8008fa6 <_dtoa_r+0x5b6>
 800902a:	bf00      	nop
 800902c:	0800b818 	.word	0x0800b818
 8009030:	0800b7f0 	.word	0x0800b7f0
 8009034:	3ff00000 	.word	0x3ff00000
 8009038:	40240000 	.word	0x40240000
 800903c:	401c0000 	.word	0x401c0000
 8009040:	40140000 	.word	0x40140000
 8009044:	3fe00000 	.word	0x3fe00000
 8009048:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800904c:	9d00      	ldr	r5, [sp, #0]
 800904e:	4642      	mov	r2, r8
 8009050:	464b      	mov	r3, r9
 8009052:	4630      	mov	r0, r6
 8009054:	4639      	mov	r1, r7
 8009056:	f7f7 fc09 	bl	800086c <__aeabi_ddiv>
 800905a:	f7f7 fd8d 	bl	8000b78 <__aeabi_d2iz>
 800905e:	9001      	str	r0, [sp, #4]
 8009060:	f7f7 fa70 	bl	8000544 <__aeabi_i2d>
 8009064:	4642      	mov	r2, r8
 8009066:	464b      	mov	r3, r9
 8009068:	f7f7 fad6 	bl	8000618 <__aeabi_dmul>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	4630      	mov	r0, r6
 8009072:	4639      	mov	r1, r7
 8009074:	f7f7 f918 	bl	80002a8 <__aeabi_dsub>
 8009078:	9e01      	ldr	r6, [sp, #4]
 800907a:	9f04      	ldr	r7, [sp, #16]
 800907c:	3630      	adds	r6, #48	; 0x30
 800907e:	f805 6b01 	strb.w	r6, [r5], #1
 8009082:	9e00      	ldr	r6, [sp, #0]
 8009084:	1bae      	subs	r6, r5, r6
 8009086:	42b7      	cmp	r7, r6
 8009088:	4602      	mov	r2, r0
 800908a:	460b      	mov	r3, r1
 800908c:	d134      	bne.n	80090f8 <_dtoa_r+0x708>
 800908e:	f7f7 f90d 	bl	80002ac <__adddf3>
 8009092:	4642      	mov	r2, r8
 8009094:	464b      	mov	r3, r9
 8009096:	4606      	mov	r6, r0
 8009098:	460f      	mov	r7, r1
 800909a:	f7f7 fd4d 	bl	8000b38 <__aeabi_dcmpgt>
 800909e:	b9c8      	cbnz	r0, 80090d4 <_dtoa_r+0x6e4>
 80090a0:	4642      	mov	r2, r8
 80090a2:	464b      	mov	r3, r9
 80090a4:	4630      	mov	r0, r6
 80090a6:	4639      	mov	r1, r7
 80090a8:	f7f7 fd1e 	bl	8000ae8 <__aeabi_dcmpeq>
 80090ac:	b110      	cbz	r0, 80090b4 <_dtoa_r+0x6c4>
 80090ae:	9b01      	ldr	r3, [sp, #4]
 80090b0:	07db      	lsls	r3, r3, #31
 80090b2:	d40f      	bmi.n	80090d4 <_dtoa_r+0x6e4>
 80090b4:	4651      	mov	r1, sl
 80090b6:	4620      	mov	r0, r4
 80090b8:	f000 ff36 	bl	8009f28 <_Bfree>
 80090bc:	2300      	movs	r3, #0
 80090be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090c0:	702b      	strb	r3, [r5, #0]
 80090c2:	f10b 0301 	add.w	r3, fp, #1
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f43f ace2 	beq.w	8008a94 <_dtoa_r+0xa4>
 80090d0:	601d      	str	r5, [r3, #0]
 80090d2:	e4df      	b.n	8008a94 <_dtoa_r+0xa4>
 80090d4:	465f      	mov	r7, fp
 80090d6:	462b      	mov	r3, r5
 80090d8:	461d      	mov	r5, r3
 80090da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090de:	2a39      	cmp	r2, #57	; 0x39
 80090e0:	d106      	bne.n	80090f0 <_dtoa_r+0x700>
 80090e2:	9a00      	ldr	r2, [sp, #0]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d1f7      	bne.n	80090d8 <_dtoa_r+0x6e8>
 80090e8:	9900      	ldr	r1, [sp, #0]
 80090ea:	2230      	movs	r2, #48	; 0x30
 80090ec:	3701      	adds	r7, #1
 80090ee:	700a      	strb	r2, [r1, #0]
 80090f0:	781a      	ldrb	r2, [r3, #0]
 80090f2:	3201      	adds	r2, #1
 80090f4:	701a      	strb	r2, [r3, #0]
 80090f6:	e790      	b.n	800901a <_dtoa_r+0x62a>
 80090f8:	4ba3      	ldr	r3, [pc, #652]	; (8009388 <_dtoa_r+0x998>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	f7f7 fa8c 	bl	8000618 <__aeabi_dmul>
 8009100:	2200      	movs	r2, #0
 8009102:	2300      	movs	r3, #0
 8009104:	4606      	mov	r6, r0
 8009106:	460f      	mov	r7, r1
 8009108:	f7f7 fcee 	bl	8000ae8 <__aeabi_dcmpeq>
 800910c:	2800      	cmp	r0, #0
 800910e:	d09e      	beq.n	800904e <_dtoa_r+0x65e>
 8009110:	e7d0      	b.n	80090b4 <_dtoa_r+0x6c4>
 8009112:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009114:	2a00      	cmp	r2, #0
 8009116:	f000 80ca 	beq.w	80092ae <_dtoa_r+0x8be>
 800911a:	9a07      	ldr	r2, [sp, #28]
 800911c:	2a01      	cmp	r2, #1
 800911e:	f300 80ad 	bgt.w	800927c <_dtoa_r+0x88c>
 8009122:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009124:	2a00      	cmp	r2, #0
 8009126:	f000 80a5 	beq.w	8009274 <_dtoa_r+0x884>
 800912a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800912e:	9e08      	ldr	r6, [sp, #32]
 8009130:	9d05      	ldr	r5, [sp, #20]
 8009132:	9a05      	ldr	r2, [sp, #20]
 8009134:	441a      	add	r2, r3
 8009136:	9205      	str	r2, [sp, #20]
 8009138:	9a06      	ldr	r2, [sp, #24]
 800913a:	2101      	movs	r1, #1
 800913c:	441a      	add	r2, r3
 800913e:	4620      	mov	r0, r4
 8009140:	9206      	str	r2, [sp, #24]
 8009142:	f000 fff1 	bl	800a128 <__i2b>
 8009146:	4607      	mov	r7, r0
 8009148:	b165      	cbz	r5, 8009164 <_dtoa_r+0x774>
 800914a:	9b06      	ldr	r3, [sp, #24]
 800914c:	2b00      	cmp	r3, #0
 800914e:	dd09      	ble.n	8009164 <_dtoa_r+0x774>
 8009150:	42ab      	cmp	r3, r5
 8009152:	9a05      	ldr	r2, [sp, #20]
 8009154:	bfa8      	it	ge
 8009156:	462b      	movge	r3, r5
 8009158:	1ad2      	subs	r2, r2, r3
 800915a:	9205      	str	r2, [sp, #20]
 800915c:	9a06      	ldr	r2, [sp, #24]
 800915e:	1aed      	subs	r5, r5, r3
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	9306      	str	r3, [sp, #24]
 8009164:	9b08      	ldr	r3, [sp, #32]
 8009166:	b1f3      	cbz	r3, 80091a6 <_dtoa_r+0x7b6>
 8009168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800916a:	2b00      	cmp	r3, #0
 800916c:	f000 80a3 	beq.w	80092b6 <_dtoa_r+0x8c6>
 8009170:	2e00      	cmp	r6, #0
 8009172:	dd10      	ble.n	8009196 <_dtoa_r+0x7a6>
 8009174:	4639      	mov	r1, r7
 8009176:	4632      	mov	r2, r6
 8009178:	4620      	mov	r0, r4
 800917a:	f001 f895 	bl	800a2a8 <__pow5mult>
 800917e:	4652      	mov	r2, sl
 8009180:	4601      	mov	r1, r0
 8009182:	4607      	mov	r7, r0
 8009184:	4620      	mov	r0, r4
 8009186:	f000 ffe5 	bl	800a154 <__multiply>
 800918a:	4651      	mov	r1, sl
 800918c:	4680      	mov	r8, r0
 800918e:	4620      	mov	r0, r4
 8009190:	f000 feca 	bl	8009f28 <_Bfree>
 8009194:	46c2      	mov	sl, r8
 8009196:	9b08      	ldr	r3, [sp, #32]
 8009198:	1b9a      	subs	r2, r3, r6
 800919a:	d004      	beq.n	80091a6 <_dtoa_r+0x7b6>
 800919c:	4651      	mov	r1, sl
 800919e:	4620      	mov	r0, r4
 80091a0:	f001 f882 	bl	800a2a8 <__pow5mult>
 80091a4:	4682      	mov	sl, r0
 80091a6:	2101      	movs	r1, #1
 80091a8:	4620      	mov	r0, r4
 80091aa:	f000 ffbd 	bl	800a128 <__i2b>
 80091ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	4606      	mov	r6, r0
 80091b4:	f340 8081 	ble.w	80092ba <_dtoa_r+0x8ca>
 80091b8:	461a      	mov	r2, r3
 80091ba:	4601      	mov	r1, r0
 80091bc:	4620      	mov	r0, r4
 80091be:	f001 f873 	bl	800a2a8 <__pow5mult>
 80091c2:	9b07      	ldr	r3, [sp, #28]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	4606      	mov	r6, r0
 80091c8:	dd7a      	ble.n	80092c0 <_dtoa_r+0x8d0>
 80091ca:	f04f 0800 	mov.w	r8, #0
 80091ce:	6933      	ldr	r3, [r6, #16]
 80091d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80091d4:	6918      	ldr	r0, [r3, #16]
 80091d6:	f000 ff59 	bl	800a08c <__hi0bits>
 80091da:	f1c0 0020 	rsb	r0, r0, #32
 80091de:	9b06      	ldr	r3, [sp, #24]
 80091e0:	4418      	add	r0, r3
 80091e2:	f010 001f 	ands.w	r0, r0, #31
 80091e6:	f000 8094 	beq.w	8009312 <_dtoa_r+0x922>
 80091ea:	f1c0 0320 	rsb	r3, r0, #32
 80091ee:	2b04      	cmp	r3, #4
 80091f0:	f340 8085 	ble.w	80092fe <_dtoa_r+0x90e>
 80091f4:	9b05      	ldr	r3, [sp, #20]
 80091f6:	f1c0 001c 	rsb	r0, r0, #28
 80091fa:	4403      	add	r3, r0
 80091fc:	9305      	str	r3, [sp, #20]
 80091fe:	9b06      	ldr	r3, [sp, #24]
 8009200:	4403      	add	r3, r0
 8009202:	4405      	add	r5, r0
 8009204:	9306      	str	r3, [sp, #24]
 8009206:	9b05      	ldr	r3, [sp, #20]
 8009208:	2b00      	cmp	r3, #0
 800920a:	dd05      	ble.n	8009218 <_dtoa_r+0x828>
 800920c:	4651      	mov	r1, sl
 800920e:	461a      	mov	r2, r3
 8009210:	4620      	mov	r0, r4
 8009212:	f001 f8a3 	bl	800a35c <__lshift>
 8009216:	4682      	mov	sl, r0
 8009218:	9b06      	ldr	r3, [sp, #24]
 800921a:	2b00      	cmp	r3, #0
 800921c:	dd05      	ble.n	800922a <_dtoa_r+0x83a>
 800921e:	4631      	mov	r1, r6
 8009220:	461a      	mov	r2, r3
 8009222:	4620      	mov	r0, r4
 8009224:	f001 f89a 	bl	800a35c <__lshift>
 8009228:	4606      	mov	r6, r0
 800922a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800922c:	2b00      	cmp	r3, #0
 800922e:	d072      	beq.n	8009316 <_dtoa_r+0x926>
 8009230:	4631      	mov	r1, r6
 8009232:	4650      	mov	r0, sl
 8009234:	f001 f8fe 	bl	800a434 <__mcmp>
 8009238:	2800      	cmp	r0, #0
 800923a:	da6c      	bge.n	8009316 <_dtoa_r+0x926>
 800923c:	2300      	movs	r3, #0
 800923e:	4651      	mov	r1, sl
 8009240:	220a      	movs	r2, #10
 8009242:	4620      	mov	r0, r4
 8009244:	f000 fe92 	bl	8009f6c <__multadd>
 8009248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800924a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800924e:	4682      	mov	sl, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	f000 81b0 	beq.w	80095b6 <_dtoa_r+0xbc6>
 8009256:	2300      	movs	r3, #0
 8009258:	4639      	mov	r1, r7
 800925a:	220a      	movs	r2, #10
 800925c:	4620      	mov	r0, r4
 800925e:	f000 fe85 	bl	8009f6c <__multadd>
 8009262:	9b01      	ldr	r3, [sp, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	4607      	mov	r7, r0
 8009268:	f300 8096 	bgt.w	8009398 <_dtoa_r+0x9a8>
 800926c:	9b07      	ldr	r3, [sp, #28]
 800926e:	2b02      	cmp	r3, #2
 8009270:	dc59      	bgt.n	8009326 <_dtoa_r+0x936>
 8009272:	e091      	b.n	8009398 <_dtoa_r+0x9a8>
 8009274:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009276:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800927a:	e758      	b.n	800912e <_dtoa_r+0x73e>
 800927c:	9b04      	ldr	r3, [sp, #16]
 800927e:	1e5e      	subs	r6, r3, #1
 8009280:	9b08      	ldr	r3, [sp, #32]
 8009282:	42b3      	cmp	r3, r6
 8009284:	bfbf      	itttt	lt
 8009286:	9b08      	ldrlt	r3, [sp, #32]
 8009288:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800928a:	9608      	strlt	r6, [sp, #32]
 800928c:	1af3      	sublt	r3, r6, r3
 800928e:	bfb4      	ite	lt
 8009290:	18d2      	addlt	r2, r2, r3
 8009292:	1b9e      	subge	r6, r3, r6
 8009294:	9b04      	ldr	r3, [sp, #16]
 8009296:	bfbc      	itt	lt
 8009298:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800929a:	2600      	movlt	r6, #0
 800929c:	2b00      	cmp	r3, #0
 800929e:	bfb7      	itett	lt
 80092a0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80092a4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80092a8:	1a9d      	sublt	r5, r3, r2
 80092aa:	2300      	movlt	r3, #0
 80092ac:	e741      	b.n	8009132 <_dtoa_r+0x742>
 80092ae:	9e08      	ldr	r6, [sp, #32]
 80092b0:	9d05      	ldr	r5, [sp, #20]
 80092b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80092b4:	e748      	b.n	8009148 <_dtoa_r+0x758>
 80092b6:	9a08      	ldr	r2, [sp, #32]
 80092b8:	e770      	b.n	800919c <_dtoa_r+0x7ac>
 80092ba:	9b07      	ldr	r3, [sp, #28]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	dc19      	bgt.n	80092f4 <_dtoa_r+0x904>
 80092c0:	9b02      	ldr	r3, [sp, #8]
 80092c2:	b9bb      	cbnz	r3, 80092f4 <_dtoa_r+0x904>
 80092c4:	9b03      	ldr	r3, [sp, #12]
 80092c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092ca:	b99b      	cbnz	r3, 80092f4 <_dtoa_r+0x904>
 80092cc:	9b03      	ldr	r3, [sp, #12]
 80092ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092d2:	0d1b      	lsrs	r3, r3, #20
 80092d4:	051b      	lsls	r3, r3, #20
 80092d6:	b183      	cbz	r3, 80092fa <_dtoa_r+0x90a>
 80092d8:	9b05      	ldr	r3, [sp, #20]
 80092da:	3301      	adds	r3, #1
 80092dc:	9305      	str	r3, [sp, #20]
 80092de:	9b06      	ldr	r3, [sp, #24]
 80092e0:	3301      	adds	r3, #1
 80092e2:	9306      	str	r3, [sp, #24]
 80092e4:	f04f 0801 	mov.w	r8, #1
 80092e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f47f af6f 	bne.w	80091ce <_dtoa_r+0x7de>
 80092f0:	2001      	movs	r0, #1
 80092f2:	e774      	b.n	80091de <_dtoa_r+0x7ee>
 80092f4:	f04f 0800 	mov.w	r8, #0
 80092f8:	e7f6      	b.n	80092e8 <_dtoa_r+0x8f8>
 80092fa:	4698      	mov	r8, r3
 80092fc:	e7f4      	b.n	80092e8 <_dtoa_r+0x8f8>
 80092fe:	d082      	beq.n	8009206 <_dtoa_r+0x816>
 8009300:	9a05      	ldr	r2, [sp, #20]
 8009302:	331c      	adds	r3, #28
 8009304:	441a      	add	r2, r3
 8009306:	9205      	str	r2, [sp, #20]
 8009308:	9a06      	ldr	r2, [sp, #24]
 800930a:	441a      	add	r2, r3
 800930c:	441d      	add	r5, r3
 800930e:	9206      	str	r2, [sp, #24]
 8009310:	e779      	b.n	8009206 <_dtoa_r+0x816>
 8009312:	4603      	mov	r3, r0
 8009314:	e7f4      	b.n	8009300 <_dtoa_r+0x910>
 8009316:	9b04      	ldr	r3, [sp, #16]
 8009318:	2b00      	cmp	r3, #0
 800931a:	dc37      	bgt.n	800938c <_dtoa_r+0x99c>
 800931c:	9b07      	ldr	r3, [sp, #28]
 800931e:	2b02      	cmp	r3, #2
 8009320:	dd34      	ble.n	800938c <_dtoa_r+0x99c>
 8009322:	9b04      	ldr	r3, [sp, #16]
 8009324:	9301      	str	r3, [sp, #4]
 8009326:	9b01      	ldr	r3, [sp, #4]
 8009328:	b963      	cbnz	r3, 8009344 <_dtoa_r+0x954>
 800932a:	4631      	mov	r1, r6
 800932c:	2205      	movs	r2, #5
 800932e:	4620      	mov	r0, r4
 8009330:	f000 fe1c 	bl	8009f6c <__multadd>
 8009334:	4601      	mov	r1, r0
 8009336:	4606      	mov	r6, r0
 8009338:	4650      	mov	r0, sl
 800933a:	f001 f87b 	bl	800a434 <__mcmp>
 800933e:	2800      	cmp	r0, #0
 8009340:	f73f adbb 	bgt.w	8008eba <_dtoa_r+0x4ca>
 8009344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009346:	9d00      	ldr	r5, [sp, #0]
 8009348:	ea6f 0b03 	mvn.w	fp, r3
 800934c:	f04f 0800 	mov.w	r8, #0
 8009350:	4631      	mov	r1, r6
 8009352:	4620      	mov	r0, r4
 8009354:	f000 fde8 	bl	8009f28 <_Bfree>
 8009358:	2f00      	cmp	r7, #0
 800935a:	f43f aeab 	beq.w	80090b4 <_dtoa_r+0x6c4>
 800935e:	f1b8 0f00 	cmp.w	r8, #0
 8009362:	d005      	beq.n	8009370 <_dtoa_r+0x980>
 8009364:	45b8      	cmp	r8, r7
 8009366:	d003      	beq.n	8009370 <_dtoa_r+0x980>
 8009368:	4641      	mov	r1, r8
 800936a:	4620      	mov	r0, r4
 800936c:	f000 fddc 	bl	8009f28 <_Bfree>
 8009370:	4639      	mov	r1, r7
 8009372:	4620      	mov	r0, r4
 8009374:	f000 fdd8 	bl	8009f28 <_Bfree>
 8009378:	e69c      	b.n	80090b4 <_dtoa_r+0x6c4>
 800937a:	2600      	movs	r6, #0
 800937c:	4637      	mov	r7, r6
 800937e:	e7e1      	b.n	8009344 <_dtoa_r+0x954>
 8009380:	46bb      	mov	fp, r7
 8009382:	4637      	mov	r7, r6
 8009384:	e599      	b.n	8008eba <_dtoa_r+0x4ca>
 8009386:	bf00      	nop
 8009388:	40240000 	.word	0x40240000
 800938c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800938e:	2b00      	cmp	r3, #0
 8009390:	f000 80c8 	beq.w	8009524 <_dtoa_r+0xb34>
 8009394:	9b04      	ldr	r3, [sp, #16]
 8009396:	9301      	str	r3, [sp, #4]
 8009398:	2d00      	cmp	r5, #0
 800939a:	dd05      	ble.n	80093a8 <_dtoa_r+0x9b8>
 800939c:	4639      	mov	r1, r7
 800939e:	462a      	mov	r2, r5
 80093a0:	4620      	mov	r0, r4
 80093a2:	f000 ffdb 	bl	800a35c <__lshift>
 80093a6:	4607      	mov	r7, r0
 80093a8:	f1b8 0f00 	cmp.w	r8, #0
 80093ac:	d05b      	beq.n	8009466 <_dtoa_r+0xa76>
 80093ae:	6879      	ldr	r1, [r7, #4]
 80093b0:	4620      	mov	r0, r4
 80093b2:	f000 fd79 	bl	8009ea8 <_Balloc>
 80093b6:	4605      	mov	r5, r0
 80093b8:	b928      	cbnz	r0, 80093c6 <_dtoa_r+0x9d6>
 80093ba:	4b83      	ldr	r3, [pc, #524]	; (80095c8 <_dtoa_r+0xbd8>)
 80093bc:	4602      	mov	r2, r0
 80093be:	f240 21ef 	movw	r1, #751	; 0x2ef
 80093c2:	f7ff bb2e 	b.w	8008a22 <_dtoa_r+0x32>
 80093c6:	693a      	ldr	r2, [r7, #16]
 80093c8:	3202      	adds	r2, #2
 80093ca:	0092      	lsls	r2, r2, #2
 80093cc:	f107 010c 	add.w	r1, r7, #12
 80093d0:	300c      	adds	r0, #12
 80093d2:	f7ff fa64 	bl	800889e <memcpy>
 80093d6:	2201      	movs	r2, #1
 80093d8:	4629      	mov	r1, r5
 80093da:	4620      	mov	r0, r4
 80093dc:	f000 ffbe 	bl	800a35c <__lshift>
 80093e0:	9b00      	ldr	r3, [sp, #0]
 80093e2:	3301      	adds	r3, #1
 80093e4:	9304      	str	r3, [sp, #16]
 80093e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093ea:	4413      	add	r3, r2
 80093ec:	9308      	str	r3, [sp, #32]
 80093ee:	9b02      	ldr	r3, [sp, #8]
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	46b8      	mov	r8, r7
 80093f6:	9306      	str	r3, [sp, #24]
 80093f8:	4607      	mov	r7, r0
 80093fa:	9b04      	ldr	r3, [sp, #16]
 80093fc:	4631      	mov	r1, r6
 80093fe:	3b01      	subs	r3, #1
 8009400:	4650      	mov	r0, sl
 8009402:	9301      	str	r3, [sp, #4]
 8009404:	f7ff fa6a 	bl	80088dc <quorem>
 8009408:	4641      	mov	r1, r8
 800940a:	9002      	str	r0, [sp, #8]
 800940c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009410:	4650      	mov	r0, sl
 8009412:	f001 f80f 	bl	800a434 <__mcmp>
 8009416:	463a      	mov	r2, r7
 8009418:	9005      	str	r0, [sp, #20]
 800941a:	4631      	mov	r1, r6
 800941c:	4620      	mov	r0, r4
 800941e:	f001 f825 	bl	800a46c <__mdiff>
 8009422:	68c2      	ldr	r2, [r0, #12]
 8009424:	4605      	mov	r5, r0
 8009426:	bb02      	cbnz	r2, 800946a <_dtoa_r+0xa7a>
 8009428:	4601      	mov	r1, r0
 800942a:	4650      	mov	r0, sl
 800942c:	f001 f802 	bl	800a434 <__mcmp>
 8009430:	4602      	mov	r2, r0
 8009432:	4629      	mov	r1, r5
 8009434:	4620      	mov	r0, r4
 8009436:	9209      	str	r2, [sp, #36]	; 0x24
 8009438:	f000 fd76 	bl	8009f28 <_Bfree>
 800943c:	9b07      	ldr	r3, [sp, #28]
 800943e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009440:	9d04      	ldr	r5, [sp, #16]
 8009442:	ea43 0102 	orr.w	r1, r3, r2
 8009446:	9b06      	ldr	r3, [sp, #24]
 8009448:	4319      	orrs	r1, r3
 800944a:	d110      	bne.n	800946e <_dtoa_r+0xa7e>
 800944c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009450:	d029      	beq.n	80094a6 <_dtoa_r+0xab6>
 8009452:	9b05      	ldr	r3, [sp, #20]
 8009454:	2b00      	cmp	r3, #0
 8009456:	dd02      	ble.n	800945e <_dtoa_r+0xa6e>
 8009458:	9b02      	ldr	r3, [sp, #8]
 800945a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800945e:	9b01      	ldr	r3, [sp, #4]
 8009460:	f883 9000 	strb.w	r9, [r3]
 8009464:	e774      	b.n	8009350 <_dtoa_r+0x960>
 8009466:	4638      	mov	r0, r7
 8009468:	e7ba      	b.n	80093e0 <_dtoa_r+0x9f0>
 800946a:	2201      	movs	r2, #1
 800946c:	e7e1      	b.n	8009432 <_dtoa_r+0xa42>
 800946e:	9b05      	ldr	r3, [sp, #20]
 8009470:	2b00      	cmp	r3, #0
 8009472:	db04      	blt.n	800947e <_dtoa_r+0xa8e>
 8009474:	9907      	ldr	r1, [sp, #28]
 8009476:	430b      	orrs	r3, r1
 8009478:	9906      	ldr	r1, [sp, #24]
 800947a:	430b      	orrs	r3, r1
 800947c:	d120      	bne.n	80094c0 <_dtoa_r+0xad0>
 800947e:	2a00      	cmp	r2, #0
 8009480:	dded      	ble.n	800945e <_dtoa_r+0xa6e>
 8009482:	4651      	mov	r1, sl
 8009484:	2201      	movs	r2, #1
 8009486:	4620      	mov	r0, r4
 8009488:	f000 ff68 	bl	800a35c <__lshift>
 800948c:	4631      	mov	r1, r6
 800948e:	4682      	mov	sl, r0
 8009490:	f000 ffd0 	bl	800a434 <__mcmp>
 8009494:	2800      	cmp	r0, #0
 8009496:	dc03      	bgt.n	80094a0 <_dtoa_r+0xab0>
 8009498:	d1e1      	bne.n	800945e <_dtoa_r+0xa6e>
 800949a:	f019 0f01 	tst.w	r9, #1
 800949e:	d0de      	beq.n	800945e <_dtoa_r+0xa6e>
 80094a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80094a4:	d1d8      	bne.n	8009458 <_dtoa_r+0xa68>
 80094a6:	9a01      	ldr	r2, [sp, #4]
 80094a8:	2339      	movs	r3, #57	; 0x39
 80094aa:	7013      	strb	r3, [r2, #0]
 80094ac:	462b      	mov	r3, r5
 80094ae:	461d      	mov	r5, r3
 80094b0:	3b01      	subs	r3, #1
 80094b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80094b6:	2a39      	cmp	r2, #57	; 0x39
 80094b8:	d06c      	beq.n	8009594 <_dtoa_r+0xba4>
 80094ba:	3201      	adds	r2, #1
 80094bc:	701a      	strb	r2, [r3, #0]
 80094be:	e747      	b.n	8009350 <_dtoa_r+0x960>
 80094c0:	2a00      	cmp	r2, #0
 80094c2:	dd07      	ble.n	80094d4 <_dtoa_r+0xae4>
 80094c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80094c8:	d0ed      	beq.n	80094a6 <_dtoa_r+0xab6>
 80094ca:	9a01      	ldr	r2, [sp, #4]
 80094cc:	f109 0301 	add.w	r3, r9, #1
 80094d0:	7013      	strb	r3, [r2, #0]
 80094d2:	e73d      	b.n	8009350 <_dtoa_r+0x960>
 80094d4:	9b04      	ldr	r3, [sp, #16]
 80094d6:	9a08      	ldr	r2, [sp, #32]
 80094d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80094dc:	4293      	cmp	r3, r2
 80094de:	d043      	beq.n	8009568 <_dtoa_r+0xb78>
 80094e0:	4651      	mov	r1, sl
 80094e2:	2300      	movs	r3, #0
 80094e4:	220a      	movs	r2, #10
 80094e6:	4620      	mov	r0, r4
 80094e8:	f000 fd40 	bl	8009f6c <__multadd>
 80094ec:	45b8      	cmp	r8, r7
 80094ee:	4682      	mov	sl, r0
 80094f0:	f04f 0300 	mov.w	r3, #0
 80094f4:	f04f 020a 	mov.w	r2, #10
 80094f8:	4641      	mov	r1, r8
 80094fa:	4620      	mov	r0, r4
 80094fc:	d107      	bne.n	800950e <_dtoa_r+0xb1e>
 80094fe:	f000 fd35 	bl	8009f6c <__multadd>
 8009502:	4680      	mov	r8, r0
 8009504:	4607      	mov	r7, r0
 8009506:	9b04      	ldr	r3, [sp, #16]
 8009508:	3301      	adds	r3, #1
 800950a:	9304      	str	r3, [sp, #16]
 800950c:	e775      	b.n	80093fa <_dtoa_r+0xa0a>
 800950e:	f000 fd2d 	bl	8009f6c <__multadd>
 8009512:	4639      	mov	r1, r7
 8009514:	4680      	mov	r8, r0
 8009516:	2300      	movs	r3, #0
 8009518:	220a      	movs	r2, #10
 800951a:	4620      	mov	r0, r4
 800951c:	f000 fd26 	bl	8009f6c <__multadd>
 8009520:	4607      	mov	r7, r0
 8009522:	e7f0      	b.n	8009506 <_dtoa_r+0xb16>
 8009524:	9b04      	ldr	r3, [sp, #16]
 8009526:	9301      	str	r3, [sp, #4]
 8009528:	9d00      	ldr	r5, [sp, #0]
 800952a:	4631      	mov	r1, r6
 800952c:	4650      	mov	r0, sl
 800952e:	f7ff f9d5 	bl	80088dc <quorem>
 8009532:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009536:	9b00      	ldr	r3, [sp, #0]
 8009538:	f805 9b01 	strb.w	r9, [r5], #1
 800953c:	1aea      	subs	r2, r5, r3
 800953e:	9b01      	ldr	r3, [sp, #4]
 8009540:	4293      	cmp	r3, r2
 8009542:	dd07      	ble.n	8009554 <_dtoa_r+0xb64>
 8009544:	4651      	mov	r1, sl
 8009546:	2300      	movs	r3, #0
 8009548:	220a      	movs	r2, #10
 800954a:	4620      	mov	r0, r4
 800954c:	f000 fd0e 	bl	8009f6c <__multadd>
 8009550:	4682      	mov	sl, r0
 8009552:	e7ea      	b.n	800952a <_dtoa_r+0xb3a>
 8009554:	9b01      	ldr	r3, [sp, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	bfc8      	it	gt
 800955a:	461d      	movgt	r5, r3
 800955c:	9b00      	ldr	r3, [sp, #0]
 800955e:	bfd8      	it	le
 8009560:	2501      	movle	r5, #1
 8009562:	441d      	add	r5, r3
 8009564:	f04f 0800 	mov.w	r8, #0
 8009568:	4651      	mov	r1, sl
 800956a:	2201      	movs	r2, #1
 800956c:	4620      	mov	r0, r4
 800956e:	f000 fef5 	bl	800a35c <__lshift>
 8009572:	4631      	mov	r1, r6
 8009574:	4682      	mov	sl, r0
 8009576:	f000 ff5d 	bl	800a434 <__mcmp>
 800957a:	2800      	cmp	r0, #0
 800957c:	dc96      	bgt.n	80094ac <_dtoa_r+0xabc>
 800957e:	d102      	bne.n	8009586 <_dtoa_r+0xb96>
 8009580:	f019 0f01 	tst.w	r9, #1
 8009584:	d192      	bne.n	80094ac <_dtoa_r+0xabc>
 8009586:	462b      	mov	r3, r5
 8009588:	461d      	mov	r5, r3
 800958a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800958e:	2a30      	cmp	r2, #48	; 0x30
 8009590:	d0fa      	beq.n	8009588 <_dtoa_r+0xb98>
 8009592:	e6dd      	b.n	8009350 <_dtoa_r+0x960>
 8009594:	9a00      	ldr	r2, [sp, #0]
 8009596:	429a      	cmp	r2, r3
 8009598:	d189      	bne.n	80094ae <_dtoa_r+0xabe>
 800959a:	f10b 0b01 	add.w	fp, fp, #1
 800959e:	2331      	movs	r3, #49	; 0x31
 80095a0:	e796      	b.n	80094d0 <_dtoa_r+0xae0>
 80095a2:	4b0a      	ldr	r3, [pc, #40]	; (80095cc <_dtoa_r+0xbdc>)
 80095a4:	f7ff ba99 	b.w	8008ada <_dtoa_r+0xea>
 80095a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f47f aa6d 	bne.w	8008a8a <_dtoa_r+0x9a>
 80095b0:	4b07      	ldr	r3, [pc, #28]	; (80095d0 <_dtoa_r+0xbe0>)
 80095b2:	f7ff ba92 	b.w	8008ada <_dtoa_r+0xea>
 80095b6:	9b01      	ldr	r3, [sp, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	dcb5      	bgt.n	8009528 <_dtoa_r+0xb38>
 80095bc:	9b07      	ldr	r3, [sp, #28]
 80095be:	2b02      	cmp	r3, #2
 80095c0:	f73f aeb1 	bgt.w	8009326 <_dtoa_r+0x936>
 80095c4:	e7b0      	b.n	8009528 <_dtoa_r+0xb38>
 80095c6:	bf00      	nop
 80095c8:	0800b721 	.word	0x0800b721
 80095cc:	0800b679 	.word	0x0800b679
 80095d0:	0800b6a5 	.word	0x0800b6a5

080095d4 <_free_r>:
 80095d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095d6:	2900      	cmp	r1, #0
 80095d8:	d044      	beq.n	8009664 <_free_r+0x90>
 80095da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095de:	9001      	str	r0, [sp, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f1a1 0404 	sub.w	r4, r1, #4
 80095e6:	bfb8      	it	lt
 80095e8:	18e4      	addlt	r4, r4, r3
 80095ea:	f000 fc51 	bl	8009e90 <__malloc_lock>
 80095ee:	4a1e      	ldr	r2, [pc, #120]	; (8009668 <_free_r+0x94>)
 80095f0:	9801      	ldr	r0, [sp, #4]
 80095f2:	6813      	ldr	r3, [r2, #0]
 80095f4:	b933      	cbnz	r3, 8009604 <_free_r+0x30>
 80095f6:	6063      	str	r3, [r4, #4]
 80095f8:	6014      	str	r4, [r2, #0]
 80095fa:	b003      	add	sp, #12
 80095fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009600:	f000 bc4c 	b.w	8009e9c <__malloc_unlock>
 8009604:	42a3      	cmp	r3, r4
 8009606:	d908      	bls.n	800961a <_free_r+0x46>
 8009608:	6825      	ldr	r5, [r4, #0]
 800960a:	1961      	adds	r1, r4, r5
 800960c:	428b      	cmp	r3, r1
 800960e:	bf01      	itttt	eq
 8009610:	6819      	ldreq	r1, [r3, #0]
 8009612:	685b      	ldreq	r3, [r3, #4]
 8009614:	1949      	addeq	r1, r1, r5
 8009616:	6021      	streq	r1, [r4, #0]
 8009618:	e7ed      	b.n	80095f6 <_free_r+0x22>
 800961a:	461a      	mov	r2, r3
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	b10b      	cbz	r3, 8009624 <_free_r+0x50>
 8009620:	42a3      	cmp	r3, r4
 8009622:	d9fa      	bls.n	800961a <_free_r+0x46>
 8009624:	6811      	ldr	r1, [r2, #0]
 8009626:	1855      	adds	r5, r2, r1
 8009628:	42a5      	cmp	r5, r4
 800962a:	d10b      	bne.n	8009644 <_free_r+0x70>
 800962c:	6824      	ldr	r4, [r4, #0]
 800962e:	4421      	add	r1, r4
 8009630:	1854      	adds	r4, r2, r1
 8009632:	42a3      	cmp	r3, r4
 8009634:	6011      	str	r1, [r2, #0]
 8009636:	d1e0      	bne.n	80095fa <_free_r+0x26>
 8009638:	681c      	ldr	r4, [r3, #0]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	6053      	str	r3, [r2, #4]
 800963e:	440c      	add	r4, r1
 8009640:	6014      	str	r4, [r2, #0]
 8009642:	e7da      	b.n	80095fa <_free_r+0x26>
 8009644:	d902      	bls.n	800964c <_free_r+0x78>
 8009646:	230c      	movs	r3, #12
 8009648:	6003      	str	r3, [r0, #0]
 800964a:	e7d6      	b.n	80095fa <_free_r+0x26>
 800964c:	6825      	ldr	r5, [r4, #0]
 800964e:	1961      	adds	r1, r4, r5
 8009650:	428b      	cmp	r3, r1
 8009652:	bf04      	itt	eq
 8009654:	6819      	ldreq	r1, [r3, #0]
 8009656:	685b      	ldreq	r3, [r3, #4]
 8009658:	6063      	str	r3, [r4, #4]
 800965a:	bf04      	itt	eq
 800965c:	1949      	addeq	r1, r1, r5
 800965e:	6021      	streq	r1, [r4, #0]
 8009660:	6054      	str	r4, [r2, #4]
 8009662:	e7ca      	b.n	80095fa <_free_r+0x26>
 8009664:	b003      	add	sp, #12
 8009666:	bd30      	pop	{r4, r5, pc}
 8009668:	2000051c 	.word	0x2000051c

0800966c <rshift>:
 800966c:	6903      	ldr	r3, [r0, #16]
 800966e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009672:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009676:	ea4f 1261 	mov.w	r2, r1, asr #5
 800967a:	f100 0414 	add.w	r4, r0, #20
 800967e:	dd45      	ble.n	800970c <rshift+0xa0>
 8009680:	f011 011f 	ands.w	r1, r1, #31
 8009684:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009688:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800968c:	d10c      	bne.n	80096a8 <rshift+0x3c>
 800968e:	f100 0710 	add.w	r7, r0, #16
 8009692:	4629      	mov	r1, r5
 8009694:	42b1      	cmp	r1, r6
 8009696:	d334      	bcc.n	8009702 <rshift+0x96>
 8009698:	1a9b      	subs	r3, r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	1eea      	subs	r2, r5, #3
 800969e:	4296      	cmp	r6, r2
 80096a0:	bf38      	it	cc
 80096a2:	2300      	movcc	r3, #0
 80096a4:	4423      	add	r3, r4
 80096a6:	e015      	b.n	80096d4 <rshift+0x68>
 80096a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80096ac:	f1c1 0820 	rsb	r8, r1, #32
 80096b0:	40cf      	lsrs	r7, r1
 80096b2:	f105 0e04 	add.w	lr, r5, #4
 80096b6:	46a1      	mov	r9, r4
 80096b8:	4576      	cmp	r6, lr
 80096ba:	46f4      	mov	ip, lr
 80096bc:	d815      	bhi.n	80096ea <rshift+0x7e>
 80096be:	1a9a      	subs	r2, r3, r2
 80096c0:	0092      	lsls	r2, r2, #2
 80096c2:	3a04      	subs	r2, #4
 80096c4:	3501      	adds	r5, #1
 80096c6:	42ae      	cmp	r6, r5
 80096c8:	bf38      	it	cc
 80096ca:	2200      	movcc	r2, #0
 80096cc:	18a3      	adds	r3, r4, r2
 80096ce:	50a7      	str	r7, [r4, r2]
 80096d0:	b107      	cbz	r7, 80096d4 <rshift+0x68>
 80096d2:	3304      	adds	r3, #4
 80096d4:	1b1a      	subs	r2, r3, r4
 80096d6:	42a3      	cmp	r3, r4
 80096d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80096dc:	bf08      	it	eq
 80096de:	2300      	moveq	r3, #0
 80096e0:	6102      	str	r2, [r0, #16]
 80096e2:	bf08      	it	eq
 80096e4:	6143      	streq	r3, [r0, #20]
 80096e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096ea:	f8dc c000 	ldr.w	ip, [ip]
 80096ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80096f2:	ea4c 0707 	orr.w	r7, ip, r7
 80096f6:	f849 7b04 	str.w	r7, [r9], #4
 80096fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80096fe:	40cf      	lsrs	r7, r1
 8009700:	e7da      	b.n	80096b8 <rshift+0x4c>
 8009702:	f851 cb04 	ldr.w	ip, [r1], #4
 8009706:	f847 cf04 	str.w	ip, [r7, #4]!
 800970a:	e7c3      	b.n	8009694 <rshift+0x28>
 800970c:	4623      	mov	r3, r4
 800970e:	e7e1      	b.n	80096d4 <rshift+0x68>

08009710 <__hexdig_fun>:
 8009710:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009714:	2b09      	cmp	r3, #9
 8009716:	d802      	bhi.n	800971e <__hexdig_fun+0xe>
 8009718:	3820      	subs	r0, #32
 800971a:	b2c0      	uxtb	r0, r0
 800971c:	4770      	bx	lr
 800971e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009722:	2b05      	cmp	r3, #5
 8009724:	d801      	bhi.n	800972a <__hexdig_fun+0x1a>
 8009726:	3847      	subs	r0, #71	; 0x47
 8009728:	e7f7      	b.n	800971a <__hexdig_fun+0xa>
 800972a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800972e:	2b05      	cmp	r3, #5
 8009730:	d801      	bhi.n	8009736 <__hexdig_fun+0x26>
 8009732:	3827      	subs	r0, #39	; 0x27
 8009734:	e7f1      	b.n	800971a <__hexdig_fun+0xa>
 8009736:	2000      	movs	r0, #0
 8009738:	4770      	bx	lr
	...

0800973c <__gethex>:
 800973c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009740:	4617      	mov	r7, r2
 8009742:	680a      	ldr	r2, [r1, #0]
 8009744:	b085      	sub	sp, #20
 8009746:	f102 0b02 	add.w	fp, r2, #2
 800974a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800974e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009752:	4681      	mov	r9, r0
 8009754:	468a      	mov	sl, r1
 8009756:	9302      	str	r3, [sp, #8]
 8009758:	32fe      	adds	r2, #254	; 0xfe
 800975a:	eb02 030b 	add.w	r3, r2, fp
 800975e:	46d8      	mov	r8, fp
 8009760:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009764:	9301      	str	r3, [sp, #4]
 8009766:	2830      	cmp	r0, #48	; 0x30
 8009768:	d0f7      	beq.n	800975a <__gethex+0x1e>
 800976a:	f7ff ffd1 	bl	8009710 <__hexdig_fun>
 800976e:	4604      	mov	r4, r0
 8009770:	2800      	cmp	r0, #0
 8009772:	d138      	bne.n	80097e6 <__gethex+0xaa>
 8009774:	49a7      	ldr	r1, [pc, #668]	; (8009a14 <__gethex+0x2d8>)
 8009776:	2201      	movs	r2, #1
 8009778:	4640      	mov	r0, r8
 800977a:	f7fe fffe 	bl	800877a <strncmp>
 800977e:	4606      	mov	r6, r0
 8009780:	2800      	cmp	r0, #0
 8009782:	d169      	bne.n	8009858 <__gethex+0x11c>
 8009784:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009788:	465d      	mov	r5, fp
 800978a:	f7ff ffc1 	bl	8009710 <__hexdig_fun>
 800978e:	2800      	cmp	r0, #0
 8009790:	d064      	beq.n	800985c <__gethex+0x120>
 8009792:	465a      	mov	r2, fp
 8009794:	7810      	ldrb	r0, [r2, #0]
 8009796:	2830      	cmp	r0, #48	; 0x30
 8009798:	4690      	mov	r8, r2
 800979a:	f102 0201 	add.w	r2, r2, #1
 800979e:	d0f9      	beq.n	8009794 <__gethex+0x58>
 80097a0:	f7ff ffb6 	bl	8009710 <__hexdig_fun>
 80097a4:	2301      	movs	r3, #1
 80097a6:	fab0 f480 	clz	r4, r0
 80097aa:	0964      	lsrs	r4, r4, #5
 80097ac:	465e      	mov	r6, fp
 80097ae:	9301      	str	r3, [sp, #4]
 80097b0:	4642      	mov	r2, r8
 80097b2:	4615      	mov	r5, r2
 80097b4:	3201      	adds	r2, #1
 80097b6:	7828      	ldrb	r0, [r5, #0]
 80097b8:	f7ff ffaa 	bl	8009710 <__hexdig_fun>
 80097bc:	2800      	cmp	r0, #0
 80097be:	d1f8      	bne.n	80097b2 <__gethex+0x76>
 80097c0:	4994      	ldr	r1, [pc, #592]	; (8009a14 <__gethex+0x2d8>)
 80097c2:	2201      	movs	r2, #1
 80097c4:	4628      	mov	r0, r5
 80097c6:	f7fe ffd8 	bl	800877a <strncmp>
 80097ca:	b978      	cbnz	r0, 80097ec <__gethex+0xb0>
 80097cc:	b946      	cbnz	r6, 80097e0 <__gethex+0xa4>
 80097ce:	1c6e      	adds	r6, r5, #1
 80097d0:	4632      	mov	r2, r6
 80097d2:	4615      	mov	r5, r2
 80097d4:	3201      	adds	r2, #1
 80097d6:	7828      	ldrb	r0, [r5, #0]
 80097d8:	f7ff ff9a 	bl	8009710 <__hexdig_fun>
 80097dc:	2800      	cmp	r0, #0
 80097de:	d1f8      	bne.n	80097d2 <__gethex+0x96>
 80097e0:	1b73      	subs	r3, r6, r5
 80097e2:	009e      	lsls	r6, r3, #2
 80097e4:	e004      	b.n	80097f0 <__gethex+0xb4>
 80097e6:	2400      	movs	r4, #0
 80097e8:	4626      	mov	r6, r4
 80097ea:	e7e1      	b.n	80097b0 <__gethex+0x74>
 80097ec:	2e00      	cmp	r6, #0
 80097ee:	d1f7      	bne.n	80097e0 <__gethex+0xa4>
 80097f0:	782b      	ldrb	r3, [r5, #0]
 80097f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80097f6:	2b50      	cmp	r3, #80	; 0x50
 80097f8:	d13d      	bne.n	8009876 <__gethex+0x13a>
 80097fa:	786b      	ldrb	r3, [r5, #1]
 80097fc:	2b2b      	cmp	r3, #43	; 0x2b
 80097fe:	d02f      	beq.n	8009860 <__gethex+0x124>
 8009800:	2b2d      	cmp	r3, #45	; 0x2d
 8009802:	d031      	beq.n	8009868 <__gethex+0x12c>
 8009804:	1c69      	adds	r1, r5, #1
 8009806:	f04f 0b00 	mov.w	fp, #0
 800980a:	7808      	ldrb	r0, [r1, #0]
 800980c:	f7ff ff80 	bl	8009710 <__hexdig_fun>
 8009810:	1e42      	subs	r2, r0, #1
 8009812:	b2d2      	uxtb	r2, r2
 8009814:	2a18      	cmp	r2, #24
 8009816:	d82e      	bhi.n	8009876 <__gethex+0x13a>
 8009818:	f1a0 0210 	sub.w	r2, r0, #16
 800981c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009820:	f7ff ff76 	bl	8009710 <__hexdig_fun>
 8009824:	f100 3cff 	add.w	ip, r0, #4294967295
 8009828:	fa5f fc8c 	uxtb.w	ip, ip
 800982c:	f1bc 0f18 	cmp.w	ip, #24
 8009830:	d91d      	bls.n	800986e <__gethex+0x132>
 8009832:	f1bb 0f00 	cmp.w	fp, #0
 8009836:	d000      	beq.n	800983a <__gethex+0xfe>
 8009838:	4252      	negs	r2, r2
 800983a:	4416      	add	r6, r2
 800983c:	f8ca 1000 	str.w	r1, [sl]
 8009840:	b1dc      	cbz	r4, 800987a <__gethex+0x13e>
 8009842:	9b01      	ldr	r3, [sp, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	bf14      	ite	ne
 8009848:	f04f 0800 	movne.w	r8, #0
 800984c:	f04f 0806 	moveq.w	r8, #6
 8009850:	4640      	mov	r0, r8
 8009852:	b005      	add	sp, #20
 8009854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009858:	4645      	mov	r5, r8
 800985a:	4626      	mov	r6, r4
 800985c:	2401      	movs	r4, #1
 800985e:	e7c7      	b.n	80097f0 <__gethex+0xb4>
 8009860:	f04f 0b00 	mov.w	fp, #0
 8009864:	1ca9      	adds	r1, r5, #2
 8009866:	e7d0      	b.n	800980a <__gethex+0xce>
 8009868:	f04f 0b01 	mov.w	fp, #1
 800986c:	e7fa      	b.n	8009864 <__gethex+0x128>
 800986e:	230a      	movs	r3, #10
 8009870:	fb03 0002 	mla	r0, r3, r2, r0
 8009874:	e7d0      	b.n	8009818 <__gethex+0xdc>
 8009876:	4629      	mov	r1, r5
 8009878:	e7e0      	b.n	800983c <__gethex+0x100>
 800987a:	eba5 0308 	sub.w	r3, r5, r8
 800987e:	3b01      	subs	r3, #1
 8009880:	4621      	mov	r1, r4
 8009882:	2b07      	cmp	r3, #7
 8009884:	dc0a      	bgt.n	800989c <__gethex+0x160>
 8009886:	4648      	mov	r0, r9
 8009888:	f000 fb0e 	bl	8009ea8 <_Balloc>
 800988c:	4604      	mov	r4, r0
 800988e:	b940      	cbnz	r0, 80098a2 <__gethex+0x166>
 8009890:	4b61      	ldr	r3, [pc, #388]	; (8009a18 <__gethex+0x2dc>)
 8009892:	4602      	mov	r2, r0
 8009894:	21e4      	movs	r1, #228	; 0xe4
 8009896:	4861      	ldr	r0, [pc, #388]	; (8009a1c <__gethex+0x2e0>)
 8009898:	f001 f9f0 	bl	800ac7c <__assert_func>
 800989c:	3101      	adds	r1, #1
 800989e:	105b      	asrs	r3, r3, #1
 80098a0:	e7ef      	b.n	8009882 <__gethex+0x146>
 80098a2:	f100 0a14 	add.w	sl, r0, #20
 80098a6:	2300      	movs	r3, #0
 80098a8:	495a      	ldr	r1, [pc, #360]	; (8009a14 <__gethex+0x2d8>)
 80098aa:	f8cd a004 	str.w	sl, [sp, #4]
 80098ae:	469b      	mov	fp, r3
 80098b0:	45a8      	cmp	r8, r5
 80098b2:	d342      	bcc.n	800993a <__gethex+0x1fe>
 80098b4:	9801      	ldr	r0, [sp, #4]
 80098b6:	f840 bb04 	str.w	fp, [r0], #4
 80098ba:	eba0 000a 	sub.w	r0, r0, sl
 80098be:	1080      	asrs	r0, r0, #2
 80098c0:	6120      	str	r0, [r4, #16]
 80098c2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80098c6:	4658      	mov	r0, fp
 80098c8:	f000 fbe0 	bl	800a08c <__hi0bits>
 80098cc:	683d      	ldr	r5, [r7, #0]
 80098ce:	eba8 0000 	sub.w	r0, r8, r0
 80098d2:	42a8      	cmp	r0, r5
 80098d4:	dd59      	ble.n	800998a <__gethex+0x24e>
 80098d6:	eba0 0805 	sub.w	r8, r0, r5
 80098da:	4641      	mov	r1, r8
 80098dc:	4620      	mov	r0, r4
 80098de:	f000 ff6f 	bl	800a7c0 <__any_on>
 80098e2:	4683      	mov	fp, r0
 80098e4:	b1b8      	cbz	r0, 8009916 <__gethex+0x1da>
 80098e6:	f108 33ff 	add.w	r3, r8, #4294967295
 80098ea:	1159      	asrs	r1, r3, #5
 80098ec:	f003 021f 	and.w	r2, r3, #31
 80098f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80098f4:	f04f 0b01 	mov.w	fp, #1
 80098f8:	fa0b f202 	lsl.w	r2, fp, r2
 80098fc:	420a      	tst	r2, r1
 80098fe:	d00a      	beq.n	8009916 <__gethex+0x1da>
 8009900:	455b      	cmp	r3, fp
 8009902:	dd06      	ble.n	8009912 <__gethex+0x1d6>
 8009904:	f1a8 0102 	sub.w	r1, r8, #2
 8009908:	4620      	mov	r0, r4
 800990a:	f000 ff59 	bl	800a7c0 <__any_on>
 800990e:	2800      	cmp	r0, #0
 8009910:	d138      	bne.n	8009984 <__gethex+0x248>
 8009912:	f04f 0b02 	mov.w	fp, #2
 8009916:	4641      	mov	r1, r8
 8009918:	4620      	mov	r0, r4
 800991a:	f7ff fea7 	bl	800966c <rshift>
 800991e:	4446      	add	r6, r8
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	42b3      	cmp	r3, r6
 8009924:	da41      	bge.n	80099aa <__gethex+0x26e>
 8009926:	4621      	mov	r1, r4
 8009928:	4648      	mov	r0, r9
 800992a:	f000 fafd 	bl	8009f28 <_Bfree>
 800992e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009930:	2300      	movs	r3, #0
 8009932:	6013      	str	r3, [r2, #0]
 8009934:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009938:	e78a      	b.n	8009850 <__gethex+0x114>
 800993a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800993e:	2a2e      	cmp	r2, #46	; 0x2e
 8009940:	d014      	beq.n	800996c <__gethex+0x230>
 8009942:	2b20      	cmp	r3, #32
 8009944:	d106      	bne.n	8009954 <__gethex+0x218>
 8009946:	9b01      	ldr	r3, [sp, #4]
 8009948:	f843 bb04 	str.w	fp, [r3], #4
 800994c:	f04f 0b00 	mov.w	fp, #0
 8009950:	9301      	str	r3, [sp, #4]
 8009952:	465b      	mov	r3, fp
 8009954:	7828      	ldrb	r0, [r5, #0]
 8009956:	9303      	str	r3, [sp, #12]
 8009958:	f7ff feda 	bl	8009710 <__hexdig_fun>
 800995c:	9b03      	ldr	r3, [sp, #12]
 800995e:	f000 000f 	and.w	r0, r0, #15
 8009962:	4098      	lsls	r0, r3
 8009964:	ea4b 0b00 	orr.w	fp, fp, r0
 8009968:	3304      	adds	r3, #4
 800996a:	e7a1      	b.n	80098b0 <__gethex+0x174>
 800996c:	45a8      	cmp	r8, r5
 800996e:	d8e8      	bhi.n	8009942 <__gethex+0x206>
 8009970:	2201      	movs	r2, #1
 8009972:	4628      	mov	r0, r5
 8009974:	9303      	str	r3, [sp, #12]
 8009976:	f7fe ff00 	bl	800877a <strncmp>
 800997a:	4926      	ldr	r1, [pc, #152]	; (8009a14 <__gethex+0x2d8>)
 800997c:	9b03      	ldr	r3, [sp, #12]
 800997e:	2800      	cmp	r0, #0
 8009980:	d1df      	bne.n	8009942 <__gethex+0x206>
 8009982:	e795      	b.n	80098b0 <__gethex+0x174>
 8009984:	f04f 0b03 	mov.w	fp, #3
 8009988:	e7c5      	b.n	8009916 <__gethex+0x1da>
 800998a:	da0b      	bge.n	80099a4 <__gethex+0x268>
 800998c:	eba5 0800 	sub.w	r8, r5, r0
 8009990:	4621      	mov	r1, r4
 8009992:	4642      	mov	r2, r8
 8009994:	4648      	mov	r0, r9
 8009996:	f000 fce1 	bl	800a35c <__lshift>
 800999a:	eba6 0608 	sub.w	r6, r6, r8
 800999e:	4604      	mov	r4, r0
 80099a0:	f100 0a14 	add.w	sl, r0, #20
 80099a4:	f04f 0b00 	mov.w	fp, #0
 80099a8:	e7ba      	b.n	8009920 <__gethex+0x1e4>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	42b3      	cmp	r3, r6
 80099ae:	dd73      	ble.n	8009a98 <__gethex+0x35c>
 80099b0:	1b9e      	subs	r6, r3, r6
 80099b2:	42b5      	cmp	r5, r6
 80099b4:	dc34      	bgt.n	8009a20 <__gethex+0x2e4>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d023      	beq.n	8009a04 <__gethex+0x2c8>
 80099bc:	2b03      	cmp	r3, #3
 80099be:	d025      	beq.n	8009a0c <__gethex+0x2d0>
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d115      	bne.n	80099f0 <__gethex+0x2b4>
 80099c4:	42b5      	cmp	r5, r6
 80099c6:	d113      	bne.n	80099f0 <__gethex+0x2b4>
 80099c8:	2d01      	cmp	r5, #1
 80099ca:	d10b      	bne.n	80099e4 <__gethex+0x2a8>
 80099cc:	9a02      	ldr	r2, [sp, #8]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6013      	str	r3, [r2, #0]
 80099d2:	2301      	movs	r3, #1
 80099d4:	6123      	str	r3, [r4, #16]
 80099d6:	f8ca 3000 	str.w	r3, [sl]
 80099da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099dc:	f04f 0862 	mov.w	r8, #98	; 0x62
 80099e0:	601c      	str	r4, [r3, #0]
 80099e2:	e735      	b.n	8009850 <__gethex+0x114>
 80099e4:	1e69      	subs	r1, r5, #1
 80099e6:	4620      	mov	r0, r4
 80099e8:	f000 feea 	bl	800a7c0 <__any_on>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d1ed      	bne.n	80099cc <__gethex+0x290>
 80099f0:	4621      	mov	r1, r4
 80099f2:	4648      	mov	r0, r9
 80099f4:	f000 fa98 	bl	8009f28 <_Bfree>
 80099f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099fa:	2300      	movs	r3, #0
 80099fc:	6013      	str	r3, [r2, #0]
 80099fe:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009a02:	e725      	b.n	8009850 <__gethex+0x114>
 8009a04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1f2      	bne.n	80099f0 <__gethex+0x2b4>
 8009a0a:	e7df      	b.n	80099cc <__gethex+0x290>
 8009a0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1dc      	bne.n	80099cc <__gethex+0x290>
 8009a12:	e7ed      	b.n	80099f0 <__gethex+0x2b4>
 8009a14:	0800b510 	.word	0x0800b510
 8009a18:	0800b721 	.word	0x0800b721
 8009a1c:	0800b732 	.word	0x0800b732
 8009a20:	f106 38ff 	add.w	r8, r6, #4294967295
 8009a24:	f1bb 0f00 	cmp.w	fp, #0
 8009a28:	d133      	bne.n	8009a92 <__gethex+0x356>
 8009a2a:	f1b8 0f00 	cmp.w	r8, #0
 8009a2e:	d004      	beq.n	8009a3a <__gethex+0x2fe>
 8009a30:	4641      	mov	r1, r8
 8009a32:	4620      	mov	r0, r4
 8009a34:	f000 fec4 	bl	800a7c0 <__any_on>
 8009a38:	4683      	mov	fp, r0
 8009a3a:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009a3e:	2301      	movs	r3, #1
 8009a40:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009a44:	f008 081f 	and.w	r8, r8, #31
 8009a48:	fa03 f308 	lsl.w	r3, r3, r8
 8009a4c:	4213      	tst	r3, r2
 8009a4e:	4631      	mov	r1, r6
 8009a50:	4620      	mov	r0, r4
 8009a52:	bf18      	it	ne
 8009a54:	f04b 0b02 	orrne.w	fp, fp, #2
 8009a58:	1bad      	subs	r5, r5, r6
 8009a5a:	f7ff fe07 	bl	800966c <rshift>
 8009a5e:	687e      	ldr	r6, [r7, #4]
 8009a60:	f04f 0802 	mov.w	r8, #2
 8009a64:	f1bb 0f00 	cmp.w	fp, #0
 8009a68:	d04a      	beq.n	8009b00 <__gethex+0x3c4>
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d016      	beq.n	8009a9e <__gethex+0x362>
 8009a70:	2b03      	cmp	r3, #3
 8009a72:	d018      	beq.n	8009aa6 <__gethex+0x36a>
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d109      	bne.n	8009a8c <__gethex+0x350>
 8009a78:	f01b 0f02 	tst.w	fp, #2
 8009a7c:	d006      	beq.n	8009a8c <__gethex+0x350>
 8009a7e:	f8da 3000 	ldr.w	r3, [sl]
 8009a82:	ea4b 0b03 	orr.w	fp, fp, r3
 8009a86:	f01b 0f01 	tst.w	fp, #1
 8009a8a:	d10f      	bne.n	8009aac <__gethex+0x370>
 8009a8c:	f048 0810 	orr.w	r8, r8, #16
 8009a90:	e036      	b.n	8009b00 <__gethex+0x3c4>
 8009a92:	f04f 0b01 	mov.w	fp, #1
 8009a96:	e7d0      	b.n	8009a3a <__gethex+0x2fe>
 8009a98:	f04f 0801 	mov.w	r8, #1
 8009a9c:	e7e2      	b.n	8009a64 <__gethex+0x328>
 8009a9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009aa0:	f1c3 0301 	rsb	r3, r3, #1
 8009aa4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009aa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d0ef      	beq.n	8009a8c <__gethex+0x350>
 8009aac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ab0:	f104 0214 	add.w	r2, r4, #20
 8009ab4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009ab8:	9301      	str	r3, [sp, #4]
 8009aba:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009abe:	2300      	movs	r3, #0
 8009ac0:	4694      	mov	ip, r2
 8009ac2:	f852 1b04 	ldr.w	r1, [r2], #4
 8009ac6:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009aca:	d01e      	beq.n	8009b0a <__gethex+0x3ce>
 8009acc:	3101      	adds	r1, #1
 8009ace:	f8cc 1000 	str.w	r1, [ip]
 8009ad2:	f1b8 0f02 	cmp.w	r8, #2
 8009ad6:	f104 0214 	add.w	r2, r4, #20
 8009ada:	d13d      	bne.n	8009b58 <__gethex+0x41c>
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	42ab      	cmp	r3, r5
 8009ae2:	d10b      	bne.n	8009afc <__gethex+0x3c0>
 8009ae4:	1169      	asrs	r1, r5, #5
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	f005 051f 	and.w	r5, r5, #31
 8009aec:	fa03 f505 	lsl.w	r5, r3, r5
 8009af0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009af4:	421d      	tst	r5, r3
 8009af6:	bf18      	it	ne
 8009af8:	f04f 0801 	movne.w	r8, #1
 8009afc:	f048 0820 	orr.w	r8, r8, #32
 8009b00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b02:	601c      	str	r4, [r3, #0]
 8009b04:	9b02      	ldr	r3, [sp, #8]
 8009b06:	601e      	str	r6, [r3, #0]
 8009b08:	e6a2      	b.n	8009850 <__gethex+0x114>
 8009b0a:	4290      	cmp	r0, r2
 8009b0c:	f842 3c04 	str.w	r3, [r2, #-4]
 8009b10:	d8d6      	bhi.n	8009ac0 <__gethex+0x384>
 8009b12:	68a2      	ldr	r2, [r4, #8]
 8009b14:	4593      	cmp	fp, r2
 8009b16:	db17      	blt.n	8009b48 <__gethex+0x40c>
 8009b18:	6861      	ldr	r1, [r4, #4]
 8009b1a:	4648      	mov	r0, r9
 8009b1c:	3101      	adds	r1, #1
 8009b1e:	f000 f9c3 	bl	8009ea8 <_Balloc>
 8009b22:	4682      	mov	sl, r0
 8009b24:	b918      	cbnz	r0, 8009b2e <__gethex+0x3f2>
 8009b26:	4b1b      	ldr	r3, [pc, #108]	; (8009b94 <__gethex+0x458>)
 8009b28:	4602      	mov	r2, r0
 8009b2a:	2184      	movs	r1, #132	; 0x84
 8009b2c:	e6b3      	b.n	8009896 <__gethex+0x15a>
 8009b2e:	6922      	ldr	r2, [r4, #16]
 8009b30:	3202      	adds	r2, #2
 8009b32:	f104 010c 	add.w	r1, r4, #12
 8009b36:	0092      	lsls	r2, r2, #2
 8009b38:	300c      	adds	r0, #12
 8009b3a:	f7fe feb0 	bl	800889e <memcpy>
 8009b3e:	4621      	mov	r1, r4
 8009b40:	4648      	mov	r0, r9
 8009b42:	f000 f9f1 	bl	8009f28 <_Bfree>
 8009b46:	4654      	mov	r4, sl
 8009b48:	6922      	ldr	r2, [r4, #16]
 8009b4a:	1c51      	adds	r1, r2, #1
 8009b4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009b50:	6121      	str	r1, [r4, #16]
 8009b52:	2101      	movs	r1, #1
 8009b54:	6151      	str	r1, [r2, #20]
 8009b56:	e7bc      	b.n	8009ad2 <__gethex+0x396>
 8009b58:	6921      	ldr	r1, [r4, #16]
 8009b5a:	4559      	cmp	r1, fp
 8009b5c:	dd0b      	ble.n	8009b76 <__gethex+0x43a>
 8009b5e:	2101      	movs	r1, #1
 8009b60:	4620      	mov	r0, r4
 8009b62:	f7ff fd83 	bl	800966c <rshift>
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	3601      	adds	r6, #1
 8009b6a:	42b3      	cmp	r3, r6
 8009b6c:	f6ff aedb 	blt.w	8009926 <__gethex+0x1ea>
 8009b70:	f04f 0801 	mov.w	r8, #1
 8009b74:	e7c2      	b.n	8009afc <__gethex+0x3c0>
 8009b76:	f015 051f 	ands.w	r5, r5, #31
 8009b7a:	d0f9      	beq.n	8009b70 <__gethex+0x434>
 8009b7c:	9b01      	ldr	r3, [sp, #4]
 8009b7e:	441a      	add	r2, r3
 8009b80:	f1c5 0520 	rsb	r5, r5, #32
 8009b84:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009b88:	f000 fa80 	bl	800a08c <__hi0bits>
 8009b8c:	42a8      	cmp	r0, r5
 8009b8e:	dbe6      	blt.n	8009b5e <__gethex+0x422>
 8009b90:	e7ee      	b.n	8009b70 <__gethex+0x434>
 8009b92:	bf00      	nop
 8009b94:	0800b721 	.word	0x0800b721

08009b98 <L_shift>:
 8009b98:	f1c2 0208 	rsb	r2, r2, #8
 8009b9c:	0092      	lsls	r2, r2, #2
 8009b9e:	b570      	push	{r4, r5, r6, lr}
 8009ba0:	f1c2 0620 	rsb	r6, r2, #32
 8009ba4:	6843      	ldr	r3, [r0, #4]
 8009ba6:	6804      	ldr	r4, [r0, #0]
 8009ba8:	fa03 f506 	lsl.w	r5, r3, r6
 8009bac:	432c      	orrs	r4, r5
 8009bae:	40d3      	lsrs	r3, r2
 8009bb0:	6004      	str	r4, [r0, #0]
 8009bb2:	f840 3f04 	str.w	r3, [r0, #4]!
 8009bb6:	4288      	cmp	r0, r1
 8009bb8:	d3f4      	bcc.n	8009ba4 <L_shift+0xc>
 8009bba:	bd70      	pop	{r4, r5, r6, pc}

08009bbc <__match>:
 8009bbc:	b530      	push	{r4, r5, lr}
 8009bbe:	6803      	ldr	r3, [r0, #0]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bc6:	b914      	cbnz	r4, 8009bce <__match+0x12>
 8009bc8:	6003      	str	r3, [r0, #0]
 8009bca:	2001      	movs	r0, #1
 8009bcc:	bd30      	pop	{r4, r5, pc}
 8009bce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bd2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009bd6:	2d19      	cmp	r5, #25
 8009bd8:	bf98      	it	ls
 8009bda:	3220      	addls	r2, #32
 8009bdc:	42a2      	cmp	r2, r4
 8009bde:	d0f0      	beq.n	8009bc2 <__match+0x6>
 8009be0:	2000      	movs	r0, #0
 8009be2:	e7f3      	b.n	8009bcc <__match+0x10>

08009be4 <__hexnan>:
 8009be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be8:	680b      	ldr	r3, [r1, #0]
 8009bea:	6801      	ldr	r1, [r0, #0]
 8009bec:	115e      	asrs	r6, r3, #5
 8009bee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009bf2:	f013 031f 	ands.w	r3, r3, #31
 8009bf6:	b087      	sub	sp, #28
 8009bf8:	bf18      	it	ne
 8009bfa:	3604      	addne	r6, #4
 8009bfc:	2500      	movs	r5, #0
 8009bfe:	1f37      	subs	r7, r6, #4
 8009c00:	4682      	mov	sl, r0
 8009c02:	4690      	mov	r8, r2
 8009c04:	9301      	str	r3, [sp, #4]
 8009c06:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c0a:	46b9      	mov	r9, r7
 8009c0c:	463c      	mov	r4, r7
 8009c0e:	9502      	str	r5, [sp, #8]
 8009c10:	46ab      	mov	fp, r5
 8009c12:	784a      	ldrb	r2, [r1, #1]
 8009c14:	1c4b      	adds	r3, r1, #1
 8009c16:	9303      	str	r3, [sp, #12]
 8009c18:	b342      	cbz	r2, 8009c6c <__hexnan+0x88>
 8009c1a:	4610      	mov	r0, r2
 8009c1c:	9105      	str	r1, [sp, #20]
 8009c1e:	9204      	str	r2, [sp, #16]
 8009c20:	f7ff fd76 	bl	8009710 <__hexdig_fun>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d14f      	bne.n	8009cc8 <__hexnan+0xe4>
 8009c28:	9a04      	ldr	r2, [sp, #16]
 8009c2a:	9905      	ldr	r1, [sp, #20]
 8009c2c:	2a20      	cmp	r2, #32
 8009c2e:	d818      	bhi.n	8009c62 <__hexnan+0x7e>
 8009c30:	9b02      	ldr	r3, [sp, #8]
 8009c32:	459b      	cmp	fp, r3
 8009c34:	dd13      	ble.n	8009c5e <__hexnan+0x7a>
 8009c36:	454c      	cmp	r4, r9
 8009c38:	d206      	bcs.n	8009c48 <__hexnan+0x64>
 8009c3a:	2d07      	cmp	r5, #7
 8009c3c:	dc04      	bgt.n	8009c48 <__hexnan+0x64>
 8009c3e:	462a      	mov	r2, r5
 8009c40:	4649      	mov	r1, r9
 8009c42:	4620      	mov	r0, r4
 8009c44:	f7ff ffa8 	bl	8009b98 <L_shift>
 8009c48:	4544      	cmp	r4, r8
 8009c4a:	d950      	bls.n	8009cee <__hexnan+0x10a>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f1a4 0904 	sub.w	r9, r4, #4
 8009c52:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c56:	f8cd b008 	str.w	fp, [sp, #8]
 8009c5a:	464c      	mov	r4, r9
 8009c5c:	461d      	mov	r5, r3
 8009c5e:	9903      	ldr	r1, [sp, #12]
 8009c60:	e7d7      	b.n	8009c12 <__hexnan+0x2e>
 8009c62:	2a29      	cmp	r2, #41	; 0x29
 8009c64:	d155      	bne.n	8009d12 <__hexnan+0x12e>
 8009c66:	3102      	adds	r1, #2
 8009c68:	f8ca 1000 	str.w	r1, [sl]
 8009c6c:	f1bb 0f00 	cmp.w	fp, #0
 8009c70:	d04f      	beq.n	8009d12 <__hexnan+0x12e>
 8009c72:	454c      	cmp	r4, r9
 8009c74:	d206      	bcs.n	8009c84 <__hexnan+0xa0>
 8009c76:	2d07      	cmp	r5, #7
 8009c78:	dc04      	bgt.n	8009c84 <__hexnan+0xa0>
 8009c7a:	462a      	mov	r2, r5
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f7ff ff8a 	bl	8009b98 <L_shift>
 8009c84:	4544      	cmp	r4, r8
 8009c86:	d934      	bls.n	8009cf2 <__hexnan+0x10e>
 8009c88:	f1a8 0204 	sub.w	r2, r8, #4
 8009c8c:	4623      	mov	r3, r4
 8009c8e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009c92:	f842 1f04 	str.w	r1, [r2, #4]!
 8009c96:	429f      	cmp	r7, r3
 8009c98:	d2f9      	bcs.n	8009c8e <__hexnan+0xaa>
 8009c9a:	1b3b      	subs	r3, r7, r4
 8009c9c:	f023 0303 	bic.w	r3, r3, #3
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	3e03      	subs	r6, #3
 8009ca4:	3401      	adds	r4, #1
 8009ca6:	42a6      	cmp	r6, r4
 8009ca8:	bf38      	it	cc
 8009caa:	2304      	movcc	r3, #4
 8009cac:	4443      	add	r3, r8
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f843 2b04 	str.w	r2, [r3], #4
 8009cb4:	429f      	cmp	r7, r3
 8009cb6:	d2fb      	bcs.n	8009cb0 <__hexnan+0xcc>
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	b91b      	cbnz	r3, 8009cc4 <__hexnan+0xe0>
 8009cbc:	4547      	cmp	r7, r8
 8009cbe:	d126      	bne.n	8009d0e <__hexnan+0x12a>
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	603b      	str	r3, [r7, #0]
 8009cc4:	2005      	movs	r0, #5
 8009cc6:	e025      	b.n	8009d14 <__hexnan+0x130>
 8009cc8:	3501      	adds	r5, #1
 8009cca:	2d08      	cmp	r5, #8
 8009ccc:	f10b 0b01 	add.w	fp, fp, #1
 8009cd0:	dd06      	ble.n	8009ce0 <__hexnan+0xfc>
 8009cd2:	4544      	cmp	r4, r8
 8009cd4:	d9c3      	bls.n	8009c5e <__hexnan+0x7a>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	f844 3c04 	str.w	r3, [r4, #-4]
 8009cdc:	2501      	movs	r5, #1
 8009cde:	3c04      	subs	r4, #4
 8009ce0:	6822      	ldr	r2, [r4, #0]
 8009ce2:	f000 000f 	and.w	r0, r0, #15
 8009ce6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009cea:	6020      	str	r0, [r4, #0]
 8009cec:	e7b7      	b.n	8009c5e <__hexnan+0x7a>
 8009cee:	2508      	movs	r5, #8
 8009cf0:	e7b5      	b.n	8009c5e <__hexnan+0x7a>
 8009cf2:	9b01      	ldr	r3, [sp, #4]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d0df      	beq.n	8009cb8 <__hexnan+0xd4>
 8009cf8:	f1c3 0320 	rsb	r3, r3, #32
 8009cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8009d00:	40da      	lsrs	r2, r3
 8009d02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009d06:	4013      	ands	r3, r2
 8009d08:	f846 3c04 	str.w	r3, [r6, #-4]
 8009d0c:	e7d4      	b.n	8009cb8 <__hexnan+0xd4>
 8009d0e:	3f04      	subs	r7, #4
 8009d10:	e7d2      	b.n	8009cb8 <__hexnan+0xd4>
 8009d12:	2004      	movs	r0, #4
 8009d14:	b007      	add	sp, #28
 8009d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009d1c <malloc>:
 8009d1c:	4b02      	ldr	r3, [pc, #8]	; (8009d28 <malloc+0xc>)
 8009d1e:	4601      	mov	r1, r0
 8009d20:	6818      	ldr	r0, [r3, #0]
 8009d22:	f000 b823 	b.w	8009d6c <_malloc_r>
 8009d26:	bf00      	nop
 8009d28:	200001d0 	.word	0x200001d0

08009d2c <sbrk_aligned>:
 8009d2c:	b570      	push	{r4, r5, r6, lr}
 8009d2e:	4e0e      	ldr	r6, [pc, #56]	; (8009d68 <sbrk_aligned+0x3c>)
 8009d30:	460c      	mov	r4, r1
 8009d32:	6831      	ldr	r1, [r6, #0]
 8009d34:	4605      	mov	r5, r0
 8009d36:	b911      	cbnz	r1, 8009d3e <sbrk_aligned+0x12>
 8009d38:	f000 ff90 	bl	800ac5c <_sbrk_r>
 8009d3c:	6030      	str	r0, [r6, #0]
 8009d3e:	4621      	mov	r1, r4
 8009d40:	4628      	mov	r0, r5
 8009d42:	f000 ff8b 	bl	800ac5c <_sbrk_r>
 8009d46:	1c43      	adds	r3, r0, #1
 8009d48:	d00a      	beq.n	8009d60 <sbrk_aligned+0x34>
 8009d4a:	1cc4      	adds	r4, r0, #3
 8009d4c:	f024 0403 	bic.w	r4, r4, #3
 8009d50:	42a0      	cmp	r0, r4
 8009d52:	d007      	beq.n	8009d64 <sbrk_aligned+0x38>
 8009d54:	1a21      	subs	r1, r4, r0
 8009d56:	4628      	mov	r0, r5
 8009d58:	f000 ff80 	bl	800ac5c <_sbrk_r>
 8009d5c:	3001      	adds	r0, #1
 8009d5e:	d101      	bne.n	8009d64 <sbrk_aligned+0x38>
 8009d60:	f04f 34ff 	mov.w	r4, #4294967295
 8009d64:	4620      	mov	r0, r4
 8009d66:	bd70      	pop	{r4, r5, r6, pc}
 8009d68:	20000520 	.word	0x20000520

08009d6c <_malloc_r>:
 8009d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d70:	1ccd      	adds	r5, r1, #3
 8009d72:	f025 0503 	bic.w	r5, r5, #3
 8009d76:	3508      	adds	r5, #8
 8009d78:	2d0c      	cmp	r5, #12
 8009d7a:	bf38      	it	cc
 8009d7c:	250c      	movcc	r5, #12
 8009d7e:	2d00      	cmp	r5, #0
 8009d80:	4607      	mov	r7, r0
 8009d82:	db01      	blt.n	8009d88 <_malloc_r+0x1c>
 8009d84:	42a9      	cmp	r1, r5
 8009d86:	d905      	bls.n	8009d94 <_malloc_r+0x28>
 8009d88:	230c      	movs	r3, #12
 8009d8a:	603b      	str	r3, [r7, #0]
 8009d8c:	2600      	movs	r6, #0
 8009d8e:	4630      	mov	r0, r6
 8009d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009e68 <_malloc_r+0xfc>
 8009d98:	f000 f87a 	bl	8009e90 <__malloc_lock>
 8009d9c:	f8d8 3000 	ldr.w	r3, [r8]
 8009da0:	461c      	mov	r4, r3
 8009da2:	bb5c      	cbnz	r4, 8009dfc <_malloc_r+0x90>
 8009da4:	4629      	mov	r1, r5
 8009da6:	4638      	mov	r0, r7
 8009da8:	f7ff ffc0 	bl	8009d2c <sbrk_aligned>
 8009dac:	1c43      	adds	r3, r0, #1
 8009dae:	4604      	mov	r4, r0
 8009db0:	d155      	bne.n	8009e5e <_malloc_r+0xf2>
 8009db2:	f8d8 4000 	ldr.w	r4, [r8]
 8009db6:	4626      	mov	r6, r4
 8009db8:	2e00      	cmp	r6, #0
 8009dba:	d145      	bne.n	8009e48 <_malloc_r+0xdc>
 8009dbc:	2c00      	cmp	r4, #0
 8009dbe:	d048      	beq.n	8009e52 <_malloc_r+0xe6>
 8009dc0:	6823      	ldr	r3, [r4, #0]
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	4638      	mov	r0, r7
 8009dc6:	eb04 0903 	add.w	r9, r4, r3
 8009dca:	f000 ff47 	bl	800ac5c <_sbrk_r>
 8009dce:	4581      	cmp	r9, r0
 8009dd0:	d13f      	bne.n	8009e52 <_malloc_r+0xe6>
 8009dd2:	6821      	ldr	r1, [r4, #0]
 8009dd4:	1a6d      	subs	r5, r5, r1
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	4638      	mov	r0, r7
 8009dda:	f7ff ffa7 	bl	8009d2c <sbrk_aligned>
 8009dde:	3001      	adds	r0, #1
 8009de0:	d037      	beq.n	8009e52 <_malloc_r+0xe6>
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	442b      	add	r3, r5
 8009de6:	6023      	str	r3, [r4, #0]
 8009de8:	f8d8 3000 	ldr.w	r3, [r8]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d038      	beq.n	8009e62 <_malloc_r+0xf6>
 8009df0:	685a      	ldr	r2, [r3, #4]
 8009df2:	42a2      	cmp	r2, r4
 8009df4:	d12b      	bne.n	8009e4e <_malloc_r+0xe2>
 8009df6:	2200      	movs	r2, #0
 8009df8:	605a      	str	r2, [r3, #4]
 8009dfa:	e00f      	b.n	8009e1c <_malloc_r+0xb0>
 8009dfc:	6822      	ldr	r2, [r4, #0]
 8009dfe:	1b52      	subs	r2, r2, r5
 8009e00:	d41f      	bmi.n	8009e42 <_malloc_r+0xd6>
 8009e02:	2a0b      	cmp	r2, #11
 8009e04:	d917      	bls.n	8009e36 <_malloc_r+0xca>
 8009e06:	1961      	adds	r1, r4, r5
 8009e08:	42a3      	cmp	r3, r4
 8009e0a:	6025      	str	r5, [r4, #0]
 8009e0c:	bf18      	it	ne
 8009e0e:	6059      	strne	r1, [r3, #4]
 8009e10:	6863      	ldr	r3, [r4, #4]
 8009e12:	bf08      	it	eq
 8009e14:	f8c8 1000 	streq.w	r1, [r8]
 8009e18:	5162      	str	r2, [r4, r5]
 8009e1a:	604b      	str	r3, [r1, #4]
 8009e1c:	4638      	mov	r0, r7
 8009e1e:	f104 060b 	add.w	r6, r4, #11
 8009e22:	f000 f83b 	bl	8009e9c <__malloc_unlock>
 8009e26:	f026 0607 	bic.w	r6, r6, #7
 8009e2a:	1d23      	adds	r3, r4, #4
 8009e2c:	1af2      	subs	r2, r6, r3
 8009e2e:	d0ae      	beq.n	8009d8e <_malloc_r+0x22>
 8009e30:	1b9b      	subs	r3, r3, r6
 8009e32:	50a3      	str	r3, [r4, r2]
 8009e34:	e7ab      	b.n	8009d8e <_malloc_r+0x22>
 8009e36:	42a3      	cmp	r3, r4
 8009e38:	6862      	ldr	r2, [r4, #4]
 8009e3a:	d1dd      	bne.n	8009df8 <_malloc_r+0x8c>
 8009e3c:	f8c8 2000 	str.w	r2, [r8]
 8009e40:	e7ec      	b.n	8009e1c <_malloc_r+0xb0>
 8009e42:	4623      	mov	r3, r4
 8009e44:	6864      	ldr	r4, [r4, #4]
 8009e46:	e7ac      	b.n	8009da2 <_malloc_r+0x36>
 8009e48:	4634      	mov	r4, r6
 8009e4a:	6876      	ldr	r6, [r6, #4]
 8009e4c:	e7b4      	b.n	8009db8 <_malloc_r+0x4c>
 8009e4e:	4613      	mov	r3, r2
 8009e50:	e7cc      	b.n	8009dec <_malloc_r+0x80>
 8009e52:	230c      	movs	r3, #12
 8009e54:	603b      	str	r3, [r7, #0]
 8009e56:	4638      	mov	r0, r7
 8009e58:	f000 f820 	bl	8009e9c <__malloc_unlock>
 8009e5c:	e797      	b.n	8009d8e <_malloc_r+0x22>
 8009e5e:	6025      	str	r5, [r4, #0]
 8009e60:	e7dc      	b.n	8009e1c <_malloc_r+0xb0>
 8009e62:	605b      	str	r3, [r3, #4]
 8009e64:	deff      	udf	#255	; 0xff
 8009e66:	bf00      	nop
 8009e68:	2000051c 	.word	0x2000051c

08009e6c <__ascii_mbtowc>:
 8009e6c:	b082      	sub	sp, #8
 8009e6e:	b901      	cbnz	r1, 8009e72 <__ascii_mbtowc+0x6>
 8009e70:	a901      	add	r1, sp, #4
 8009e72:	b142      	cbz	r2, 8009e86 <__ascii_mbtowc+0x1a>
 8009e74:	b14b      	cbz	r3, 8009e8a <__ascii_mbtowc+0x1e>
 8009e76:	7813      	ldrb	r3, [r2, #0]
 8009e78:	600b      	str	r3, [r1, #0]
 8009e7a:	7812      	ldrb	r2, [r2, #0]
 8009e7c:	1e10      	subs	r0, r2, #0
 8009e7e:	bf18      	it	ne
 8009e80:	2001      	movne	r0, #1
 8009e82:	b002      	add	sp, #8
 8009e84:	4770      	bx	lr
 8009e86:	4610      	mov	r0, r2
 8009e88:	e7fb      	b.n	8009e82 <__ascii_mbtowc+0x16>
 8009e8a:	f06f 0001 	mvn.w	r0, #1
 8009e8e:	e7f8      	b.n	8009e82 <__ascii_mbtowc+0x16>

08009e90 <__malloc_lock>:
 8009e90:	4801      	ldr	r0, [pc, #4]	; (8009e98 <__malloc_lock+0x8>)
 8009e92:	f7fe bcfa 	b.w	800888a <__retarget_lock_acquire_recursive>
 8009e96:	bf00      	nop
 8009e98:	20000518 	.word	0x20000518

08009e9c <__malloc_unlock>:
 8009e9c:	4801      	ldr	r0, [pc, #4]	; (8009ea4 <__malloc_unlock+0x8>)
 8009e9e:	f7fe bcf5 	b.w	800888c <__retarget_lock_release_recursive>
 8009ea2:	bf00      	nop
 8009ea4:	20000518 	.word	0x20000518

08009ea8 <_Balloc>:
 8009ea8:	b570      	push	{r4, r5, r6, lr}
 8009eaa:	69c6      	ldr	r6, [r0, #28]
 8009eac:	4604      	mov	r4, r0
 8009eae:	460d      	mov	r5, r1
 8009eb0:	b976      	cbnz	r6, 8009ed0 <_Balloc+0x28>
 8009eb2:	2010      	movs	r0, #16
 8009eb4:	f7ff ff32 	bl	8009d1c <malloc>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	61e0      	str	r0, [r4, #28]
 8009ebc:	b920      	cbnz	r0, 8009ec8 <_Balloc+0x20>
 8009ebe:	4b18      	ldr	r3, [pc, #96]	; (8009f20 <_Balloc+0x78>)
 8009ec0:	4818      	ldr	r0, [pc, #96]	; (8009f24 <_Balloc+0x7c>)
 8009ec2:	216b      	movs	r1, #107	; 0x6b
 8009ec4:	f000 feda 	bl	800ac7c <__assert_func>
 8009ec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ecc:	6006      	str	r6, [r0, #0]
 8009ece:	60c6      	str	r6, [r0, #12]
 8009ed0:	69e6      	ldr	r6, [r4, #28]
 8009ed2:	68f3      	ldr	r3, [r6, #12]
 8009ed4:	b183      	cbz	r3, 8009ef8 <_Balloc+0x50>
 8009ed6:	69e3      	ldr	r3, [r4, #28]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ede:	b9b8      	cbnz	r0, 8009f10 <_Balloc+0x68>
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	fa01 f605 	lsl.w	r6, r1, r5
 8009ee6:	1d72      	adds	r2, r6, #5
 8009ee8:	0092      	lsls	r2, r2, #2
 8009eea:	4620      	mov	r0, r4
 8009eec:	f000 fee4 	bl	800acb8 <_calloc_r>
 8009ef0:	b160      	cbz	r0, 8009f0c <_Balloc+0x64>
 8009ef2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ef6:	e00e      	b.n	8009f16 <_Balloc+0x6e>
 8009ef8:	2221      	movs	r2, #33	; 0x21
 8009efa:	2104      	movs	r1, #4
 8009efc:	4620      	mov	r0, r4
 8009efe:	f000 fedb 	bl	800acb8 <_calloc_r>
 8009f02:	69e3      	ldr	r3, [r4, #28]
 8009f04:	60f0      	str	r0, [r6, #12]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d1e4      	bne.n	8009ed6 <_Balloc+0x2e>
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	bd70      	pop	{r4, r5, r6, pc}
 8009f10:	6802      	ldr	r2, [r0, #0]
 8009f12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f16:	2300      	movs	r3, #0
 8009f18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f1c:	e7f7      	b.n	8009f0e <_Balloc+0x66>
 8009f1e:	bf00      	nop
 8009f20:	0800b6b2 	.word	0x0800b6b2
 8009f24:	0800b792 	.word	0x0800b792

08009f28 <_Bfree>:
 8009f28:	b570      	push	{r4, r5, r6, lr}
 8009f2a:	69c6      	ldr	r6, [r0, #28]
 8009f2c:	4605      	mov	r5, r0
 8009f2e:	460c      	mov	r4, r1
 8009f30:	b976      	cbnz	r6, 8009f50 <_Bfree+0x28>
 8009f32:	2010      	movs	r0, #16
 8009f34:	f7ff fef2 	bl	8009d1c <malloc>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	61e8      	str	r0, [r5, #28]
 8009f3c:	b920      	cbnz	r0, 8009f48 <_Bfree+0x20>
 8009f3e:	4b09      	ldr	r3, [pc, #36]	; (8009f64 <_Bfree+0x3c>)
 8009f40:	4809      	ldr	r0, [pc, #36]	; (8009f68 <_Bfree+0x40>)
 8009f42:	218f      	movs	r1, #143	; 0x8f
 8009f44:	f000 fe9a 	bl	800ac7c <__assert_func>
 8009f48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f4c:	6006      	str	r6, [r0, #0]
 8009f4e:	60c6      	str	r6, [r0, #12]
 8009f50:	b13c      	cbz	r4, 8009f62 <_Bfree+0x3a>
 8009f52:	69eb      	ldr	r3, [r5, #28]
 8009f54:	6862      	ldr	r2, [r4, #4]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f5c:	6021      	str	r1, [r4, #0]
 8009f5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f62:	bd70      	pop	{r4, r5, r6, pc}
 8009f64:	0800b6b2 	.word	0x0800b6b2
 8009f68:	0800b792 	.word	0x0800b792

08009f6c <__multadd>:
 8009f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f70:	690d      	ldr	r5, [r1, #16]
 8009f72:	4607      	mov	r7, r0
 8009f74:	460c      	mov	r4, r1
 8009f76:	461e      	mov	r6, r3
 8009f78:	f101 0c14 	add.w	ip, r1, #20
 8009f7c:	2000      	movs	r0, #0
 8009f7e:	f8dc 3000 	ldr.w	r3, [ip]
 8009f82:	b299      	uxth	r1, r3
 8009f84:	fb02 6101 	mla	r1, r2, r1, r6
 8009f88:	0c1e      	lsrs	r6, r3, #16
 8009f8a:	0c0b      	lsrs	r3, r1, #16
 8009f8c:	fb02 3306 	mla	r3, r2, r6, r3
 8009f90:	b289      	uxth	r1, r1
 8009f92:	3001      	adds	r0, #1
 8009f94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f98:	4285      	cmp	r5, r0
 8009f9a:	f84c 1b04 	str.w	r1, [ip], #4
 8009f9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009fa2:	dcec      	bgt.n	8009f7e <__multadd+0x12>
 8009fa4:	b30e      	cbz	r6, 8009fea <__multadd+0x7e>
 8009fa6:	68a3      	ldr	r3, [r4, #8]
 8009fa8:	42ab      	cmp	r3, r5
 8009faa:	dc19      	bgt.n	8009fe0 <__multadd+0x74>
 8009fac:	6861      	ldr	r1, [r4, #4]
 8009fae:	4638      	mov	r0, r7
 8009fb0:	3101      	adds	r1, #1
 8009fb2:	f7ff ff79 	bl	8009ea8 <_Balloc>
 8009fb6:	4680      	mov	r8, r0
 8009fb8:	b928      	cbnz	r0, 8009fc6 <__multadd+0x5a>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	4b0c      	ldr	r3, [pc, #48]	; (8009ff0 <__multadd+0x84>)
 8009fbe:	480d      	ldr	r0, [pc, #52]	; (8009ff4 <__multadd+0x88>)
 8009fc0:	21ba      	movs	r1, #186	; 0xba
 8009fc2:	f000 fe5b 	bl	800ac7c <__assert_func>
 8009fc6:	6922      	ldr	r2, [r4, #16]
 8009fc8:	3202      	adds	r2, #2
 8009fca:	f104 010c 	add.w	r1, r4, #12
 8009fce:	0092      	lsls	r2, r2, #2
 8009fd0:	300c      	adds	r0, #12
 8009fd2:	f7fe fc64 	bl	800889e <memcpy>
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	4638      	mov	r0, r7
 8009fda:	f7ff ffa5 	bl	8009f28 <_Bfree>
 8009fde:	4644      	mov	r4, r8
 8009fe0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fe4:	3501      	adds	r5, #1
 8009fe6:	615e      	str	r6, [r3, #20]
 8009fe8:	6125      	str	r5, [r4, #16]
 8009fea:	4620      	mov	r0, r4
 8009fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff0:	0800b721 	.word	0x0800b721
 8009ff4:	0800b792 	.word	0x0800b792

08009ff8 <__s2b>:
 8009ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ffc:	460c      	mov	r4, r1
 8009ffe:	4615      	mov	r5, r2
 800a000:	461f      	mov	r7, r3
 800a002:	2209      	movs	r2, #9
 800a004:	3308      	adds	r3, #8
 800a006:	4606      	mov	r6, r0
 800a008:	fb93 f3f2 	sdiv	r3, r3, r2
 800a00c:	2100      	movs	r1, #0
 800a00e:	2201      	movs	r2, #1
 800a010:	429a      	cmp	r2, r3
 800a012:	db09      	blt.n	800a028 <__s2b+0x30>
 800a014:	4630      	mov	r0, r6
 800a016:	f7ff ff47 	bl	8009ea8 <_Balloc>
 800a01a:	b940      	cbnz	r0, 800a02e <__s2b+0x36>
 800a01c:	4602      	mov	r2, r0
 800a01e:	4b19      	ldr	r3, [pc, #100]	; (800a084 <__s2b+0x8c>)
 800a020:	4819      	ldr	r0, [pc, #100]	; (800a088 <__s2b+0x90>)
 800a022:	21d3      	movs	r1, #211	; 0xd3
 800a024:	f000 fe2a 	bl	800ac7c <__assert_func>
 800a028:	0052      	lsls	r2, r2, #1
 800a02a:	3101      	adds	r1, #1
 800a02c:	e7f0      	b.n	800a010 <__s2b+0x18>
 800a02e:	9b08      	ldr	r3, [sp, #32]
 800a030:	6143      	str	r3, [r0, #20]
 800a032:	2d09      	cmp	r5, #9
 800a034:	f04f 0301 	mov.w	r3, #1
 800a038:	6103      	str	r3, [r0, #16]
 800a03a:	dd16      	ble.n	800a06a <__s2b+0x72>
 800a03c:	f104 0909 	add.w	r9, r4, #9
 800a040:	46c8      	mov	r8, r9
 800a042:	442c      	add	r4, r5
 800a044:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a048:	4601      	mov	r1, r0
 800a04a:	3b30      	subs	r3, #48	; 0x30
 800a04c:	220a      	movs	r2, #10
 800a04e:	4630      	mov	r0, r6
 800a050:	f7ff ff8c 	bl	8009f6c <__multadd>
 800a054:	45a0      	cmp	r8, r4
 800a056:	d1f5      	bne.n	800a044 <__s2b+0x4c>
 800a058:	f1a5 0408 	sub.w	r4, r5, #8
 800a05c:	444c      	add	r4, r9
 800a05e:	1b2d      	subs	r5, r5, r4
 800a060:	1963      	adds	r3, r4, r5
 800a062:	42bb      	cmp	r3, r7
 800a064:	db04      	blt.n	800a070 <__s2b+0x78>
 800a066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a06a:	340a      	adds	r4, #10
 800a06c:	2509      	movs	r5, #9
 800a06e:	e7f6      	b.n	800a05e <__s2b+0x66>
 800a070:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a074:	4601      	mov	r1, r0
 800a076:	3b30      	subs	r3, #48	; 0x30
 800a078:	220a      	movs	r2, #10
 800a07a:	4630      	mov	r0, r6
 800a07c:	f7ff ff76 	bl	8009f6c <__multadd>
 800a080:	e7ee      	b.n	800a060 <__s2b+0x68>
 800a082:	bf00      	nop
 800a084:	0800b721 	.word	0x0800b721
 800a088:	0800b792 	.word	0x0800b792

0800a08c <__hi0bits>:
 800a08c:	0c03      	lsrs	r3, r0, #16
 800a08e:	041b      	lsls	r3, r3, #16
 800a090:	b9d3      	cbnz	r3, 800a0c8 <__hi0bits+0x3c>
 800a092:	0400      	lsls	r0, r0, #16
 800a094:	2310      	movs	r3, #16
 800a096:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a09a:	bf04      	itt	eq
 800a09c:	0200      	lsleq	r0, r0, #8
 800a09e:	3308      	addeq	r3, #8
 800a0a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a0a4:	bf04      	itt	eq
 800a0a6:	0100      	lsleq	r0, r0, #4
 800a0a8:	3304      	addeq	r3, #4
 800a0aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a0ae:	bf04      	itt	eq
 800a0b0:	0080      	lsleq	r0, r0, #2
 800a0b2:	3302      	addeq	r3, #2
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	db05      	blt.n	800a0c4 <__hi0bits+0x38>
 800a0b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a0bc:	f103 0301 	add.w	r3, r3, #1
 800a0c0:	bf08      	it	eq
 800a0c2:	2320      	moveq	r3, #32
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	4770      	bx	lr
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	e7e4      	b.n	800a096 <__hi0bits+0xa>

0800a0cc <__lo0bits>:
 800a0cc:	6803      	ldr	r3, [r0, #0]
 800a0ce:	f013 0207 	ands.w	r2, r3, #7
 800a0d2:	d00c      	beq.n	800a0ee <__lo0bits+0x22>
 800a0d4:	07d9      	lsls	r1, r3, #31
 800a0d6:	d422      	bmi.n	800a11e <__lo0bits+0x52>
 800a0d8:	079a      	lsls	r2, r3, #30
 800a0da:	bf49      	itett	mi
 800a0dc:	085b      	lsrmi	r3, r3, #1
 800a0de:	089b      	lsrpl	r3, r3, #2
 800a0e0:	6003      	strmi	r3, [r0, #0]
 800a0e2:	2201      	movmi	r2, #1
 800a0e4:	bf5c      	itt	pl
 800a0e6:	6003      	strpl	r3, [r0, #0]
 800a0e8:	2202      	movpl	r2, #2
 800a0ea:	4610      	mov	r0, r2
 800a0ec:	4770      	bx	lr
 800a0ee:	b299      	uxth	r1, r3
 800a0f0:	b909      	cbnz	r1, 800a0f6 <__lo0bits+0x2a>
 800a0f2:	0c1b      	lsrs	r3, r3, #16
 800a0f4:	2210      	movs	r2, #16
 800a0f6:	b2d9      	uxtb	r1, r3
 800a0f8:	b909      	cbnz	r1, 800a0fe <__lo0bits+0x32>
 800a0fa:	3208      	adds	r2, #8
 800a0fc:	0a1b      	lsrs	r3, r3, #8
 800a0fe:	0719      	lsls	r1, r3, #28
 800a100:	bf04      	itt	eq
 800a102:	091b      	lsreq	r3, r3, #4
 800a104:	3204      	addeq	r2, #4
 800a106:	0799      	lsls	r1, r3, #30
 800a108:	bf04      	itt	eq
 800a10a:	089b      	lsreq	r3, r3, #2
 800a10c:	3202      	addeq	r2, #2
 800a10e:	07d9      	lsls	r1, r3, #31
 800a110:	d403      	bmi.n	800a11a <__lo0bits+0x4e>
 800a112:	085b      	lsrs	r3, r3, #1
 800a114:	f102 0201 	add.w	r2, r2, #1
 800a118:	d003      	beq.n	800a122 <__lo0bits+0x56>
 800a11a:	6003      	str	r3, [r0, #0]
 800a11c:	e7e5      	b.n	800a0ea <__lo0bits+0x1e>
 800a11e:	2200      	movs	r2, #0
 800a120:	e7e3      	b.n	800a0ea <__lo0bits+0x1e>
 800a122:	2220      	movs	r2, #32
 800a124:	e7e1      	b.n	800a0ea <__lo0bits+0x1e>
	...

0800a128 <__i2b>:
 800a128:	b510      	push	{r4, lr}
 800a12a:	460c      	mov	r4, r1
 800a12c:	2101      	movs	r1, #1
 800a12e:	f7ff febb 	bl	8009ea8 <_Balloc>
 800a132:	4602      	mov	r2, r0
 800a134:	b928      	cbnz	r0, 800a142 <__i2b+0x1a>
 800a136:	4b05      	ldr	r3, [pc, #20]	; (800a14c <__i2b+0x24>)
 800a138:	4805      	ldr	r0, [pc, #20]	; (800a150 <__i2b+0x28>)
 800a13a:	f240 1145 	movw	r1, #325	; 0x145
 800a13e:	f000 fd9d 	bl	800ac7c <__assert_func>
 800a142:	2301      	movs	r3, #1
 800a144:	6144      	str	r4, [r0, #20]
 800a146:	6103      	str	r3, [r0, #16]
 800a148:	bd10      	pop	{r4, pc}
 800a14a:	bf00      	nop
 800a14c:	0800b721 	.word	0x0800b721
 800a150:	0800b792 	.word	0x0800b792

0800a154 <__multiply>:
 800a154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a158:	4691      	mov	r9, r2
 800a15a:	690a      	ldr	r2, [r1, #16]
 800a15c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a160:	429a      	cmp	r2, r3
 800a162:	bfb8      	it	lt
 800a164:	460b      	movlt	r3, r1
 800a166:	460c      	mov	r4, r1
 800a168:	bfbc      	itt	lt
 800a16a:	464c      	movlt	r4, r9
 800a16c:	4699      	movlt	r9, r3
 800a16e:	6927      	ldr	r7, [r4, #16]
 800a170:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a174:	68a3      	ldr	r3, [r4, #8]
 800a176:	6861      	ldr	r1, [r4, #4]
 800a178:	eb07 060a 	add.w	r6, r7, sl
 800a17c:	42b3      	cmp	r3, r6
 800a17e:	b085      	sub	sp, #20
 800a180:	bfb8      	it	lt
 800a182:	3101      	addlt	r1, #1
 800a184:	f7ff fe90 	bl	8009ea8 <_Balloc>
 800a188:	b930      	cbnz	r0, 800a198 <__multiply+0x44>
 800a18a:	4602      	mov	r2, r0
 800a18c:	4b44      	ldr	r3, [pc, #272]	; (800a2a0 <__multiply+0x14c>)
 800a18e:	4845      	ldr	r0, [pc, #276]	; (800a2a4 <__multiply+0x150>)
 800a190:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a194:	f000 fd72 	bl	800ac7c <__assert_func>
 800a198:	f100 0514 	add.w	r5, r0, #20
 800a19c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a1a0:	462b      	mov	r3, r5
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	4543      	cmp	r3, r8
 800a1a6:	d321      	bcc.n	800a1ec <__multiply+0x98>
 800a1a8:	f104 0314 	add.w	r3, r4, #20
 800a1ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a1b0:	f109 0314 	add.w	r3, r9, #20
 800a1b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a1b8:	9202      	str	r2, [sp, #8]
 800a1ba:	1b3a      	subs	r2, r7, r4
 800a1bc:	3a15      	subs	r2, #21
 800a1be:	f022 0203 	bic.w	r2, r2, #3
 800a1c2:	3204      	adds	r2, #4
 800a1c4:	f104 0115 	add.w	r1, r4, #21
 800a1c8:	428f      	cmp	r7, r1
 800a1ca:	bf38      	it	cc
 800a1cc:	2204      	movcc	r2, #4
 800a1ce:	9201      	str	r2, [sp, #4]
 800a1d0:	9a02      	ldr	r2, [sp, #8]
 800a1d2:	9303      	str	r3, [sp, #12]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d80c      	bhi.n	800a1f2 <__multiply+0x9e>
 800a1d8:	2e00      	cmp	r6, #0
 800a1da:	dd03      	ble.n	800a1e4 <__multiply+0x90>
 800a1dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d05b      	beq.n	800a29c <__multiply+0x148>
 800a1e4:	6106      	str	r6, [r0, #16]
 800a1e6:	b005      	add	sp, #20
 800a1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ec:	f843 2b04 	str.w	r2, [r3], #4
 800a1f0:	e7d8      	b.n	800a1a4 <__multiply+0x50>
 800a1f2:	f8b3 a000 	ldrh.w	sl, [r3]
 800a1f6:	f1ba 0f00 	cmp.w	sl, #0
 800a1fa:	d024      	beq.n	800a246 <__multiply+0xf2>
 800a1fc:	f104 0e14 	add.w	lr, r4, #20
 800a200:	46a9      	mov	r9, r5
 800a202:	f04f 0c00 	mov.w	ip, #0
 800a206:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a20a:	f8d9 1000 	ldr.w	r1, [r9]
 800a20e:	fa1f fb82 	uxth.w	fp, r2
 800a212:	b289      	uxth	r1, r1
 800a214:	fb0a 110b 	mla	r1, sl, fp, r1
 800a218:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a21c:	f8d9 2000 	ldr.w	r2, [r9]
 800a220:	4461      	add	r1, ip
 800a222:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a226:	fb0a c20b 	mla	r2, sl, fp, ip
 800a22a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a22e:	b289      	uxth	r1, r1
 800a230:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a234:	4577      	cmp	r7, lr
 800a236:	f849 1b04 	str.w	r1, [r9], #4
 800a23a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a23e:	d8e2      	bhi.n	800a206 <__multiply+0xb2>
 800a240:	9a01      	ldr	r2, [sp, #4]
 800a242:	f845 c002 	str.w	ip, [r5, r2]
 800a246:	9a03      	ldr	r2, [sp, #12]
 800a248:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a24c:	3304      	adds	r3, #4
 800a24e:	f1b9 0f00 	cmp.w	r9, #0
 800a252:	d021      	beq.n	800a298 <__multiply+0x144>
 800a254:	6829      	ldr	r1, [r5, #0]
 800a256:	f104 0c14 	add.w	ip, r4, #20
 800a25a:	46ae      	mov	lr, r5
 800a25c:	f04f 0a00 	mov.w	sl, #0
 800a260:	f8bc b000 	ldrh.w	fp, [ip]
 800a264:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a268:	fb09 220b 	mla	r2, r9, fp, r2
 800a26c:	4452      	add	r2, sl
 800a26e:	b289      	uxth	r1, r1
 800a270:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a274:	f84e 1b04 	str.w	r1, [lr], #4
 800a278:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a27c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a280:	f8be 1000 	ldrh.w	r1, [lr]
 800a284:	fb09 110a 	mla	r1, r9, sl, r1
 800a288:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a28c:	4567      	cmp	r7, ip
 800a28e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a292:	d8e5      	bhi.n	800a260 <__multiply+0x10c>
 800a294:	9a01      	ldr	r2, [sp, #4]
 800a296:	50a9      	str	r1, [r5, r2]
 800a298:	3504      	adds	r5, #4
 800a29a:	e799      	b.n	800a1d0 <__multiply+0x7c>
 800a29c:	3e01      	subs	r6, #1
 800a29e:	e79b      	b.n	800a1d8 <__multiply+0x84>
 800a2a0:	0800b721 	.word	0x0800b721
 800a2a4:	0800b792 	.word	0x0800b792

0800a2a8 <__pow5mult>:
 800a2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2ac:	4615      	mov	r5, r2
 800a2ae:	f012 0203 	ands.w	r2, r2, #3
 800a2b2:	4606      	mov	r6, r0
 800a2b4:	460f      	mov	r7, r1
 800a2b6:	d007      	beq.n	800a2c8 <__pow5mult+0x20>
 800a2b8:	4c25      	ldr	r4, [pc, #148]	; (800a350 <__pow5mult+0xa8>)
 800a2ba:	3a01      	subs	r2, #1
 800a2bc:	2300      	movs	r3, #0
 800a2be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a2c2:	f7ff fe53 	bl	8009f6c <__multadd>
 800a2c6:	4607      	mov	r7, r0
 800a2c8:	10ad      	asrs	r5, r5, #2
 800a2ca:	d03d      	beq.n	800a348 <__pow5mult+0xa0>
 800a2cc:	69f4      	ldr	r4, [r6, #28]
 800a2ce:	b97c      	cbnz	r4, 800a2f0 <__pow5mult+0x48>
 800a2d0:	2010      	movs	r0, #16
 800a2d2:	f7ff fd23 	bl	8009d1c <malloc>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	61f0      	str	r0, [r6, #28]
 800a2da:	b928      	cbnz	r0, 800a2e8 <__pow5mult+0x40>
 800a2dc:	4b1d      	ldr	r3, [pc, #116]	; (800a354 <__pow5mult+0xac>)
 800a2de:	481e      	ldr	r0, [pc, #120]	; (800a358 <__pow5mult+0xb0>)
 800a2e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a2e4:	f000 fcca 	bl	800ac7c <__assert_func>
 800a2e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2ec:	6004      	str	r4, [r0, #0]
 800a2ee:	60c4      	str	r4, [r0, #12]
 800a2f0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a2f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2f8:	b94c      	cbnz	r4, 800a30e <__pow5mult+0x66>
 800a2fa:	f240 2171 	movw	r1, #625	; 0x271
 800a2fe:	4630      	mov	r0, r6
 800a300:	f7ff ff12 	bl	800a128 <__i2b>
 800a304:	2300      	movs	r3, #0
 800a306:	f8c8 0008 	str.w	r0, [r8, #8]
 800a30a:	4604      	mov	r4, r0
 800a30c:	6003      	str	r3, [r0, #0]
 800a30e:	f04f 0900 	mov.w	r9, #0
 800a312:	07eb      	lsls	r3, r5, #31
 800a314:	d50a      	bpl.n	800a32c <__pow5mult+0x84>
 800a316:	4639      	mov	r1, r7
 800a318:	4622      	mov	r2, r4
 800a31a:	4630      	mov	r0, r6
 800a31c:	f7ff ff1a 	bl	800a154 <__multiply>
 800a320:	4639      	mov	r1, r7
 800a322:	4680      	mov	r8, r0
 800a324:	4630      	mov	r0, r6
 800a326:	f7ff fdff 	bl	8009f28 <_Bfree>
 800a32a:	4647      	mov	r7, r8
 800a32c:	106d      	asrs	r5, r5, #1
 800a32e:	d00b      	beq.n	800a348 <__pow5mult+0xa0>
 800a330:	6820      	ldr	r0, [r4, #0]
 800a332:	b938      	cbnz	r0, 800a344 <__pow5mult+0x9c>
 800a334:	4622      	mov	r2, r4
 800a336:	4621      	mov	r1, r4
 800a338:	4630      	mov	r0, r6
 800a33a:	f7ff ff0b 	bl	800a154 <__multiply>
 800a33e:	6020      	str	r0, [r4, #0]
 800a340:	f8c0 9000 	str.w	r9, [r0]
 800a344:	4604      	mov	r4, r0
 800a346:	e7e4      	b.n	800a312 <__pow5mult+0x6a>
 800a348:	4638      	mov	r0, r7
 800a34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a34e:	bf00      	nop
 800a350:	0800b8e0 	.word	0x0800b8e0
 800a354:	0800b6b2 	.word	0x0800b6b2
 800a358:	0800b792 	.word	0x0800b792

0800a35c <__lshift>:
 800a35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a360:	460c      	mov	r4, r1
 800a362:	6849      	ldr	r1, [r1, #4]
 800a364:	6923      	ldr	r3, [r4, #16]
 800a366:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a36a:	68a3      	ldr	r3, [r4, #8]
 800a36c:	4607      	mov	r7, r0
 800a36e:	4691      	mov	r9, r2
 800a370:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a374:	f108 0601 	add.w	r6, r8, #1
 800a378:	42b3      	cmp	r3, r6
 800a37a:	db0b      	blt.n	800a394 <__lshift+0x38>
 800a37c:	4638      	mov	r0, r7
 800a37e:	f7ff fd93 	bl	8009ea8 <_Balloc>
 800a382:	4605      	mov	r5, r0
 800a384:	b948      	cbnz	r0, 800a39a <__lshift+0x3e>
 800a386:	4602      	mov	r2, r0
 800a388:	4b28      	ldr	r3, [pc, #160]	; (800a42c <__lshift+0xd0>)
 800a38a:	4829      	ldr	r0, [pc, #164]	; (800a430 <__lshift+0xd4>)
 800a38c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a390:	f000 fc74 	bl	800ac7c <__assert_func>
 800a394:	3101      	adds	r1, #1
 800a396:	005b      	lsls	r3, r3, #1
 800a398:	e7ee      	b.n	800a378 <__lshift+0x1c>
 800a39a:	2300      	movs	r3, #0
 800a39c:	f100 0114 	add.w	r1, r0, #20
 800a3a0:	f100 0210 	add.w	r2, r0, #16
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	4553      	cmp	r3, sl
 800a3a8:	db33      	blt.n	800a412 <__lshift+0xb6>
 800a3aa:	6920      	ldr	r0, [r4, #16]
 800a3ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a3b0:	f104 0314 	add.w	r3, r4, #20
 800a3b4:	f019 091f 	ands.w	r9, r9, #31
 800a3b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a3bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a3c0:	d02b      	beq.n	800a41a <__lshift+0xbe>
 800a3c2:	f1c9 0e20 	rsb	lr, r9, #32
 800a3c6:	468a      	mov	sl, r1
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	6818      	ldr	r0, [r3, #0]
 800a3cc:	fa00 f009 	lsl.w	r0, r0, r9
 800a3d0:	4310      	orrs	r0, r2
 800a3d2:	f84a 0b04 	str.w	r0, [sl], #4
 800a3d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3da:	459c      	cmp	ip, r3
 800a3dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800a3e0:	d8f3      	bhi.n	800a3ca <__lshift+0x6e>
 800a3e2:	ebac 0304 	sub.w	r3, ip, r4
 800a3e6:	3b15      	subs	r3, #21
 800a3e8:	f023 0303 	bic.w	r3, r3, #3
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	f104 0015 	add.w	r0, r4, #21
 800a3f2:	4584      	cmp	ip, r0
 800a3f4:	bf38      	it	cc
 800a3f6:	2304      	movcc	r3, #4
 800a3f8:	50ca      	str	r2, [r1, r3]
 800a3fa:	b10a      	cbz	r2, 800a400 <__lshift+0xa4>
 800a3fc:	f108 0602 	add.w	r6, r8, #2
 800a400:	3e01      	subs	r6, #1
 800a402:	4638      	mov	r0, r7
 800a404:	612e      	str	r6, [r5, #16]
 800a406:	4621      	mov	r1, r4
 800a408:	f7ff fd8e 	bl	8009f28 <_Bfree>
 800a40c:	4628      	mov	r0, r5
 800a40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a412:	f842 0f04 	str.w	r0, [r2, #4]!
 800a416:	3301      	adds	r3, #1
 800a418:	e7c5      	b.n	800a3a6 <__lshift+0x4a>
 800a41a:	3904      	subs	r1, #4
 800a41c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a420:	f841 2f04 	str.w	r2, [r1, #4]!
 800a424:	459c      	cmp	ip, r3
 800a426:	d8f9      	bhi.n	800a41c <__lshift+0xc0>
 800a428:	e7ea      	b.n	800a400 <__lshift+0xa4>
 800a42a:	bf00      	nop
 800a42c:	0800b721 	.word	0x0800b721
 800a430:	0800b792 	.word	0x0800b792

0800a434 <__mcmp>:
 800a434:	b530      	push	{r4, r5, lr}
 800a436:	6902      	ldr	r2, [r0, #16]
 800a438:	690c      	ldr	r4, [r1, #16]
 800a43a:	1b12      	subs	r2, r2, r4
 800a43c:	d10e      	bne.n	800a45c <__mcmp+0x28>
 800a43e:	f100 0314 	add.w	r3, r0, #20
 800a442:	3114      	adds	r1, #20
 800a444:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a448:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a44c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a450:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a454:	42a5      	cmp	r5, r4
 800a456:	d003      	beq.n	800a460 <__mcmp+0x2c>
 800a458:	d305      	bcc.n	800a466 <__mcmp+0x32>
 800a45a:	2201      	movs	r2, #1
 800a45c:	4610      	mov	r0, r2
 800a45e:	bd30      	pop	{r4, r5, pc}
 800a460:	4283      	cmp	r3, r0
 800a462:	d3f3      	bcc.n	800a44c <__mcmp+0x18>
 800a464:	e7fa      	b.n	800a45c <__mcmp+0x28>
 800a466:	f04f 32ff 	mov.w	r2, #4294967295
 800a46a:	e7f7      	b.n	800a45c <__mcmp+0x28>

0800a46c <__mdiff>:
 800a46c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a470:	460c      	mov	r4, r1
 800a472:	4606      	mov	r6, r0
 800a474:	4611      	mov	r1, r2
 800a476:	4620      	mov	r0, r4
 800a478:	4690      	mov	r8, r2
 800a47a:	f7ff ffdb 	bl	800a434 <__mcmp>
 800a47e:	1e05      	subs	r5, r0, #0
 800a480:	d110      	bne.n	800a4a4 <__mdiff+0x38>
 800a482:	4629      	mov	r1, r5
 800a484:	4630      	mov	r0, r6
 800a486:	f7ff fd0f 	bl	8009ea8 <_Balloc>
 800a48a:	b930      	cbnz	r0, 800a49a <__mdiff+0x2e>
 800a48c:	4b3a      	ldr	r3, [pc, #232]	; (800a578 <__mdiff+0x10c>)
 800a48e:	4602      	mov	r2, r0
 800a490:	f240 2137 	movw	r1, #567	; 0x237
 800a494:	4839      	ldr	r0, [pc, #228]	; (800a57c <__mdiff+0x110>)
 800a496:	f000 fbf1 	bl	800ac7c <__assert_func>
 800a49a:	2301      	movs	r3, #1
 800a49c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a4a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a4:	bfa4      	itt	ge
 800a4a6:	4643      	movge	r3, r8
 800a4a8:	46a0      	movge	r8, r4
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a4b0:	bfa6      	itte	ge
 800a4b2:	461c      	movge	r4, r3
 800a4b4:	2500      	movge	r5, #0
 800a4b6:	2501      	movlt	r5, #1
 800a4b8:	f7ff fcf6 	bl	8009ea8 <_Balloc>
 800a4bc:	b920      	cbnz	r0, 800a4c8 <__mdiff+0x5c>
 800a4be:	4b2e      	ldr	r3, [pc, #184]	; (800a578 <__mdiff+0x10c>)
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	f240 2145 	movw	r1, #581	; 0x245
 800a4c6:	e7e5      	b.n	800a494 <__mdiff+0x28>
 800a4c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a4cc:	6926      	ldr	r6, [r4, #16]
 800a4ce:	60c5      	str	r5, [r0, #12]
 800a4d0:	f104 0914 	add.w	r9, r4, #20
 800a4d4:	f108 0514 	add.w	r5, r8, #20
 800a4d8:	f100 0e14 	add.w	lr, r0, #20
 800a4dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a4e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a4e4:	f108 0210 	add.w	r2, r8, #16
 800a4e8:	46f2      	mov	sl, lr
 800a4ea:	2100      	movs	r1, #0
 800a4ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800a4f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a4f4:	fa11 f88b 	uxtah	r8, r1, fp
 800a4f8:	b299      	uxth	r1, r3
 800a4fa:	0c1b      	lsrs	r3, r3, #16
 800a4fc:	eba8 0801 	sub.w	r8, r8, r1
 800a500:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a504:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a508:	fa1f f888 	uxth.w	r8, r8
 800a50c:	1419      	asrs	r1, r3, #16
 800a50e:	454e      	cmp	r6, r9
 800a510:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a514:	f84a 3b04 	str.w	r3, [sl], #4
 800a518:	d8e8      	bhi.n	800a4ec <__mdiff+0x80>
 800a51a:	1b33      	subs	r3, r6, r4
 800a51c:	3b15      	subs	r3, #21
 800a51e:	f023 0303 	bic.w	r3, r3, #3
 800a522:	3304      	adds	r3, #4
 800a524:	3415      	adds	r4, #21
 800a526:	42a6      	cmp	r6, r4
 800a528:	bf38      	it	cc
 800a52a:	2304      	movcc	r3, #4
 800a52c:	441d      	add	r5, r3
 800a52e:	4473      	add	r3, lr
 800a530:	469e      	mov	lr, r3
 800a532:	462e      	mov	r6, r5
 800a534:	4566      	cmp	r6, ip
 800a536:	d30e      	bcc.n	800a556 <__mdiff+0xea>
 800a538:	f10c 0203 	add.w	r2, ip, #3
 800a53c:	1b52      	subs	r2, r2, r5
 800a53e:	f022 0203 	bic.w	r2, r2, #3
 800a542:	3d03      	subs	r5, #3
 800a544:	45ac      	cmp	ip, r5
 800a546:	bf38      	it	cc
 800a548:	2200      	movcc	r2, #0
 800a54a:	4413      	add	r3, r2
 800a54c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a550:	b17a      	cbz	r2, 800a572 <__mdiff+0x106>
 800a552:	6107      	str	r7, [r0, #16]
 800a554:	e7a4      	b.n	800a4a0 <__mdiff+0x34>
 800a556:	f856 8b04 	ldr.w	r8, [r6], #4
 800a55a:	fa11 f288 	uxtah	r2, r1, r8
 800a55e:	1414      	asrs	r4, r2, #16
 800a560:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a564:	b292      	uxth	r2, r2
 800a566:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a56a:	f84e 2b04 	str.w	r2, [lr], #4
 800a56e:	1421      	asrs	r1, r4, #16
 800a570:	e7e0      	b.n	800a534 <__mdiff+0xc8>
 800a572:	3f01      	subs	r7, #1
 800a574:	e7ea      	b.n	800a54c <__mdiff+0xe0>
 800a576:	bf00      	nop
 800a578:	0800b721 	.word	0x0800b721
 800a57c:	0800b792 	.word	0x0800b792

0800a580 <__ulp>:
 800a580:	b082      	sub	sp, #8
 800a582:	ed8d 0b00 	vstr	d0, [sp]
 800a586:	9a01      	ldr	r2, [sp, #4]
 800a588:	4b0f      	ldr	r3, [pc, #60]	; (800a5c8 <__ulp+0x48>)
 800a58a:	4013      	ands	r3, r2
 800a58c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a590:	2b00      	cmp	r3, #0
 800a592:	dc08      	bgt.n	800a5a6 <__ulp+0x26>
 800a594:	425b      	negs	r3, r3
 800a596:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a59a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a59e:	da04      	bge.n	800a5aa <__ulp+0x2a>
 800a5a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a5a4:	4113      	asrs	r3, r2
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	e008      	b.n	800a5bc <__ulp+0x3c>
 800a5aa:	f1a2 0314 	sub.w	r3, r2, #20
 800a5ae:	2b1e      	cmp	r3, #30
 800a5b0:	bfda      	itte	le
 800a5b2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a5b6:	40da      	lsrle	r2, r3
 800a5b8:	2201      	movgt	r2, #1
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4610      	mov	r0, r2
 800a5c0:	ec41 0b10 	vmov	d0, r0, r1
 800a5c4:	b002      	add	sp, #8
 800a5c6:	4770      	bx	lr
 800a5c8:	7ff00000 	.word	0x7ff00000

0800a5cc <__b2d>:
 800a5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d0:	6906      	ldr	r6, [r0, #16]
 800a5d2:	f100 0814 	add.w	r8, r0, #20
 800a5d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a5da:	1f37      	subs	r7, r6, #4
 800a5dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a5e0:	4610      	mov	r0, r2
 800a5e2:	f7ff fd53 	bl	800a08c <__hi0bits>
 800a5e6:	f1c0 0320 	rsb	r3, r0, #32
 800a5ea:	280a      	cmp	r0, #10
 800a5ec:	600b      	str	r3, [r1, #0]
 800a5ee:	491b      	ldr	r1, [pc, #108]	; (800a65c <__b2d+0x90>)
 800a5f0:	dc15      	bgt.n	800a61e <__b2d+0x52>
 800a5f2:	f1c0 0c0b 	rsb	ip, r0, #11
 800a5f6:	fa22 f30c 	lsr.w	r3, r2, ip
 800a5fa:	45b8      	cmp	r8, r7
 800a5fc:	ea43 0501 	orr.w	r5, r3, r1
 800a600:	bf34      	ite	cc
 800a602:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a606:	2300      	movcs	r3, #0
 800a608:	3015      	adds	r0, #21
 800a60a:	fa02 f000 	lsl.w	r0, r2, r0
 800a60e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a612:	4303      	orrs	r3, r0
 800a614:	461c      	mov	r4, r3
 800a616:	ec45 4b10 	vmov	d0, r4, r5
 800a61a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a61e:	45b8      	cmp	r8, r7
 800a620:	bf3a      	itte	cc
 800a622:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a626:	f1a6 0708 	subcc.w	r7, r6, #8
 800a62a:	2300      	movcs	r3, #0
 800a62c:	380b      	subs	r0, #11
 800a62e:	d012      	beq.n	800a656 <__b2d+0x8a>
 800a630:	f1c0 0120 	rsb	r1, r0, #32
 800a634:	fa23 f401 	lsr.w	r4, r3, r1
 800a638:	4082      	lsls	r2, r0
 800a63a:	4322      	orrs	r2, r4
 800a63c:	4547      	cmp	r7, r8
 800a63e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a642:	bf8c      	ite	hi
 800a644:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a648:	2200      	movls	r2, #0
 800a64a:	4083      	lsls	r3, r0
 800a64c:	40ca      	lsrs	r2, r1
 800a64e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a652:	4313      	orrs	r3, r2
 800a654:	e7de      	b.n	800a614 <__b2d+0x48>
 800a656:	ea42 0501 	orr.w	r5, r2, r1
 800a65a:	e7db      	b.n	800a614 <__b2d+0x48>
 800a65c:	3ff00000 	.word	0x3ff00000

0800a660 <__d2b>:
 800a660:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a664:	460f      	mov	r7, r1
 800a666:	2101      	movs	r1, #1
 800a668:	ec59 8b10 	vmov	r8, r9, d0
 800a66c:	4616      	mov	r6, r2
 800a66e:	f7ff fc1b 	bl	8009ea8 <_Balloc>
 800a672:	4604      	mov	r4, r0
 800a674:	b930      	cbnz	r0, 800a684 <__d2b+0x24>
 800a676:	4602      	mov	r2, r0
 800a678:	4b24      	ldr	r3, [pc, #144]	; (800a70c <__d2b+0xac>)
 800a67a:	4825      	ldr	r0, [pc, #148]	; (800a710 <__d2b+0xb0>)
 800a67c:	f240 310f 	movw	r1, #783	; 0x30f
 800a680:	f000 fafc 	bl	800ac7c <__assert_func>
 800a684:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a688:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a68c:	bb2d      	cbnz	r5, 800a6da <__d2b+0x7a>
 800a68e:	9301      	str	r3, [sp, #4]
 800a690:	f1b8 0300 	subs.w	r3, r8, #0
 800a694:	d026      	beq.n	800a6e4 <__d2b+0x84>
 800a696:	4668      	mov	r0, sp
 800a698:	9300      	str	r3, [sp, #0]
 800a69a:	f7ff fd17 	bl	800a0cc <__lo0bits>
 800a69e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a6a2:	b1e8      	cbz	r0, 800a6e0 <__d2b+0x80>
 800a6a4:	f1c0 0320 	rsb	r3, r0, #32
 800a6a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ac:	430b      	orrs	r3, r1
 800a6ae:	40c2      	lsrs	r2, r0
 800a6b0:	6163      	str	r3, [r4, #20]
 800a6b2:	9201      	str	r2, [sp, #4]
 800a6b4:	9b01      	ldr	r3, [sp, #4]
 800a6b6:	61a3      	str	r3, [r4, #24]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	bf14      	ite	ne
 800a6bc:	2202      	movne	r2, #2
 800a6be:	2201      	moveq	r2, #1
 800a6c0:	6122      	str	r2, [r4, #16]
 800a6c2:	b1bd      	cbz	r5, 800a6f4 <__d2b+0x94>
 800a6c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a6c8:	4405      	add	r5, r0
 800a6ca:	603d      	str	r5, [r7, #0]
 800a6cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a6d0:	6030      	str	r0, [r6, #0]
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	b003      	add	sp, #12
 800a6d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6de:	e7d6      	b.n	800a68e <__d2b+0x2e>
 800a6e0:	6161      	str	r1, [r4, #20]
 800a6e2:	e7e7      	b.n	800a6b4 <__d2b+0x54>
 800a6e4:	a801      	add	r0, sp, #4
 800a6e6:	f7ff fcf1 	bl	800a0cc <__lo0bits>
 800a6ea:	9b01      	ldr	r3, [sp, #4]
 800a6ec:	6163      	str	r3, [r4, #20]
 800a6ee:	3020      	adds	r0, #32
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	e7e5      	b.n	800a6c0 <__d2b+0x60>
 800a6f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a6fc:	6038      	str	r0, [r7, #0]
 800a6fe:	6918      	ldr	r0, [r3, #16]
 800a700:	f7ff fcc4 	bl	800a08c <__hi0bits>
 800a704:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a708:	e7e2      	b.n	800a6d0 <__d2b+0x70>
 800a70a:	bf00      	nop
 800a70c:	0800b721 	.word	0x0800b721
 800a710:	0800b792 	.word	0x0800b792

0800a714 <__ratio>:
 800a714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a718:	4688      	mov	r8, r1
 800a71a:	4669      	mov	r1, sp
 800a71c:	4681      	mov	r9, r0
 800a71e:	f7ff ff55 	bl	800a5cc <__b2d>
 800a722:	a901      	add	r1, sp, #4
 800a724:	4640      	mov	r0, r8
 800a726:	ec55 4b10 	vmov	r4, r5, d0
 800a72a:	f7ff ff4f 	bl	800a5cc <__b2d>
 800a72e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a732:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a736:	eba3 0c02 	sub.w	ip, r3, r2
 800a73a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a73e:	1a9b      	subs	r3, r3, r2
 800a740:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a744:	ec51 0b10 	vmov	r0, r1, d0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	bfd6      	itet	le
 800a74c:	460a      	movle	r2, r1
 800a74e:	462a      	movgt	r2, r5
 800a750:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a754:	468b      	mov	fp, r1
 800a756:	462f      	mov	r7, r5
 800a758:	bfd4      	ite	le
 800a75a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a75e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a762:	4620      	mov	r0, r4
 800a764:	ee10 2a10 	vmov	r2, s0
 800a768:	465b      	mov	r3, fp
 800a76a:	4639      	mov	r1, r7
 800a76c:	f7f6 f87e 	bl	800086c <__aeabi_ddiv>
 800a770:	ec41 0b10 	vmov	d0, r0, r1
 800a774:	b003      	add	sp, #12
 800a776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a77a <__copybits>:
 800a77a:	3901      	subs	r1, #1
 800a77c:	b570      	push	{r4, r5, r6, lr}
 800a77e:	1149      	asrs	r1, r1, #5
 800a780:	6914      	ldr	r4, [r2, #16]
 800a782:	3101      	adds	r1, #1
 800a784:	f102 0314 	add.w	r3, r2, #20
 800a788:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a78c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a790:	1f05      	subs	r5, r0, #4
 800a792:	42a3      	cmp	r3, r4
 800a794:	d30c      	bcc.n	800a7b0 <__copybits+0x36>
 800a796:	1aa3      	subs	r3, r4, r2
 800a798:	3b11      	subs	r3, #17
 800a79a:	f023 0303 	bic.w	r3, r3, #3
 800a79e:	3211      	adds	r2, #17
 800a7a0:	42a2      	cmp	r2, r4
 800a7a2:	bf88      	it	hi
 800a7a4:	2300      	movhi	r3, #0
 800a7a6:	4418      	add	r0, r3
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	4288      	cmp	r0, r1
 800a7ac:	d305      	bcc.n	800a7ba <__copybits+0x40>
 800a7ae:	bd70      	pop	{r4, r5, r6, pc}
 800a7b0:	f853 6b04 	ldr.w	r6, [r3], #4
 800a7b4:	f845 6f04 	str.w	r6, [r5, #4]!
 800a7b8:	e7eb      	b.n	800a792 <__copybits+0x18>
 800a7ba:	f840 3b04 	str.w	r3, [r0], #4
 800a7be:	e7f4      	b.n	800a7aa <__copybits+0x30>

0800a7c0 <__any_on>:
 800a7c0:	f100 0214 	add.w	r2, r0, #20
 800a7c4:	6900      	ldr	r0, [r0, #16]
 800a7c6:	114b      	asrs	r3, r1, #5
 800a7c8:	4298      	cmp	r0, r3
 800a7ca:	b510      	push	{r4, lr}
 800a7cc:	db11      	blt.n	800a7f2 <__any_on+0x32>
 800a7ce:	dd0a      	ble.n	800a7e6 <__any_on+0x26>
 800a7d0:	f011 011f 	ands.w	r1, r1, #31
 800a7d4:	d007      	beq.n	800a7e6 <__any_on+0x26>
 800a7d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a7da:	fa24 f001 	lsr.w	r0, r4, r1
 800a7de:	fa00 f101 	lsl.w	r1, r0, r1
 800a7e2:	428c      	cmp	r4, r1
 800a7e4:	d10b      	bne.n	800a7fe <__any_on+0x3e>
 800a7e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d803      	bhi.n	800a7f6 <__any_on+0x36>
 800a7ee:	2000      	movs	r0, #0
 800a7f0:	bd10      	pop	{r4, pc}
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	e7f7      	b.n	800a7e6 <__any_on+0x26>
 800a7f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7fa:	2900      	cmp	r1, #0
 800a7fc:	d0f5      	beq.n	800a7ea <__any_on+0x2a>
 800a7fe:	2001      	movs	r0, #1
 800a800:	e7f6      	b.n	800a7f0 <__any_on+0x30>

0800a802 <__ascii_wctomb>:
 800a802:	b149      	cbz	r1, 800a818 <__ascii_wctomb+0x16>
 800a804:	2aff      	cmp	r2, #255	; 0xff
 800a806:	bf85      	ittet	hi
 800a808:	238a      	movhi	r3, #138	; 0x8a
 800a80a:	6003      	strhi	r3, [r0, #0]
 800a80c:	700a      	strbls	r2, [r1, #0]
 800a80e:	f04f 30ff 	movhi.w	r0, #4294967295
 800a812:	bf98      	it	ls
 800a814:	2001      	movls	r0, #1
 800a816:	4770      	bx	lr
 800a818:	4608      	mov	r0, r1
 800a81a:	4770      	bx	lr

0800a81c <__ssputs_r>:
 800a81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a820:	688e      	ldr	r6, [r1, #8]
 800a822:	461f      	mov	r7, r3
 800a824:	42be      	cmp	r6, r7
 800a826:	680b      	ldr	r3, [r1, #0]
 800a828:	4682      	mov	sl, r0
 800a82a:	460c      	mov	r4, r1
 800a82c:	4690      	mov	r8, r2
 800a82e:	d82c      	bhi.n	800a88a <__ssputs_r+0x6e>
 800a830:	898a      	ldrh	r2, [r1, #12]
 800a832:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a836:	d026      	beq.n	800a886 <__ssputs_r+0x6a>
 800a838:	6965      	ldr	r5, [r4, #20]
 800a83a:	6909      	ldr	r1, [r1, #16]
 800a83c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a840:	eba3 0901 	sub.w	r9, r3, r1
 800a844:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a848:	1c7b      	adds	r3, r7, #1
 800a84a:	444b      	add	r3, r9
 800a84c:	106d      	asrs	r5, r5, #1
 800a84e:	429d      	cmp	r5, r3
 800a850:	bf38      	it	cc
 800a852:	461d      	movcc	r5, r3
 800a854:	0553      	lsls	r3, r2, #21
 800a856:	d527      	bpl.n	800a8a8 <__ssputs_r+0x8c>
 800a858:	4629      	mov	r1, r5
 800a85a:	f7ff fa87 	bl	8009d6c <_malloc_r>
 800a85e:	4606      	mov	r6, r0
 800a860:	b360      	cbz	r0, 800a8bc <__ssputs_r+0xa0>
 800a862:	6921      	ldr	r1, [r4, #16]
 800a864:	464a      	mov	r2, r9
 800a866:	f7fe f81a 	bl	800889e <memcpy>
 800a86a:	89a3      	ldrh	r3, [r4, #12]
 800a86c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a874:	81a3      	strh	r3, [r4, #12]
 800a876:	6126      	str	r6, [r4, #16]
 800a878:	6165      	str	r5, [r4, #20]
 800a87a:	444e      	add	r6, r9
 800a87c:	eba5 0509 	sub.w	r5, r5, r9
 800a880:	6026      	str	r6, [r4, #0]
 800a882:	60a5      	str	r5, [r4, #8]
 800a884:	463e      	mov	r6, r7
 800a886:	42be      	cmp	r6, r7
 800a888:	d900      	bls.n	800a88c <__ssputs_r+0x70>
 800a88a:	463e      	mov	r6, r7
 800a88c:	6820      	ldr	r0, [r4, #0]
 800a88e:	4632      	mov	r2, r6
 800a890:	4641      	mov	r1, r8
 800a892:	f000 f9c9 	bl	800ac28 <memmove>
 800a896:	68a3      	ldr	r3, [r4, #8]
 800a898:	1b9b      	subs	r3, r3, r6
 800a89a:	60a3      	str	r3, [r4, #8]
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	4433      	add	r3, r6
 800a8a0:	6023      	str	r3, [r4, #0]
 800a8a2:	2000      	movs	r0, #0
 800a8a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a8:	462a      	mov	r2, r5
 800a8aa:	f000 fa1b 	bl	800ace4 <_realloc_r>
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d1e0      	bne.n	800a876 <__ssputs_r+0x5a>
 800a8b4:	6921      	ldr	r1, [r4, #16]
 800a8b6:	4650      	mov	r0, sl
 800a8b8:	f7fe fe8c 	bl	80095d4 <_free_r>
 800a8bc:	230c      	movs	r3, #12
 800a8be:	f8ca 3000 	str.w	r3, [sl]
 800a8c2:	89a3      	ldrh	r3, [r4, #12]
 800a8c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8c8:	81a3      	strh	r3, [r4, #12]
 800a8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ce:	e7e9      	b.n	800a8a4 <__ssputs_r+0x88>

0800a8d0 <_svfiprintf_r>:
 800a8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d4:	4698      	mov	r8, r3
 800a8d6:	898b      	ldrh	r3, [r1, #12]
 800a8d8:	061b      	lsls	r3, r3, #24
 800a8da:	b09d      	sub	sp, #116	; 0x74
 800a8dc:	4607      	mov	r7, r0
 800a8de:	460d      	mov	r5, r1
 800a8e0:	4614      	mov	r4, r2
 800a8e2:	d50e      	bpl.n	800a902 <_svfiprintf_r+0x32>
 800a8e4:	690b      	ldr	r3, [r1, #16]
 800a8e6:	b963      	cbnz	r3, 800a902 <_svfiprintf_r+0x32>
 800a8e8:	2140      	movs	r1, #64	; 0x40
 800a8ea:	f7ff fa3f 	bl	8009d6c <_malloc_r>
 800a8ee:	6028      	str	r0, [r5, #0]
 800a8f0:	6128      	str	r0, [r5, #16]
 800a8f2:	b920      	cbnz	r0, 800a8fe <_svfiprintf_r+0x2e>
 800a8f4:	230c      	movs	r3, #12
 800a8f6:	603b      	str	r3, [r7, #0]
 800a8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8fc:	e0d0      	b.n	800aaa0 <_svfiprintf_r+0x1d0>
 800a8fe:	2340      	movs	r3, #64	; 0x40
 800a900:	616b      	str	r3, [r5, #20]
 800a902:	2300      	movs	r3, #0
 800a904:	9309      	str	r3, [sp, #36]	; 0x24
 800a906:	2320      	movs	r3, #32
 800a908:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a90c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a910:	2330      	movs	r3, #48	; 0x30
 800a912:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aab8 <_svfiprintf_r+0x1e8>
 800a916:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a91a:	f04f 0901 	mov.w	r9, #1
 800a91e:	4623      	mov	r3, r4
 800a920:	469a      	mov	sl, r3
 800a922:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a926:	b10a      	cbz	r2, 800a92c <_svfiprintf_r+0x5c>
 800a928:	2a25      	cmp	r2, #37	; 0x25
 800a92a:	d1f9      	bne.n	800a920 <_svfiprintf_r+0x50>
 800a92c:	ebba 0b04 	subs.w	fp, sl, r4
 800a930:	d00b      	beq.n	800a94a <_svfiprintf_r+0x7a>
 800a932:	465b      	mov	r3, fp
 800a934:	4622      	mov	r2, r4
 800a936:	4629      	mov	r1, r5
 800a938:	4638      	mov	r0, r7
 800a93a:	f7ff ff6f 	bl	800a81c <__ssputs_r>
 800a93e:	3001      	adds	r0, #1
 800a940:	f000 80a9 	beq.w	800aa96 <_svfiprintf_r+0x1c6>
 800a944:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a946:	445a      	add	r2, fp
 800a948:	9209      	str	r2, [sp, #36]	; 0x24
 800a94a:	f89a 3000 	ldrb.w	r3, [sl]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	f000 80a1 	beq.w	800aa96 <_svfiprintf_r+0x1c6>
 800a954:	2300      	movs	r3, #0
 800a956:	f04f 32ff 	mov.w	r2, #4294967295
 800a95a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a95e:	f10a 0a01 	add.w	sl, sl, #1
 800a962:	9304      	str	r3, [sp, #16]
 800a964:	9307      	str	r3, [sp, #28]
 800a966:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a96a:	931a      	str	r3, [sp, #104]	; 0x68
 800a96c:	4654      	mov	r4, sl
 800a96e:	2205      	movs	r2, #5
 800a970:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a974:	4850      	ldr	r0, [pc, #320]	; (800aab8 <_svfiprintf_r+0x1e8>)
 800a976:	f7f5 fc3b 	bl	80001f0 <memchr>
 800a97a:	9a04      	ldr	r2, [sp, #16]
 800a97c:	b9d8      	cbnz	r0, 800a9b6 <_svfiprintf_r+0xe6>
 800a97e:	06d0      	lsls	r0, r2, #27
 800a980:	bf44      	itt	mi
 800a982:	2320      	movmi	r3, #32
 800a984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a988:	0711      	lsls	r1, r2, #28
 800a98a:	bf44      	itt	mi
 800a98c:	232b      	movmi	r3, #43	; 0x2b
 800a98e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a992:	f89a 3000 	ldrb.w	r3, [sl]
 800a996:	2b2a      	cmp	r3, #42	; 0x2a
 800a998:	d015      	beq.n	800a9c6 <_svfiprintf_r+0xf6>
 800a99a:	9a07      	ldr	r2, [sp, #28]
 800a99c:	4654      	mov	r4, sl
 800a99e:	2000      	movs	r0, #0
 800a9a0:	f04f 0c0a 	mov.w	ip, #10
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9aa:	3b30      	subs	r3, #48	; 0x30
 800a9ac:	2b09      	cmp	r3, #9
 800a9ae:	d94d      	bls.n	800aa4c <_svfiprintf_r+0x17c>
 800a9b0:	b1b0      	cbz	r0, 800a9e0 <_svfiprintf_r+0x110>
 800a9b2:	9207      	str	r2, [sp, #28]
 800a9b4:	e014      	b.n	800a9e0 <_svfiprintf_r+0x110>
 800a9b6:	eba0 0308 	sub.w	r3, r0, r8
 800a9ba:	fa09 f303 	lsl.w	r3, r9, r3
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	9304      	str	r3, [sp, #16]
 800a9c2:	46a2      	mov	sl, r4
 800a9c4:	e7d2      	b.n	800a96c <_svfiprintf_r+0x9c>
 800a9c6:	9b03      	ldr	r3, [sp, #12]
 800a9c8:	1d19      	adds	r1, r3, #4
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	9103      	str	r1, [sp, #12]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	bfbb      	ittet	lt
 800a9d2:	425b      	neglt	r3, r3
 800a9d4:	f042 0202 	orrlt.w	r2, r2, #2
 800a9d8:	9307      	strge	r3, [sp, #28]
 800a9da:	9307      	strlt	r3, [sp, #28]
 800a9dc:	bfb8      	it	lt
 800a9de:	9204      	strlt	r2, [sp, #16]
 800a9e0:	7823      	ldrb	r3, [r4, #0]
 800a9e2:	2b2e      	cmp	r3, #46	; 0x2e
 800a9e4:	d10c      	bne.n	800aa00 <_svfiprintf_r+0x130>
 800a9e6:	7863      	ldrb	r3, [r4, #1]
 800a9e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a9ea:	d134      	bne.n	800aa56 <_svfiprintf_r+0x186>
 800a9ec:	9b03      	ldr	r3, [sp, #12]
 800a9ee:	1d1a      	adds	r2, r3, #4
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	9203      	str	r2, [sp, #12]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	bfb8      	it	lt
 800a9f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9fc:	3402      	adds	r4, #2
 800a9fe:	9305      	str	r3, [sp, #20]
 800aa00:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800aac8 <_svfiprintf_r+0x1f8>
 800aa04:	7821      	ldrb	r1, [r4, #0]
 800aa06:	2203      	movs	r2, #3
 800aa08:	4650      	mov	r0, sl
 800aa0a:	f7f5 fbf1 	bl	80001f0 <memchr>
 800aa0e:	b138      	cbz	r0, 800aa20 <_svfiprintf_r+0x150>
 800aa10:	9b04      	ldr	r3, [sp, #16]
 800aa12:	eba0 000a 	sub.w	r0, r0, sl
 800aa16:	2240      	movs	r2, #64	; 0x40
 800aa18:	4082      	lsls	r2, r0
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	3401      	adds	r4, #1
 800aa1e:	9304      	str	r3, [sp, #16]
 800aa20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa24:	4825      	ldr	r0, [pc, #148]	; (800aabc <_svfiprintf_r+0x1ec>)
 800aa26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa2a:	2206      	movs	r2, #6
 800aa2c:	f7f5 fbe0 	bl	80001f0 <memchr>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d038      	beq.n	800aaa6 <_svfiprintf_r+0x1d6>
 800aa34:	4b22      	ldr	r3, [pc, #136]	; (800aac0 <_svfiprintf_r+0x1f0>)
 800aa36:	bb1b      	cbnz	r3, 800aa80 <_svfiprintf_r+0x1b0>
 800aa38:	9b03      	ldr	r3, [sp, #12]
 800aa3a:	3307      	adds	r3, #7
 800aa3c:	f023 0307 	bic.w	r3, r3, #7
 800aa40:	3308      	adds	r3, #8
 800aa42:	9303      	str	r3, [sp, #12]
 800aa44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa46:	4433      	add	r3, r6
 800aa48:	9309      	str	r3, [sp, #36]	; 0x24
 800aa4a:	e768      	b.n	800a91e <_svfiprintf_r+0x4e>
 800aa4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa50:	460c      	mov	r4, r1
 800aa52:	2001      	movs	r0, #1
 800aa54:	e7a6      	b.n	800a9a4 <_svfiprintf_r+0xd4>
 800aa56:	2300      	movs	r3, #0
 800aa58:	3401      	adds	r4, #1
 800aa5a:	9305      	str	r3, [sp, #20]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	f04f 0c0a 	mov.w	ip, #10
 800aa62:	4620      	mov	r0, r4
 800aa64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa68:	3a30      	subs	r2, #48	; 0x30
 800aa6a:	2a09      	cmp	r2, #9
 800aa6c:	d903      	bls.n	800aa76 <_svfiprintf_r+0x1a6>
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d0c6      	beq.n	800aa00 <_svfiprintf_r+0x130>
 800aa72:	9105      	str	r1, [sp, #20]
 800aa74:	e7c4      	b.n	800aa00 <_svfiprintf_r+0x130>
 800aa76:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e7f0      	b.n	800aa62 <_svfiprintf_r+0x192>
 800aa80:	ab03      	add	r3, sp, #12
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	462a      	mov	r2, r5
 800aa86:	4b0f      	ldr	r3, [pc, #60]	; (800aac4 <_svfiprintf_r+0x1f4>)
 800aa88:	a904      	add	r1, sp, #16
 800aa8a:	4638      	mov	r0, r7
 800aa8c:	f7fd f96e 	bl	8007d6c <_printf_float>
 800aa90:	1c42      	adds	r2, r0, #1
 800aa92:	4606      	mov	r6, r0
 800aa94:	d1d6      	bne.n	800aa44 <_svfiprintf_r+0x174>
 800aa96:	89ab      	ldrh	r3, [r5, #12]
 800aa98:	065b      	lsls	r3, r3, #25
 800aa9a:	f53f af2d 	bmi.w	800a8f8 <_svfiprintf_r+0x28>
 800aa9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaa0:	b01d      	add	sp, #116	; 0x74
 800aaa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa6:	ab03      	add	r3, sp, #12
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	462a      	mov	r2, r5
 800aaac:	4b05      	ldr	r3, [pc, #20]	; (800aac4 <_svfiprintf_r+0x1f4>)
 800aaae:	a904      	add	r1, sp, #16
 800aab0:	4638      	mov	r0, r7
 800aab2:	f7fd fbff 	bl	80082b4 <_printf_i>
 800aab6:	e7eb      	b.n	800aa90 <_svfiprintf_r+0x1c0>
 800aab8:	0800b8ec 	.word	0x0800b8ec
 800aabc:	0800b8f6 	.word	0x0800b8f6
 800aac0:	08007d6d 	.word	0x08007d6d
 800aac4:	0800a81d 	.word	0x0800a81d
 800aac8:	0800b8f2 	.word	0x0800b8f2

0800aacc <__sflush_r>:
 800aacc:	898a      	ldrh	r2, [r1, #12]
 800aace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aad2:	4605      	mov	r5, r0
 800aad4:	0710      	lsls	r0, r2, #28
 800aad6:	460c      	mov	r4, r1
 800aad8:	d458      	bmi.n	800ab8c <__sflush_r+0xc0>
 800aada:	684b      	ldr	r3, [r1, #4]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	dc05      	bgt.n	800aaec <__sflush_r+0x20>
 800aae0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	dc02      	bgt.n	800aaec <__sflush_r+0x20>
 800aae6:	2000      	movs	r0, #0
 800aae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aaee:	2e00      	cmp	r6, #0
 800aaf0:	d0f9      	beq.n	800aae6 <__sflush_r+0x1a>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aaf8:	682f      	ldr	r7, [r5, #0]
 800aafa:	6a21      	ldr	r1, [r4, #32]
 800aafc:	602b      	str	r3, [r5, #0]
 800aafe:	d032      	beq.n	800ab66 <__sflush_r+0x9a>
 800ab00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab02:	89a3      	ldrh	r3, [r4, #12]
 800ab04:	075a      	lsls	r2, r3, #29
 800ab06:	d505      	bpl.n	800ab14 <__sflush_r+0x48>
 800ab08:	6863      	ldr	r3, [r4, #4]
 800ab0a:	1ac0      	subs	r0, r0, r3
 800ab0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab0e:	b10b      	cbz	r3, 800ab14 <__sflush_r+0x48>
 800ab10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab12:	1ac0      	subs	r0, r0, r3
 800ab14:	2300      	movs	r3, #0
 800ab16:	4602      	mov	r2, r0
 800ab18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab1a:	6a21      	ldr	r1, [r4, #32]
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	47b0      	blx	r6
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	89a3      	ldrh	r3, [r4, #12]
 800ab24:	d106      	bne.n	800ab34 <__sflush_r+0x68>
 800ab26:	6829      	ldr	r1, [r5, #0]
 800ab28:	291d      	cmp	r1, #29
 800ab2a:	d82b      	bhi.n	800ab84 <__sflush_r+0xb8>
 800ab2c:	4a29      	ldr	r2, [pc, #164]	; (800abd4 <__sflush_r+0x108>)
 800ab2e:	410a      	asrs	r2, r1
 800ab30:	07d6      	lsls	r6, r2, #31
 800ab32:	d427      	bmi.n	800ab84 <__sflush_r+0xb8>
 800ab34:	2200      	movs	r2, #0
 800ab36:	6062      	str	r2, [r4, #4]
 800ab38:	04d9      	lsls	r1, r3, #19
 800ab3a:	6922      	ldr	r2, [r4, #16]
 800ab3c:	6022      	str	r2, [r4, #0]
 800ab3e:	d504      	bpl.n	800ab4a <__sflush_r+0x7e>
 800ab40:	1c42      	adds	r2, r0, #1
 800ab42:	d101      	bne.n	800ab48 <__sflush_r+0x7c>
 800ab44:	682b      	ldr	r3, [r5, #0]
 800ab46:	b903      	cbnz	r3, 800ab4a <__sflush_r+0x7e>
 800ab48:	6560      	str	r0, [r4, #84]	; 0x54
 800ab4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab4c:	602f      	str	r7, [r5, #0]
 800ab4e:	2900      	cmp	r1, #0
 800ab50:	d0c9      	beq.n	800aae6 <__sflush_r+0x1a>
 800ab52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab56:	4299      	cmp	r1, r3
 800ab58:	d002      	beq.n	800ab60 <__sflush_r+0x94>
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	f7fe fd3a 	bl	80095d4 <_free_r>
 800ab60:	2000      	movs	r0, #0
 800ab62:	6360      	str	r0, [r4, #52]	; 0x34
 800ab64:	e7c0      	b.n	800aae8 <__sflush_r+0x1c>
 800ab66:	2301      	movs	r3, #1
 800ab68:	4628      	mov	r0, r5
 800ab6a:	47b0      	blx	r6
 800ab6c:	1c41      	adds	r1, r0, #1
 800ab6e:	d1c8      	bne.n	800ab02 <__sflush_r+0x36>
 800ab70:	682b      	ldr	r3, [r5, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d0c5      	beq.n	800ab02 <__sflush_r+0x36>
 800ab76:	2b1d      	cmp	r3, #29
 800ab78:	d001      	beq.n	800ab7e <__sflush_r+0xb2>
 800ab7a:	2b16      	cmp	r3, #22
 800ab7c:	d101      	bne.n	800ab82 <__sflush_r+0xb6>
 800ab7e:	602f      	str	r7, [r5, #0]
 800ab80:	e7b1      	b.n	800aae6 <__sflush_r+0x1a>
 800ab82:	89a3      	ldrh	r3, [r4, #12]
 800ab84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab88:	81a3      	strh	r3, [r4, #12]
 800ab8a:	e7ad      	b.n	800aae8 <__sflush_r+0x1c>
 800ab8c:	690f      	ldr	r7, [r1, #16]
 800ab8e:	2f00      	cmp	r7, #0
 800ab90:	d0a9      	beq.n	800aae6 <__sflush_r+0x1a>
 800ab92:	0793      	lsls	r3, r2, #30
 800ab94:	680e      	ldr	r6, [r1, #0]
 800ab96:	bf08      	it	eq
 800ab98:	694b      	ldreq	r3, [r1, #20]
 800ab9a:	600f      	str	r7, [r1, #0]
 800ab9c:	bf18      	it	ne
 800ab9e:	2300      	movne	r3, #0
 800aba0:	eba6 0807 	sub.w	r8, r6, r7
 800aba4:	608b      	str	r3, [r1, #8]
 800aba6:	f1b8 0f00 	cmp.w	r8, #0
 800abaa:	dd9c      	ble.n	800aae6 <__sflush_r+0x1a>
 800abac:	6a21      	ldr	r1, [r4, #32]
 800abae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800abb0:	4643      	mov	r3, r8
 800abb2:	463a      	mov	r2, r7
 800abb4:	4628      	mov	r0, r5
 800abb6:	47b0      	blx	r6
 800abb8:	2800      	cmp	r0, #0
 800abba:	dc06      	bgt.n	800abca <__sflush_r+0xfe>
 800abbc:	89a3      	ldrh	r3, [r4, #12]
 800abbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abc2:	81a3      	strh	r3, [r4, #12]
 800abc4:	f04f 30ff 	mov.w	r0, #4294967295
 800abc8:	e78e      	b.n	800aae8 <__sflush_r+0x1c>
 800abca:	4407      	add	r7, r0
 800abcc:	eba8 0800 	sub.w	r8, r8, r0
 800abd0:	e7e9      	b.n	800aba6 <__sflush_r+0xda>
 800abd2:	bf00      	nop
 800abd4:	dfbffffe 	.word	0xdfbffffe

0800abd8 <_fflush_r>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	690b      	ldr	r3, [r1, #16]
 800abdc:	4605      	mov	r5, r0
 800abde:	460c      	mov	r4, r1
 800abe0:	b913      	cbnz	r3, 800abe8 <_fflush_r+0x10>
 800abe2:	2500      	movs	r5, #0
 800abe4:	4628      	mov	r0, r5
 800abe6:	bd38      	pop	{r3, r4, r5, pc}
 800abe8:	b118      	cbz	r0, 800abf2 <_fflush_r+0x1a>
 800abea:	6a03      	ldr	r3, [r0, #32]
 800abec:	b90b      	cbnz	r3, 800abf2 <_fflush_r+0x1a>
 800abee:	f7fd fd0f 	bl	8008610 <__sinit>
 800abf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d0f3      	beq.n	800abe2 <_fflush_r+0xa>
 800abfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abfc:	07d0      	lsls	r0, r2, #31
 800abfe:	d404      	bmi.n	800ac0a <_fflush_r+0x32>
 800ac00:	0599      	lsls	r1, r3, #22
 800ac02:	d402      	bmi.n	800ac0a <_fflush_r+0x32>
 800ac04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac06:	f7fd fe40 	bl	800888a <__retarget_lock_acquire_recursive>
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	f7ff ff5d 	bl	800aacc <__sflush_r>
 800ac12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac14:	07da      	lsls	r2, r3, #31
 800ac16:	4605      	mov	r5, r0
 800ac18:	d4e4      	bmi.n	800abe4 <_fflush_r+0xc>
 800ac1a:	89a3      	ldrh	r3, [r4, #12]
 800ac1c:	059b      	lsls	r3, r3, #22
 800ac1e:	d4e1      	bmi.n	800abe4 <_fflush_r+0xc>
 800ac20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac22:	f7fd fe33 	bl	800888c <__retarget_lock_release_recursive>
 800ac26:	e7dd      	b.n	800abe4 <_fflush_r+0xc>

0800ac28 <memmove>:
 800ac28:	4288      	cmp	r0, r1
 800ac2a:	b510      	push	{r4, lr}
 800ac2c:	eb01 0402 	add.w	r4, r1, r2
 800ac30:	d902      	bls.n	800ac38 <memmove+0x10>
 800ac32:	4284      	cmp	r4, r0
 800ac34:	4623      	mov	r3, r4
 800ac36:	d807      	bhi.n	800ac48 <memmove+0x20>
 800ac38:	1e43      	subs	r3, r0, #1
 800ac3a:	42a1      	cmp	r1, r4
 800ac3c:	d008      	beq.n	800ac50 <memmove+0x28>
 800ac3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac46:	e7f8      	b.n	800ac3a <memmove+0x12>
 800ac48:	4402      	add	r2, r0
 800ac4a:	4601      	mov	r1, r0
 800ac4c:	428a      	cmp	r2, r1
 800ac4e:	d100      	bne.n	800ac52 <memmove+0x2a>
 800ac50:	bd10      	pop	{r4, pc}
 800ac52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac5a:	e7f7      	b.n	800ac4c <memmove+0x24>

0800ac5c <_sbrk_r>:
 800ac5c:	b538      	push	{r3, r4, r5, lr}
 800ac5e:	4d06      	ldr	r5, [pc, #24]	; (800ac78 <_sbrk_r+0x1c>)
 800ac60:	2300      	movs	r3, #0
 800ac62:	4604      	mov	r4, r0
 800ac64:	4608      	mov	r0, r1
 800ac66:	602b      	str	r3, [r5, #0]
 800ac68:	f7f7 f876 	bl	8001d58 <_sbrk>
 800ac6c:	1c43      	adds	r3, r0, #1
 800ac6e:	d102      	bne.n	800ac76 <_sbrk_r+0x1a>
 800ac70:	682b      	ldr	r3, [r5, #0]
 800ac72:	b103      	cbz	r3, 800ac76 <_sbrk_r+0x1a>
 800ac74:	6023      	str	r3, [r4, #0]
 800ac76:	bd38      	pop	{r3, r4, r5, pc}
 800ac78:	20000514 	.word	0x20000514

0800ac7c <__assert_func>:
 800ac7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac7e:	4614      	mov	r4, r2
 800ac80:	461a      	mov	r2, r3
 800ac82:	4b09      	ldr	r3, [pc, #36]	; (800aca8 <__assert_func+0x2c>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4605      	mov	r5, r0
 800ac88:	68d8      	ldr	r0, [r3, #12]
 800ac8a:	b14c      	cbz	r4, 800aca0 <__assert_func+0x24>
 800ac8c:	4b07      	ldr	r3, [pc, #28]	; (800acac <__assert_func+0x30>)
 800ac8e:	9100      	str	r1, [sp, #0]
 800ac90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac94:	4906      	ldr	r1, [pc, #24]	; (800acb0 <__assert_func+0x34>)
 800ac96:	462b      	mov	r3, r5
 800ac98:	f000 f854 	bl	800ad44 <fiprintf>
 800ac9c:	f000 f864 	bl	800ad68 <abort>
 800aca0:	4b04      	ldr	r3, [pc, #16]	; (800acb4 <__assert_func+0x38>)
 800aca2:	461c      	mov	r4, r3
 800aca4:	e7f3      	b.n	800ac8e <__assert_func+0x12>
 800aca6:	bf00      	nop
 800aca8:	200001d0 	.word	0x200001d0
 800acac:	0800b8fd 	.word	0x0800b8fd
 800acb0:	0800b90a 	.word	0x0800b90a
 800acb4:	0800b938 	.word	0x0800b938

0800acb8 <_calloc_r>:
 800acb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acba:	fba1 2402 	umull	r2, r4, r1, r2
 800acbe:	b94c      	cbnz	r4, 800acd4 <_calloc_r+0x1c>
 800acc0:	4611      	mov	r1, r2
 800acc2:	9201      	str	r2, [sp, #4]
 800acc4:	f7ff f852 	bl	8009d6c <_malloc_r>
 800acc8:	9a01      	ldr	r2, [sp, #4]
 800acca:	4605      	mov	r5, r0
 800accc:	b930      	cbnz	r0, 800acdc <_calloc_r+0x24>
 800acce:	4628      	mov	r0, r5
 800acd0:	b003      	add	sp, #12
 800acd2:	bd30      	pop	{r4, r5, pc}
 800acd4:	220c      	movs	r2, #12
 800acd6:	6002      	str	r2, [r0, #0]
 800acd8:	2500      	movs	r5, #0
 800acda:	e7f8      	b.n	800acce <_calloc_r+0x16>
 800acdc:	4621      	mov	r1, r4
 800acde:	f7fd fd44 	bl	800876a <memset>
 800ace2:	e7f4      	b.n	800acce <_calloc_r+0x16>

0800ace4 <_realloc_r>:
 800ace4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ace8:	4680      	mov	r8, r0
 800acea:	4614      	mov	r4, r2
 800acec:	460e      	mov	r6, r1
 800acee:	b921      	cbnz	r1, 800acfa <_realloc_r+0x16>
 800acf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acf4:	4611      	mov	r1, r2
 800acf6:	f7ff b839 	b.w	8009d6c <_malloc_r>
 800acfa:	b92a      	cbnz	r2, 800ad08 <_realloc_r+0x24>
 800acfc:	f7fe fc6a 	bl	80095d4 <_free_r>
 800ad00:	4625      	mov	r5, r4
 800ad02:	4628      	mov	r0, r5
 800ad04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad08:	f000 f835 	bl	800ad76 <_malloc_usable_size_r>
 800ad0c:	4284      	cmp	r4, r0
 800ad0e:	4607      	mov	r7, r0
 800ad10:	d802      	bhi.n	800ad18 <_realloc_r+0x34>
 800ad12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad16:	d812      	bhi.n	800ad3e <_realloc_r+0x5a>
 800ad18:	4621      	mov	r1, r4
 800ad1a:	4640      	mov	r0, r8
 800ad1c:	f7ff f826 	bl	8009d6c <_malloc_r>
 800ad20:	4605      	mov	r5, r0
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d0ed      	beq.n	800ad02 <_realloc_r+0x1e>
 800ad26:	42bc      	cmp	r4, r7
 800ad28:	4622      	mov	r2, r4
 800ad2a:	4631      	mov	r1, r6
 800ad2c:	bf28      	it	cs
 800ad2e:	463a      	movcs	r2, r7
 800ad30:	f7fd fdb5 	bl	800889e <memcpy>
 800ad34:	4631      	mov	r1, r6
 800ad36:	4640      	mov	r0, r8
 800ad38:	f7fe fc4c 	bl	80095d4 <_free_r>
 800ad3c:	e7e1      	b.n	800ad02 <_realloc_r+0x1e>
 800ad3e:	4635      	mov	r5, r6
 800ad40:	e7df      	b.n	800ad02 <_realloc_r+0x1e>
	...

0800ad44 <fiprintf>:
 800ad44:	b40e      	push	{r1, r2, r3}
 800ad46:	b503      	push	{r0, r1, lr}
 800ad48:	4601      	mov	r1, r0
 800ad4a:	ab03      	add	r3, sp, #12
 800ad4c:	4805      	ldr	r0, [pc, #20]	; (800ad64 <fiprintf+0x20>)
 800ad4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad52:	6800      	ldr	r0, [r0, #0]
 800ad54:	9301      	str	r3, [sp, #4]
 800ad56:	f000 f83f 	bl	800add8 <_vfiprintf_r>
 800ad5a:	b002      	add	sp, #8
 800ad5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad60:	b003      	add	sp, #12
 800ad62:	4770      	bx	lr
 800ad64:	200001d0 	.word	0x200001d0

0800ad68 <abort>:
 800ad68:	b508      	push	{r3, lr}
 800ad6a:	2006      	movs	r0, #6
 800ad6c:	f000 fa0c 	bl	800b188 <raise>
 800ad70:	2001      	movs	r0, #1
 800ad72:	f7f6 ff79 	bl	8001c68 <_exit>

0800ad76 <_malloc_usable_size_r>:
 800ad76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad7a:	1f18      	subs	r0, r3, #4
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	bfbc      	itt	lt
 800ad80:	580b      	ldrlt	r3, [r1, r0]
 800ad82:	18c0      	addlt	r0, r0, r3
 800ad84:	4770      	bx	lr

0800ad86 <__sfputc_r>:
 800ad86:	6893      	ldr	r3, [r2, #8]
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	b410      	push	{r4}
 800ad8e:	6093      	str	r3, [r2, #8]
 800ad90:	da08      	bge.n	800ada4 <__sfputc_r+0x1e>
 800ad92:	6994      	ldr	r4, [r2, #24]
 800ad94:	42a3      	cmp	r3, r4
 800ad96:	db01      	blt.n	800ad9c <__sfputc_r+0x16>
 800ad98:	290a      	cmp	r1, #10
 800ad9a:	d103      	bne.n	800ada4 <__sfputc_r+0x1e>
 800ad9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ada0:	f000 b934 	b.w	800b00c <__swbuf_r>
 800ada4:	6813      	ldr	r3, [r2, #0]
 800ada6:	1c58      	adds	r0, r3, #1
 800ada8:	6010      	str	r0, [r2, #0]
 800adaa:	7019      	strb	r1, [r3, #0]
 800adac:	4608      	mov	r0, r1
 800adae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <__sfputs_r>:
 800adb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb6:	4606      	mov	r6, r0
 800adb8:	460f      	mov	r7, r1
 800adba:	4614      	mov	r4, r2
 800adbc:	18d5      	adds	r5, r2, r3
 800adbe:	42ac      	cmp	r4, r5
 800adc0:	d101      	bne.n	800adc6 <__sfputs_r+0x12>
 800adc2:	2000      	movs	r0, #0
 800adc4:	e007      	b.n	800add6 <__sfputs_r+0x22>
 800adc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adca:	463a      	mov	r2, r7
 800adcc:	4630      	mov	r0, r6
 800adce:	f7ff ffda 	bl	800ad86 <__sfputc_r>
 800add2:	1c43      	adds	r3, r0, #1
 800add4:	d1f3      	bne.n	800adbe <__sfputs_r+0xa>
 800add6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800add8 <_vfiprintf_r>:
 800add8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800addc:	460d      	mov	r5, r1
 800adde:	b09d      	sub	sp, #116	; 0x74
 800ade0:	4614      	mov	r4, r2
 800ade2:	4698      	mov	r8, r3
 800ade4:	4606      	mov	r6, r0
 800ade6:	b118      	cbz	r0, 800adf0 <_vfiprintf_r+0x18>
 800ade8:	6a03      	ldr	r3, [r0, #32]
 800adea:	b90b      	cbnz	r3, 800adf0 <_vfiprintf_r+0x18>
 800adec:	f7fd fc10 	bl	8008610 <__sinit>
 800adf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adf2:	07d9      	lsls	r1, r3, #31
 800adf4:	d405      	bmi.n	800ae02 <_vfiprintf_r+0x2a>
 800adf6:	89ab      	ldrh	r3, [r5, #12]
 800adf8:	059a      	lsls	r2, r3, #22
 800adfa:	d402      	bmi.n	800ae02 <_vfiprintf_r+0x2a>
 800adfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adfe:	f7fd fd44 	bl	800888a <__retarget_lock_acquire_recursive>
 800ae02:	89ab      	ldrh	r3, [r5, #12]
 800ae04:	071b      	lsls	r3, r3, #28
 800ae06:	d501      	bpl.n	800ae0c <_vfiprintf_r+0x34>
 800ae08:	692b      	ldr	r3, [r5, #16]
 800ae0a:	b99b      	cbnz	r3, 800ae34 <_vfiprintf_r+0x5c>
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	4630      	mov	r0, r6
 800ae10:	f000 f93a 	bl	800b088 <__swsetup_r>
 800ae14:	b170      	cbz	r0, 800ae34 <_vfiprintf_r+0x5c>
 800ae16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae18:	07dc      	lsls	r4, r3, #31
 800ae1a:	d504      	bpl.n	800ae26 <_vfiprintf_r+0x4e>
 800ae1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae20:	b01d      	add	sp, #116	; 0x74
 800ae22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae26:	89ab      	ldrh	r3, [r5, #12]
 800ae28:	0598      	lsls	r0, r3, #22
 800ae2a:	d4f7      	bmi.n	800ae1c <_vfiprintf_r+0x44>
 800ae2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae2e:	f7fd fd2d 	bl	800888c <__retarget_lock_release_recursive>
 800ae32:	e7f3      	b.n	800ae1c <_vfiprintf_r+0x44>
 800ae34:	2300      	movs	r3, #0
 800ae36:	9309      	str	r3, [sp, #36]	; 0x24
 800ae38:	2320      	movs	r3, #32
 800ae3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae42:	2330      	movs	r3, #48	; 0x30
 800ae44:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800aff8 <_vfiprintf_r+0x220>
 800ae48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae4c:	f04f 0901 	mov.w	r9, #1
 800ae50:	4623      	mov	r3, r4
 800ae52:	469a      	mov	sl, r3
 800ae54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae58:	b10a      	cbz	r2, 800ae5e <_vfiprintf_r+0x86>
 800ae5a:	2a25      	cmp	r2, #37	; 0x25
 800ae5c:	d1f9      	bne.n	800ae52 <_vfiprintf_r+0x7a>
 800ae5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ae62:	d00b      	beq.n	800ae7c <_vfiprintf_r+0xa4>
 800ae64:	465b      	mov	r3, fp
 800ae66:	4622      	mov	r2, r4
 800ae68:	4629      	mov	r1, r5
 800ae6a:	4630      	mov	r0, r6
 800ae6c:	f7ff ffa2 	bl	800adb4 <__sfputs_r>
 800ae70:	3001      	adds	r0, #1
 800ae72:	f000 80a9 	beq.w	800afc8 <_vfiprintf_r+0x1f0>
 800ae76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae78:	445a      	add	r2, fp
 800ae7a:	9209      	str	r2, [sp, #36]	; 0x24
 800ae7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	f000 80a1 	beq.w	800afc8 <_vfiprintf_r+0x1f0>
 800ae86:	2300      	movs	r3, #0
 800ae88:	f04f 32ff 	mov.w	r2, #4294967295
 800ae8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae90:	f10a 0a01 	add.w	sl, sl, #1
 800ae94:	9304      	str	r3, [sp, #16]
 800ae96:	9307      	str	r3, [sp, #28]
 800ae98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae9c:	931a      	str	r3, [sp, #104]	; 0x68
 800ae9e:	4654      	mov	r4, sl
 800aea0:	2205      	movs	r2, #5
 800aea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aea6:	4854      	ldr	r0, [pc, #336]	; (800aff8 <_vfiprintf_r+0x220>)
 800aea8:	f7f5 f9a2 	bl	80001f0 <memchr>
 800aeac:	9a04      	ldr	r2, [sp, #16]
 800aeae:	b9d8      	cbnz	r0, 800aee8 <_vfiprintf_r+0x110>
 800aeb0:	06d1      	lsls	r1, r2, #27
 800aeb2:	bf44      	itt	mi
 800aeb4:	2320      	movmi	r3, #32
 800aeb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeba:	0713      	lsls	r3, r2, #28
 800aebc:	bf44      	itt	mi
 800aebe:	232b      	movmi	r3, #43	; 0x2b
 800aec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aec4:	f89a 3000 	ldrb.w	r3, [sl]
 800aec8:	2b2a      	cmp	r3, #42	; 0x2a
 800aeca:	d015      	beq.n	800aef8 <_vfiprintf_r+0x120>
 800aecc:	9a07      	ldr	r2, [sp, #28]
 800aece:	4654      	mov	r4, sl
 800aed0:	2000      	movs	r0, #0
 800aed2:	f04f 0c0a 	mov.w	ip, #10
 800aed6:	4621      	mov	r1, r4
 800aed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aedc:	3b30      	subs	r3, #48	; 0x30
 800aede:	2b09      	cmp	r3, #9
 800aee0:	d94d      	bls.n	800af7e <_vfiprintf_r+0x1a6>
 800aee2:	b1b0      	cbz	r0, 800af12 <_vfiprintf_r+0x13a>
 800aee4:	9207      	str	r2, [sp, #28]
 800aee6:	e014      	b.n	800af12 <_vfiprintf_r+0x13a>
 800aee8:	eba0 0308 	sub.w	r3, r0, r8
 800aeec:	fa09 f303 	lsl.w	r3, r9, r3
 800aef0:	4313      	orrs	r3, r2
 800aef2:	9304      	str	r3, [sp, #16]
 800aef4:	46a2      	mov	sl, r4
 800aef6:	e7d2      	b.n	800ae9e <_vfiprintf_r+0xc6>
 800aef8:	9b03      	ldr	r3, [sp, #12]
 800aefa:	1d19      	adds	r1, r3, #4
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	9103      	str	r1, [sp, #12]
 800af00:	2b00      	cmp	r3, #0
 800af02:	bfbb      	ittet	lt
 800af04:	425b      	neglt	r3, r3
 800af06:	f042 0202 	orrlt.w	r2, r2, #2
 800af0a:	9307      	strge	r3, [sp, #28]
 800af0c:	9307      	strlt	r3, [sp, #28]
 800af0e:	bfb8      	it	lt
 800af10:	9204      	strlt	r2, [sp, #16]
 800af12:	7823      	ldrb	r3, [r4, #0]
 800af14:	2b2e      	cmp	r3, #46	; 0x2e
 800af16:	d10c      	bne.n	800af32 <_vfiprintf_r+0x15a>
 800af18:	7863      	ldrb	r3, [r4, #1]
 800af1a:	2b2a      	cmp	r3, #42	; 0x2a
 800af1c:	d134      	bne.n	800af88 <_vfiprintf_r+0x1b0>
 800af1e:	9b03      	ldr	r3, [sp, #12]
 800af20:	1d1a      	adds	r2, r3, #4
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	9203      	str	r2, [sp, #12]
 800af26:	2b00      	cmp	r3, #0
 800af28:	bfb8      	it	lt
 800af2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800af2e:	3402      	adds	r4, #2
 800af30:	9305      	str	r3, [sp, #20]
 800af32:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b008 <_vfiprintf_r+0x230>
 800af36:	7821      	ldrb	r1, [r4, #0]
 800af38:	2203      	movs	r2, #3
 800af3a:	4650      	mov	r0, sl
 800af3c:	f7f5 f958 	bl	80001f0 <memchr>
 800af40:	b138      	cbz	r0, 800af52 <_vfiprintf_r+0x17a>
 800af42:	9b04      	ldr	r3, [sp, #16]
 800af44:	eba0 000a 	sub.w	r0, r0, sl
 800af48:	2240      	movs	r2, #64	; 0x40
 800af4a:	4082      	lsls	r2, r0
 800af4c:	4313      	orrs	r3, r2
 800af4e:	3401      	adds	r4, #1
 800af50:	9304      	str	r3, [sp, #16]
 800af52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af56:	4829      	ldr	r0, [pc, #164]	; (800affc <_vfiprintf_r+0x224>)
 800af58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af5c:	2206      	movs	r2, #6
 800af5e:	f7f5 f947 	bl	80001f0 <memchr>
 800af62:	2800      	cmp	r0, #0
 800af64:	d03f      	beq.n	800afe6 <_vfiprintf_r+0x20e>
 800af66:	4b26      	ldr	r3, [pc, #152]	; (800b000 <_vfiprintf_r+0x228>)
 800af68:	bb1b      	cbnz	r3, 800afb2 <_vfiprintf_r+0x1da>
 800af6a:	9b03      	ldr	r3, [sp, #12]
 800af6c:	3307      	adds	r3, #7
 800af6e:	f023 0307 	bic.w	r3, r3, #7
 800af72:	3308      	adds	r3, #8
 800af74:	9303      	str	r3, [sp, #12]
 800af76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af78:	443b      	add	r3, r7
 800af7a:	9309      	str	r3, [sp, #36]	; 0x24
 800af7c:	e768      	b.n	800ae50 <_vfiprintf_r+0x78>
 800af7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800af82:	460c      	mov	r4, r1
 800af84:	2001      	movs	r0, #1
 800af86:	e7a6      	b.n	800aed6 <_vfiprintf_r+0xfe>
 800af88:	2300      	movs	r3, #0
 800af8a:	3401      	adds	r4, #1
 800af8c:	9305      	str	r3, [sp, #20]
 800af8e:	4619      	mov	r1, r3
 800af90:	f04f 0c0a 	mov.w	ip, #10
 800af94:	4620      	mov	r0, r4
 800af96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af9a:	3a30      	subs	r2, #48	; 0x30
 800af9c:	2a09      	cmp	r2, #9
 800af9e:	d903      	bls.n	800afa8 <_vfiprintf_r+0x1d0>
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d0c6      	beq.n	800af32 <_vfiprintf_r+0x15a>
 800afa4:	9105      	str	r1, [sp, #20]
 800afa6:	e7c4      	b.n	800af32 <_vfiprintf_r+0x15a>
 800afa8:	fb0c 2101 	mla	r1, ip, r1, r2
 800afac:	4604      	mov	r4, r0
 800afae:	2301      	movs	r3, #1
 800afb0:	e7f0      	b.n	800af94 <_vfiprintf_r+0x1bc>
 800afb2:	ab03      	add	r3, sp, #12
 800afb4:	9300      	str	r3, [sp, #0]
 800afb6:	462a      	mov	r2, r5
 800afb8:	4b12      	ldr	r3, [pc, #72]	; (800b004 <_vfiprintf_r+0x22c>)
 800afba:	a904      	add	r1, sp, #16
 800afbc:	4630      	mov	r0, r6
 800afbe:	f7fc fed5 	bl	8007d6c <_printf_float>
 800afc2:	4607      	mov	r7, r0
 800afc4:	1c78      	adds	r0, r7, #1
 800afc6:	d1d6      	bne.n	800af76 <_vfiprintf_r+0x19e>
 800afc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afca:	07d9      	lsls	r1, r3, #31
 800afcc:	d405      	bmi.n	800afda <_vfiprintf_r+0x202>
 800afce:	89ab      	ldrh	r3, [r5, #12]
 800afd0:	059a      	lsls	r2, r3, #22
 800afd2:	d402      	bmi.n	800afda <_vfiprintf_r+0x202>
 800afd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afd6:	f7fd fc59 	bl	800888c <__retarget_lock_release_recursive>
 800afda:	89ab      	ldrh	r3, [r5, #12]
 800afdc:	065b      	lsls	r3, r3, #25
 800afde:	f53f af1d 	bmi.w	800ae1c <_vfiprintf_r+0x44>
 800afe2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afe4:	e71c      	b.n	800ae20 <_vfiprintf_r+0x48>
 800afe6:	ab03      	add	r3, sp, #12
 800afe8:	9300      	str	r3, [sp, #0]
 800afea:	462a      	mov	r2, r5
 800afec:	4b05      	ldr	r3, [pc, #20]	; (800b004 <_vfiprintf_r+0x22c>)
 800afee:	a904      	add	r1, sp, #16
 800aff0:	4630      	mov	r0, r6
 800aff2:	f7fd f95f 	bl	80082b4 <_printf_i>
 800aff6:	e7e4      	b.n	800afc2 <_vfiprintf_r+0x1ea>
 800aff8:	0800b8ec 	.word	0x0800b8ec
 800affc:	0800b8f6 	.word	0x0800b8f6
 800b000:	08007d6d 	.word	0x08007d6d
 800b004:	0800adb5 	.word	0x0800adb5
 800b008:	0800b8f2 	.word	0x0800b8f2

0800b00c <__swbuf_r>:
 800b00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00e:	460e      	mov	r6, r1
 800b010:	4614      	mov	r4, r2
 800b012:	4605      	mov	r5, r0
 800b014:	b118      	cbz	r0, 800b01e <__swbuf_r+0x12>
 800b016:	6a03      	ldr	r3, [r0, #32]
 800b018:	b90b      	cbnz	r3, 800b01e <__swbuf_r+0x12>
 800b01a:	f7fd faf9 	bl	8008610 <__sinit>
 800b01e:	69a3      	ldr	r3, [r4, #24]
 800b020:	60a3      	str	r3, [r4, #8]
 800b022:	89a3      	ldrh	r3, [r4, #12]
 800b024:	071a      	lsls	r2, r3, #28
 800b026:	d525      	bpl.n	800b074 <__swbuf_r+0x68>
 800b028:	6923      	ldr	r3, [r4, #16]
 800b02a:	b31b      	cbz	r3, 800b074 <__swbuf_r+0x68>
 800b02c:	6823      	ldr	r3, [r4, #0]
 800b02e:	6922      	ldr	r2, [r4, #16]
 800b030:	1a98      	subs	r0, r3, r2
 800b032:	6963      	ldr	r3, [r4, #20]
 800b034:	b2f6      	uxtb	r6, r6
 800b036:	4283      	cmp	r3, r0
 800b038:	4637      	mov	r7, r6
 800b03a:	dc04      	bgt.n	800b046 <__swbuf_r+0x3a>
 800b03c:	4621      	mov	r1, r4
 800b03e:	4628      	mov	r0, r5
 800b040:	f7ff fdca 	bl	800abd8 <_fflush_r>
 800b044:	b9e0      	cbnz	r0, 800b080 <__swbuf_r+0x74>
 800b046:	68a3      	ldr	r3, [r4, #8]
 800b048:	3b01      	subs	r3, #1
 800b04a:	60a3      	str	r3, [r4, #8]
 800b04c:	6823      	ldr	r3, [r4, #0]
 800b04e:	1c5a      	adds	r2, r3, #1
 800b050:	6022      	str	r2, [r4, #0]
 800b052:	701e      	strb	r6, [r3, #0]
 800b054:	6962      	ldr	r2, [r4, #20]
 800b056:	1c43      	adds	r3, r0, #1
 800b058:	429a      	cmp	r2, r3
 800b05a:	d004      	beq.n	800b066 <__swbuf_r+0x5a>
 800b05c:	89a3      	ldrh	r3, [r4, #12]
 800b05e:	07db      	lsls	r3, r3, #31
 800b060:	d506      	bpl.n	800b070 <__swbuf_r+0x64>
 800b062:	2e0a      	cmp	r6, #10
 800b064:	d104      	bne.n	800b070 <__swbuf_r+0x64>
 800b066:	4621      	mov	r1, r4
 800b068:	4628      	mov	r0, r5
 800b06a:	f7ff fdb5 	bl	800abd8 <_fflush_r>
 800b06e:	b938      	cbnz	r0, 800b080 <__swbuf_r+0x74>
 800b070:	4638      	mov	r0, r7
 800b072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b074:	4621      	mov	r1, r4
 800b076:	4628      	mov	r0, r5
 800b078:	f000 f806 	bl	800b088 <__swsetup_r>
 800b07c:	2800      	cmp	r0, #0
 800b07e:	d0d5      	beq.n	800b02c <__swbuf_r+0x20>
 800b080:	f04f 37ff 	mov.w	r7, #4294967295
 800b084:	e7f4      	b.n	800b070 <__swbuf_r+0x64>
	...

0800b088 <__swsetup_r>:
 800b088:	b538      	push	{r3, r4, r5, lr}
 800b08a:	4b2a      	ldr	r3, [pc, #168]	; (800b134 <__swsetup_r+0xac>)
 800b08c:	4605      	mov	r5, r0
 800b08e:	6818      	ldr	r0, [r3, #0]
 800b090:	460c      	mov	r4, r1
 800b092:	b118      	cbz	r0, 800b09c <__swsetup_r+0x14>
 800b094:	6a03      	ldr	r3, [r0, #32]
 800b096:	b90b      	cbnz	r3, 800b09c <__swsetup_r+0x14>
 800b098:	f7fd faba 	bl	8008610 <__sinit>
 800b09c:	89a3      	ldrh	r3, [r4, #12]
 800b09e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0a2:	0718      	lsls	r0, r3, #28
 800b0a4:	d422      	bmi.n	800b0ec <__swsetup_r+0x64>
 800b0a6:	06d9      	lsls	r1, r3, #27
 800b0a8:	d407      	bmi.n	800b0ba <__swsetup_r+0x32>
 800b0aa:	2309      	movs	r3, #9
 800b0ac:	602b      	str	r3, [r5, #0]
 800b0ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b0b2:	81a3      	strh	r3, [r4, #12]
 800b0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b8:	e034      	b.n	800b124 <__swsetup_r+0x9c>
 800b0ba:	0758      	lsls	r0, r3, #29
 800b0bc:	d512      	bpl.n	800b0e4 <__swsetup_r+0x5c>
 800b0be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0c0:	b141      	cbz	r1, 800b0d4 <__swsetup_r+0x4c>
 800b0c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0c6:	4299      	cmp	r1, r3
 800b0c8:	d002      	beq.n	800b0d0 <__swsetup_r+0x48>
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	f7fe fa82 	bl	80095d4 <_free_r>
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	6363      	str	r3, [r4, #52]	; 0x34
 800b0d4:	89a3      	ldrh	r3, [r4, #12]
 800b0d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0da:	81a3      	strh	r3, [r4, #12]
 800b0dc:	2300      	movs	r3, #0
 800b0de:	6063      	str	r3, [r4, #4]
 800b0e0:	6923      	ldr	r3, [r4, #16]
 800b0e2:	6023      	str	r3, [r4, #0]
 800b0e4:	89a3      	ldrh	r3, [r4, #12]
 800b0e6:	f043 0308 	orr.w	r3, r3, #8
 800b0ea:	81a3      	strh	r3, [r4, #12]
 800b0ec:	6923      	ldr	r3, [r4, #16]
 800b0ee:	b94b      	cbnz	r3, 800b104 <__swsetup_r+0x7c>
 800b0f0:	89a3      	ldrh	r3, [r4, #12]
 800b0f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b0f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0fa:	d003      	beq.n	800b104 <__swsetup_r+0x7c>
 800b0fc:	4621      	mov	r1, r4
 800b0fe:	4628      	mov	r0, r5
 800b100:	f000 f884 	bl	800b20c <__smakebuf_r>
 800b104:	89a0      	ldrh	r0, [r4, #12]
 800b106:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b10a:	f010 0301 	ands.w	r3, r0, #1
 800b10e:	d00a      	beq.n	800b126 <__swsetup_r+0x9e>
 800b110:	2300      	movs	r3, #0
 800b112:	60a3      	str	r3, [r4, #8]
 800b114:	6963      	ldr	r3, [r4, #20]
 800b116:	425b      	negs	r3, r3
 800b118:	61a3      	str	r3, [r4, #24]
 800b11a:	6923      	ldr	r3, [r4, #16]
 800b11c:	b943      	cbnz	r3, 800b130 <__swsetup_r+0xa8>
 800b11e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b122:	d1c4      	bne.n	800b0ae <__swsetup_r+0x26>
 800b124:	bd38      	pop	{r3, r4, r5, pc}
 800b126:	0781      	lsls	r1, r0, #30
 800b128:	bf58      	it	pl
 800b12a:	6963      	ldrpl	r3, [r4, #20]
 800b12c:	60a3      	str	r3, [r4, #8]
 800b12e:	e7f4      	b.n	800b11a <__swsetup_r+0x92>
 800b130:	2000      	movs	r0, #0
 800b132:	e7f7      	b.n	800b124 <__swsetup_r+0x9c>
 800b134:	200001d0 	.word	0x200001d0

0800b138 <_raise_r>:
 800b138:	291f      	cmp	r1, #31
 800b13a:	b538      	push	{r3, r4, r5, lr}
 800b13c:	4604      	mov	r4, r0
 800b13e:	460d      	mov	r5, r1
 800b140:	d904      	bls.n	800b14c <_raise_r+0x14>
 800b142:	2316      	movs	r3, #22
 800b144:	6003      	str	r3, [r0, #0]
 800b146:	f04f 30ff 	mov.w	r0, #4294967295
 800b14a:	bd38      	pop	{r3, r4, r5, pc}
 800b14c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b14e:	b112      	cbz	r2, 800b156 <_raise_r+0x1e>
 800b150:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b154:	b94b      	cbnz	r3, 800b16a <_raise_r+0x32>
 800b156:	4620      	mov	r0, r4
 800b158:	f000 f830 	bl	800b1bc <_getpid_r>
 800b15c:	462a      	mov	r2, r5
 800b15e:	4601      	mov	r1, r0
 800b160:	4620      	mov	r0, r4
 800b162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b166:	f000 b817 	b.w	800b198 <_kill_r>
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	d00a      	beq.n	800b184 <_raise_r+0x4c>
 800b16e:	1c59      	adds	r1, r3, #1
 800b170:	d103      	bne.n	800b17a <_raise_r+0x42>
 800b172:	2316      	movs	r3, #22
 800b174:	6003      	str	r3, [r0, #0]
 800b176:	2001      	movs	r0, #1
 800b178:	e7e7      	b.n	800b14a <_raise_r+0x12>
 800b17a:	2400      	movs	r4, #0
 800b17c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b180:	4628      	mov	r0, r5
 800b182:	4798      	blx	r3
 800b184:	2000      	movs	r0, #0
 800b186:	e7e0      	b.n	800b14a <_raise_r+0x12>

0800b188 <raise>:
 800b188:	4b02      	ldr	r3, [pc, #8]	; (800b194 <raise+0xc>)
 800b18a:	4601      	mov	r1, r0
 800b18c:	6818      	ldr	r0, [r3, #0]
 800b18e:	f7ff bfd3 	b.w	800b138 <_raise_r>
 800b192:	bf00      	nop
 800b194:	200001d0 	.word	0x200001d0

0800b198 <_kill_r>:
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	4d07      	ldr	r5, [pc, #28]	; (800b1b8 <_kill_r+0x20>)
 800b19c:	2300      	movs	r3, #0
 800b19e:	4604      	mov	r4, r0
 800b1a0:	4608      	mov	r0, r1
 800b1a2:	4611      	mov	r1, r2
 800b1a4:	602b      	str	r3, [r5, #0]
 800b1a6:	f7f6 fd4f 	bl	8001c48 <_kill>
 800b1aa:	1c43      	adds	r3, r0, #1
 800b1ac:	d102      	bne.n	800b1b4 <_kill_r+0x1c>
 800b1ae:	682b      	ldr	r3, [r5, #0]
 800b1b0:	b103      	cbz	r3, 800b1b4 <_kill_r+0x1c>
 800b1b2:	6023      	str	r3, [r4, #0]
 800b1b4:	bd38      	pop	{r3, r4, r5, pc}
 800b1b6:	bf00      	nop
 800b1b8:	20000514 	.word	0x20000514

0800b1bc <_getpid_r>:
 800b1bc:	f7f6 bd3c 	b.w	8001c38 <_getpid>

0800b1c0 <__swhatbuf_r>:
 800b1c0:	b570      	push	{r4, r5, r6, lr}
 800b1c2:	460c      	mov	r4, r1
 800b1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1c8:	2900      	cmp	r1, #0
 800b1ca:	b096      	sub	sp, #88	; 0x58
 800b1cc:	4615      	mov	r5, r2
 800b1ce:	461e      	mov	r6, r3
 800b1d0:	da0d      	bge.n	800b1ee <__swhatbuf_r+0x2e>
 800b1d2:	89a3      	ldrh	r3, [r4, #12]
 800b1d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b1d8:	f04f 0100 	mov.w	r1, #0
 800b1dc:	bf0c      	ite	eq
 800b1de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b1e2:	2340      	movne	r3, #64	; 0x40
 800b1e4:	2000      	movs	r0, #0
 800b1e6:	6031      	str	r1, [r6, #0]
 800b1e8:	602b      	str	r3, [r5, #0]
 800b1ea:	b016      	add	sp, #88	; 0x58
 800b1ec:	bd70      	pop	{r4, r5, r6, pc}
 800b1ee:	466a      	mov	r2, sp
 800b1f0:	f000 f848 	bl	800b284 <_fstat_r>
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	dbec      	blt.n	800b1d2 <__swhatbuf_r+0x12>
 800b1f8:	9901      	ldr	r1, [sp, #4]
 800b1fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b1fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b202:	4259      	negs	r1, r3
 800b204:	4159      	adcs	r1, r3
 800b206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b20a:	e7eb      	b.n	800b1e4 <__swhatbuf_r+0x24>

0800b20c <__smakebuf_r>:
 800b20c:	898b      	ldrh	r3, [r1, #12]
 800b20e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b210:	079d      	lsls	r5, r3, #30
 800b212:	4606      	mov	r6, r0
 800b214:	460c      	mov	r4, r1
 800b216:	d507      	bpl.n	800b228 <__smakebuf_r+0x1c>
 800b218:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b21c:	6023      	str	r3, [r4, #0]
 800b21e:	6123      	str	r3, [r4, #16]
 800b220:	2301      	movs	r3, #1
 800b222:	6163      	str	r3, [r4, #20]
 800b224:	b002      	add	sp, #8
 800b226:	bd70      	pop	{r4, r5, r6, pc}
 800b228:	ab01      	add	r3, sp, #4
 800b22a:	466a      	mov	r2, sp
 800b22c:	f7ff ffc8 	bl	800b1c0 <__swhatbuf_r>
 800b230:	9900      	ldr	r1, [sp, #0]
 800b232:	4605      	mov	r5, r0
 800b234:	4630      	mov	r0, r6
 800b236:	f7fe fd99 	bl	8009d6c <_malloc_r>
 800b23a:	b948      	cbnz	r0, 800b250 <__smakebuf_r+0x44>
 800b23c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b240:	059a      	lsls	r2, r3, #22
 800b242:	d4ef      	bmi.n	800b224 <__smakebuf_r+0x18>
 800b244:	f023 0303 	bic.w	r3, r3, #3
 800b248:	f043 0302 	orr.w	r3, r3, #2
 800b24c:	81a3      	strh	r3, [r4, #12]
 800b24e:	e7e3      	b.n	800b218 <__smakebuf_r+0xc>
 800b250:	89a3      	ldrh	r3, [r4, #12]
 800b252:	6020      	str	r0, [r4, #0]
 800b254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b258:	81a3      	strh	r3, [r4, #12]
 800b25a:	9b00      	ldr	r3, [sp, #0]
 800b25c:	6163      	str	r3, [r4, #20]
 800b25e:	9b01      	ldr	r3, [sp, #4]
 800b260:	6120      	str	r0, [r4, #16]
 800b262:	b15b      	cbz	r3, 800b27c <__smakebuf_r+0x70>
 800b264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b268:	4630      	mov	r0, r6
 800b26a:	f000 f81d 	bl	800b2a8 <_isatty_r>
 800b26e:	b128      	cbz	r0, 800b27c <__smakebuf_r+0x70>
 800b270:	89a3      	ldrh	r3, [r4, #12]
 800b272:	f023 0303 	bic.w	r3, r3, #3
 800b276:	f043 0301 	orr.w	r3, r3, #1
 800b27a:	81a3      	strh	r3, [r4, #12]
 800b27c:	89a3      	ldrh	r3, [r4, #12]
 800b27e:	431d      	orrs	r5, r3
 800b280:	81a5      	strh	r5, [r4, #12]
 800b282:	e7cf      	b.n	800b224 <__smakebuf_r+0x18>

0800b284 <_fstat_r>:
 800b284:	b538      	push	{r3, r4, r5, lr}
 800b286:	4d07      	ldr	r5, [pc, #28]	; (800b2a4 <_fstat_r+0x20>)
 800b288:	2300      	movs	r3, #0
 800b28a:	4604      	mov	r4, r0
 800b28c:	4608      	mov	r0, r1
 800b28e:	4611      	mov	r1, r2
 800b290:	602b      	str	r3, [r5, #0]
 800b292:	f7f6 fd38 	bl	8001d06 <_fstat>
 800b296:	1c43      	adds	r3, r0, #1
 800b298:	d102      	bne.n	800b2a0 <_fstat_r+0x1c>
 800b29a:	682b      	ldr	r3, [r5, #0]
 800b29c:	b103      	cbz	r3, 800b2a0 <_fstat_r+0x1c>
 800b29e:	6023      	str	r3, [r4, #0]
 800b2a0:	bd38      	pop	{r3, r4, r5, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20000514 	.word	0x20000514

0800b2a8 <_isatty_r>:
 800b2a8:	b538      	push	{r3, r4, r5, lr}
 800b2aa:	4d06      	ldr	r5, [pc, #24]	; (800b2c4 <_isatty_r+0x1c>)
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	4608      	mov	r0, r1
 800b2b2:	602b      	str	r3, [r5, #0]
 800b2b4:	f7f6 fd37 	bl	8001d26 <_isatty>
 800b2b8:	1c43      	adds	r3, r0, #1
 800b2ba:	d102      	bne.n	800b2c2 <_isatty_r+0x1a>
 800b2bc:	682b      	ldr	r3, [r5, #0]
 800b2be:	b103      	cbz	r3, 800b2c2 <_isatty_r+0x1a>
 800b2c0:	6023      	str	r3, [r4, #0]
 800b2c2:	bd38      	pop	{r3, r4, r5, pc}
 800b2c4:	20000514 	.word	0x20000514

0800b2c8 <_init>:
 800b2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ca:	bf00      	nop
 800b2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ce:	bc08      	pop	{r3}
 800b2d0:	469e      	mov	lr, r3
 800b2d2:	4770      	bx	lr

0800b2d4 <_fini>:
 800b2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2d6:	bf00      	nop
 800b2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2da:	bc08      	pop	{r3}
 800b2dc:	469e      	mov	lr, r3
 800b2de:	4770      	bx	lr
